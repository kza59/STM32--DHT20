
LedWave1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007048  08007048  00008048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800748c  0800748c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800748c  0800748c  0000848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007494  08007494  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007494  08007494  00008494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007498  08007498  00008498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800749c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  08007670  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08007670  000093e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a53e  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001877  00000000  00000000  00013742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00014fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c1  00000000  00000000  000159b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169c7  00000000  00000000  00016171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbe1  00000000  00000000  0002cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a280  00000000  00000000  00038719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2999  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab0  00000000  00000000  000c29dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c648c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007030 	.word	0x08007030

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007030 	.word	0x08007030

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f000 fe6e 	bl	8001c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f81c 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f000 f8dc 	bl	800114c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f94:	f000 f8b0 	bl	80010f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f98:	f000 f880 	bl	800109c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000f9c:	f000 fa35 	bl	800140a <LCD_Init>

  writeToLCD("LCD WORKS!");
 8000fa0:	4807      	ldr	r0, [pc, #28]	@ (8000fc0 <main+0x3c>)
 8000fa2:	f000 fa1d 	bl	80013e0 <writeToLCD>
  LCD_SendCommand(LCD_NEXTLINE);
 8000fa6:	20c0      	movs	r0, #192	@ 0xc0
 8000fa8:	f000 f968 	bl	800127c <LCD_SendCommand>
  writeToLCD("WELCOME");
 8000fac:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <main+0x40>)
 8000fae:	f000 fa17 	bl	80013e0 <writeToLCD>


  DHT20_Measure();
 8000fb2:	f000 fa5b 	bl	800146c <DHT20_Measure>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  turnOnLED(0);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 fbf4 	bl	80017a4 <turnOnLED>
 8000fbc:	e7fb      	b.n	8000fb6 <main+0x32>
 8000fbe:	bf00      	nop
 8000fc0:	08007048 	.word	0x08007048
 8000fc4:	08007054 	.word	0x08007054

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	@ 0x50
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	2230      	movs	r2, #48	@ 0x30
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 ff5b 	bl	8004e92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <SystemClock_Config+0xcc>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <SystemClock_Config+0xcc>)
 8000ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffc:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <SystemClock_Config+0xcc>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <SystemClock_Config+0xd0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a21      	ldr	r2, [pc, #132]	@ (8001098 <SystemClock_Config+0xd0>)
 8001012:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <SystemClock_Config+0xd0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102c:	2310      	movs	r3, #16
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001030:	2302      	movs	r3, #2
 8001032:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001034:	2300      	movs	r3, #0
 8001036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001038:	2310      	movs	r3, #16
 800103a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800103c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001040:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001042:	2304      	movs	r3, #4
 8001044:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001046:	2304      	movs	r3, #4
 8001048:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fa32 	bl	80034b8 <HAL_RCC_OscConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800105a:	f000 fbf3 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105e:	230f      	movs	r3, #15
 8001060:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001062:	2302      	movs	r3, #2
 8001064:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2102      	movs	r1, #2
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fc94 	bl	80039a8 <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001086:	f000 fbdd 	bl	8001844 <Error_Handler>
  }
}
 800108a:	bf00      	nop
 800108c:	3750      	adds	r7, #80	@ 0x50
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40007000 	.word	0x40007000

0800109c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010a2:	4a13      	ldr	r2, [pc, #76]	@ (80010f0 <MX_I2C1_Init+0x54>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010a8:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <MX_I2C1_Init+0x58>)
 80010aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010da:	f001 f9c3 	bl	8002464 <HAL_I2C_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e4:	f000 fbae 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001f0 	.word	0x200001f0
 80010f0:	40005400 	.word	0x40005400
 80010f4:	000186a0 	.word	0x000186a0

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <MX_USART2_UART_Init+0x50>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001130:	f002 fe5a 	bl	8003de8 <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800113a:	f000 fb83 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000244 	.word	0x20000244
 8001148:	40004400 	.word	0x40004400

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b41      	ldr	r3, [pc, #260]	@ (800126c <MX_GPIO_Init+0x120>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a40      	ldr	r2, [pc, #256]	@ (800126c <MX_GPIO_Init+0x120>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b3e      	ldr	r3, [pc, #248]	@ (800126c <MX_GPIO_Init+0x120>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b3a      	ldr	r3, [pc, #232]	@ (800126c <MX_GPIO_Init+0x120>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a39      	ldr	r2, [pc, #228]	@ (800126c <MX_GPIO_Init+0x120>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b37      	ldr	r3, [pc, #220]	@ (800126c <MX_GPIO_Init+0x120>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b33      	ldr	r3, [pc, #204]	@ (800126c <MX_GPIO_Init+0x120>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a32      	ldr	r2, [pc, #200]	@ (800126c <MX_GPIO_Init+0x120>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b30      	ldr	r3, [pc, #192]	@ (800126c <MX_GPIO_Init+0x120>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b2c      	ldr	r3, [pc, #176]	@ (800126c <MX_GPIO_Init+0x120>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a2b      	ldr	r2, [pc, #172]	@ (800126c <MX_GPIO_Init+0x120>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b29      	ldr	r3, [pc, #164]	@ (800126c <MX_GPIO_Init+0x120>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011d2:	2200      	movs	r2, #0
 80011d4:	213f      	movs	r1, #63	@ 0x3f
 80011d6:	4826      	ldr	r0, [pc, #152]	@ (8001270 <MX_GPIO_Init+0x124>)
 80011d8:	f001 f92a 	bl	8002430 <HAL_GPIO_WritePin>
                          |LCD2_Pin|LCD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E_LCD_Pin|LCD_R_W_Pin|RS_Pin|LD2_Pin
 80011dc:	2200      	movs	r2, #0
 80011de:	21f3      	movs	r1, #243	@ 0xf3
 80011e0:	4824      	ldr	r0, [pc, #144]	@ (8001274 <MX_GPIO_Init+0x128>)
 80011e2:	f001 f925 	bl	8002430 <HAL_GPIO_WritePin>
                          |LCD0_Pin|LCD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD4_Pin|LCD5_Pin|LCD6_Pin|LCD7_Pin
 80011e6:	2200      	movs	r2, #0
 80011e8:	f240 6107 	movw	r1, #1543	@ 0x607
 80011ec:	4822      	ldr	r0, [pc, #136]	@ (8001278 <MX_GPIO_Init+0x12c>)
 80011ee:	f001 f91f 	bl	8002430 <HAL_GPIO_WritePin>
                          |DHT20_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4819      	ldr	r0, [pc, #100]	@ (8001270 <MX_GPIO_Init+0x124>)
 800120a:	f000 fea9 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           LCD2_Pin LCD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800120e:	233f      	movs	r3, #63	@ 0x3f
 8001210:	617b      	str	r3, [r7, #20]
                          |LCD2_Pin|LCD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4812      	ldr	r0, [pc, #72]	@ (8001270 <MX_GPIO_Init+0x124>)
 8001226:	f000 fe9b 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_LCD_Pin LCD_R_W_Pin RS_Pin LD2_Pin
                           LCD0_Pin LCD1_Pin */
  GPIO_InitStruct.Pin = E_LCD_Pin|LCD_R_W_Pin|RS_Pin|LD2_Pin
 800122a:	23f3      	movs	r3, #243	@ 0xf3
 800122c:	617b      	str	r3, [r7, #20]
                          |LCD0_Pin|LCD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	480c      	ldr	r0, [pc, #48]	@ (8001274 <MX_GPIO_Init+0x128>)
 8001242:	f000 fe8d 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD4_Pin LCD5_Pin LCD6_Pin LCD7_Pin
                           DHT20_EN_Pin */
  GPIO_InitStruct.Pin = LCD4_Pin|LCD5_Pin|LCD6_Pin|LCD7_Pin
 8001246:	f240 6307 	movw	r3, #1543	@ 0x607
 800124a:	617b      	str	r3, [r7, #20]
                          |DHT20_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <MX_GPIO_Init+0x12c>)
 8001260:	f000 fe7e 	bl	8001f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	@ 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40020800 	.word	0x40020800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020400 	.word	0x40020400

0800127c <LCD_SendCommand>:

/* USER CODE BEGIN 4 */
void LCD_SendCommand(uint8_t cmd) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2110      	movs	r1, #16
 800128a:	4809      	ldr	r0, [pc, #36]	@ (80012b0 <LCD_SendCommand+0x34>)
 800128c:	f001 f8d0 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_R_W_GPIO_Port, LCD_R_W_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2102      	movs	r1, #2
 8001294:	4806      	ldr	r0, [pc, #24]	@ (80012b0 <LCD_SendCommand+0x34>)
 8001296:	f001 f8cb 	bl	8002430 <HAL_GPIO_WritePin>
    LCD_WriteByte(cmd);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f825 	bl	80012ec <LCD_WriteByte>
    HAL_Delay(1);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f000 fd52 	bl	8001d4c <HAL_Delay>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40020000 	.word	0x40020000

080012b4 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2110      	movs	r1, #16
 80012c2:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <LCD_SendData+0x34>)
 80012c4:	f001 f8b4 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_R_W_GPIO_Port, LCD_R_W_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2102      	movs	r1, #2
 80012cc:	4806      	ldr	r0, [pc, #24]	@ (80012e8 <LCD_SendData+0x34>)
 80012ce:	f001 f8af 	bl	8002430 <HAL_GPIO_WritePin>
    LCD_WriteByte(data);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f809 	bl	80012ec <LCD_WriteByte>
    HAL_Delay(1);
 80012da:	2001      	movs	r0, #1
 80012dc:	f000 fd36 	bl	8001d4c <HAL_Delay>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40020000 	.word	0x40020000

080012ec <LCD_WriteByte>:

void LCD_WriteByte(uint8_t byte) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
    // Write each bit to its respective pin
    HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, (byte & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	2140      	movs	r1, #64	@ 0x40
 8001302:	482a      	ldr	r0, [pc, #168]	@ (80013ac <LCD_WriteByte+0xc0>)
 8001304:	f001 f894 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, (byte & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	105b      	asrs	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	b2db      	uxtb	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	2180      	movs	r1, #128	@ 0x80
 8001318:	4824      	ldr	r0, [pc, #144]	@ (80013ac <LCD_WriteByte+0xc0>)
 800131a:	f001 f889 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, (byte & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	109b      	asrs	r3, r3, #2
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	2110      	movs	r1, #16
 800132e:	4820      	ldr	r0, [pc, #128]	@ (80013b0 <LCD_WriteByte+0xc4>)
 8001330:	f001 f87e 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, (byte & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	10db      	asrs	r3, r3, #3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	2120      	movs	r1, #32
 8001344:	481a      	ldr	r0, [pc, #104]	@ (80013b0 <LCD_WriteByte+0xc4>)
 8001346:	f001 f873 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD4_GPIO_Port, LCD4_Pin, (byte & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	111b      	asrs	r3, r3, #4
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	2101      	movs	r1, #1
 800135a:	4816      	ldr	r0, [pc, #88]	@ (80013b4 <LCD_WriteByte+0xc8>)
 800135c:	f001 f868 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD5_GPIO_Port, LCD5_Pin, (byte & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	115b      	asrs	r3, r3, #5
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	2102      	movs	r1, #2
 8001370:	4810      	ldr	r0, [pc, #64]	@ (80013b4 <LCD_WriteByte+0xc8>)
 8001372:	f001 f85d 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD6_GPIO_Port, LCD6_Pin, (byte & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	119b      	asrs	r3, r3, #6
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	461a      	mov	r2, r3
 8001384:	2104      	movs	r1, #4
 8001386:	480b      	ldr	r0, [pc, #44]	@ (80013b4 <LCD_WriteByte+0xc8>)
 8001388:	f001 f852 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD7_GPIO_Port, LCD7_Pin, (byte & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	09db      	lsrs	r3, r3, #7
 8001390:	b2db      	uxtb	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001398:	4806      	ldr	r0, [pc, #24]	@ (80013b4 <LCD_WriteByte+0xc8>)
 800139a:	f001 f849 	bl	8002430 <HAL_GPIO_WritePin>

    // Pulse the enable pin
    LCD_PulseEnable();
 800139e:	f000 f80b 	bl	80013b8 <LCD_PulseEnable>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020400 	.word	0x40020400

080013b8 <LCD_PulseEnable>:

void LCD_PulseEnable(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(E_LCD_GPIO_Port, E_LCD_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2101      	movs	r1, #1
 80013c0:	4806      	ldr	r0, [pc, #24]	@ (80013dc <LCD_PulseEnable+0x24>)
 80013c2:	f001 f835 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // Enable pulse width (typically > 450ns)
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 fcc0 	bl	8001d4c <HAL_Delay>
    HAL_GPIO_WritePin(E_LCD_GPIO_Port, E_LCD_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2101      	movs	r1, #1
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <LCD_PulseEnable+0x24>)
 80013d2:	f001 f82d 	bl	8002430 <HAL_GPIO_WritePin>
    // No need for additional delay here, handled in calling functions
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40020000 	.word	0x40020000

080013e0 <writeToLCD>:

void writeToLCD(const char* str) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    while (*str) {
 80013e8:	e006      	b.n	80013f8 <writeToLCD+0x18>
        LCD_SendData(*str++);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff5e 	bl	80012b4 <LCD_SendData>
    while (*str) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f4      	bne.n	80013ea <writeToLCD+0xa>
    }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <LCD_Init>:

void LCD_Init(void) {
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 800140e:	2032      	movs	r0, #50	@ 0x32
 8001410:	f000 fc9c 	bl	8001d4c <HAL_Delay>
    LCD_SendCommand(LCD_8BIT_INIT_SIGNAL);
 8001414:	2030      	movs	r0, #48	@ 0x30
 8001416:	f7ff ff31 	bl	800127c <LCD_SendCommand>
    HAL_Delay(5);
 800141a:	2005      	movs	r0, #5
 800141c:	f000 fc96 	bl	8001d4c <HAL_Delay>
    LCD_SendCommand(LCD_8BIT_INIT_SIGNAL);
 8001420:	2030      	movs	r0, #48	@ 0x30
 8001422:	f7ff ff2b 	bl	800127c <LCD_SendCommand>
    HAL_Delay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f000 fc90 	bl	8001d4c <HAL_Delay>
    LCD_SendCommand(LCD_8BIT_INIT_SIGNAL);
 800142c:	2030      	movs	r0, #48	@ 0x30
 800142e:	f7ff ff25 	bl	800127c <LCD_SendCommand>
    HAL_Delay(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 fc8a 	bl	8001d4c <HAL_Delay>
    LCD_SendCommand(LCD_8BIT_2LINES_5x8_FONT);
 8001438:	2038      	movs	r0, #56	@ 0x38
 800143a:	f7ff ff1f 	bl	800127c <LCD_SendCommand>
    HAL_Delay(1);
 800143e:	2001      	movs	r0, #1
 8001440:	f000 fc84 	bl	8001d4c <HAL_Delay>
    LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF_BLINK_OFF);
 8001444:	200c      	movs	r0, #12
 8001446:	f7ff ff19 	bl	800127c <LCD_SendCommand>
    HAL_Delay(1);
 800144a:	2001      	movs	r0, #1
 800144c:	f000 fc7e 	bl	8001d4c <HAL_Delay>
    LCD_SendCommand(LCD_CLEAR);
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff ff13 	bl	800127c <LCD_SendCommand>
    HAL_Delay(2);
 8001456:	2002      	movs	r0, #2
 8001458:	f000 fc78 	bl	8001d4c <HAL_Delay>
    LCD_SendCommand(LCD_ENTRY_MODE);
 800145c:	2006      	movs	r0, #6
 800145e:	f7ff ff0d 	bl	800127c <LCD_SendCommand>
    HAL_Delay(1);
 8001462:	2001      	movs	r0, #1
 8001464:	f000 fc72 	bl	8001d4c <HAL_Delay>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <DHT20_Measure>:

void DHT20_Measure(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b094      	sub	sp, #80	@ 0x50
 8001470:	af02      	add	r7, sp, #8
    HAL_GPIO_WritePin(GPIOB, DHT20_EN_Pin, GPIO_PIN_SET);  // Power ON
 8001472:	2201      	movs	r2, #1
 8001474:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001478:	48ba      	ldr	r0, [pc, #744]	@ (8001764 <DHT20_Measure+0x2f8>)
 800147a:	f000 ffd9 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 800147e:	20c8      	movs	r0, #200	@ 0xc8
 8001480:	f000 fc64 	bl	8001d4c <HAL_Delay>

    uint8_t status_byte = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t command_buf[3] = {0xAC, 0x33, 0x00};
 800148a:	4ab7      	ldr	r2, [pc, #732]	@ (8001768 <DHT20_Measure+0x2fc>)
 800148c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	4611      	mov	r1, r2
 8001494:	8019      	strh	r1, [r3, #0]
 8001496:	3302      	adds	r3, #2
 8001498:	0c12      	lsrs	r2, r2, #16
 800149a:	701a      	strb	r2, [r3, #0]
    uint8_t receive_buf[6] = {0};
 800149c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	809a      	strh	r2, [r3, #4]
    uint8_t init_reg[2];
    HAL_StatusTypeDef res;
    int attempts = 3;
 80014a6:	2303      	movs	r3, #3
 80014a8:	647b      	str	r3, [r7, #68]	@ 0x44

    while (attempts--) {
 80014aa:	e142      	b.n	8001732 <DHT20_Measure+0x2c6>
        LCD_SendCommand(LCD_CLEAR);
 80014ac:	2001      	movs	r0, #1
 80014ae:	f7ff fee5 	bl	800127c <LCD_SendCommand>
        writeToLCD("Checking Status...");
 80014b2:	48ae      	ldr	r0, [pc, #696]	@ (800176c <DHT20_Measure+0x300>)
 80014b4:	f7ff ff94 	bl	80013e0 <writeToLCD>
        res = HAL_I2C_Master_Receive(&hi2c1, DHT20_ADDRESS << 1, &status_byte, 1, 500);
 80014b8:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 80014bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	2170      	movs	r1, #112	@ 0x70
 80014c6:	48aa      	ldr	r0, [pc, #680]	@ (8001770 <DHT20_Measure+0x304>)
 80014c8:	f001 fa3e 	bl	8002948 <HAL_I2C_Master_Receive>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        if (res != HAL_OK) {
 80014d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d012      	beq.n	8001500 <DHT20_Measure+0x94>
            LCD_SendCommand(LCD_NEXTLINE);
 80014da:	20c0      	movs	r0, #192	@ 0xc0
 80014dc:	f7ff fece 	bl	800127c <LCD_SendCommand>
            writeToLCD("I2C Err - Resetting");
 80014e0:	48a4      	ldr	r0, [pc, #656]	@ (8001774 <DHT20_Measure+0x308>)
 80014e2:	f7ff ff7d 	bl	80013e0 <writeToLCD>
            HAL_I2C_DeInit(&hi2c1);
 80014e6:	48a2      	ldr	r0, [pc, #648]	@ (8001770 <DHT20_Measure+0x304>)
 80014e8:	f001 f900 	bl	80026ec <HAL_I2C_DeInit>
            HAL_Delay(10);
 80014ec:	200a      	movs	r0, #10
 80014ee:	f000 fc2d 	bl	8001d4c <HAL_Delay>
            HAL_I2C_Init(&hi2c1);
 80014f2:	489f      	ldr	r0, [pc, #636]	@ (8001770 <DHT20_Measure+0x304>)
 80014f4:	f000 ffb6 	bl	8002464 <HAL_I2C_Init>
            HAL_Delay(100);
 80014f8:	2064      	movs	r0, #100	@ 0x64
 80014fa:	f000 fc27 	bl	8001d4c <HAL_Delay>
            continue;
 80014fe:	e118      	b.n	8001732 <DHT20_Measure+0x2c6>
        }

        if ((status_byte & 0x18) != 0x18) {
 8001500:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001504:	f003 0318 	and.w	r3, r3, #24
 8001508:	2b18      	cmp	r3, #24
 800150a:	d03e      	beq.n	800158a <DHT20_Measure+0x11e>
            LCD_SendCommand(LCD_CLEAR);
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff feb5 	bl	800127c <LCD_SendCommand>
            writeToLCD("Init Regs 1B 1C 1E");
 8001512:	4899      	ldr	r0, [pc, #612]	@ (8001778 <DHT20_Measure+0x30c>)
 8001514:	f7ff ff64 	bl	80013e0 <writeToLCD>

            init_reg[0] = 0x1B; init_reg[1] = 0x00;
 8001518:	231b      	movs	r3, #27
 800151a:	f887 3020 	strb.w	r3, [r7, #32]
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            HAL_I2C_Master_Transmit(&hi2c1, DHT20_ADDRESS << 1, init_reg, 2, 500);
 8001524:	f107 0220 	add.w	r2, r7, #32
 8001528:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2302      	movs	r3, #2
 8001530:	2170      	movs	r1, #112	@ 0x70
 8001532:	488f      	ldr	r0, [pc, #572]	@ (8001770 <DHT20_Measure+0x304>)
 8001534:	f001 f90a 	bl	800274c <HAL_I2C_Master_Transmit>
            HAL_Delay(5);
 8001538:	2005      	movs	r0, #5
 800153a:	f000 fc07 	bl	8001d4c <HAL_Delay>

            init_reg[0] = 0x1C; init_reg[1] = 0x00;
 800153e:	231c      	movs	r3, #28
 8001540:	f887 3020 	strb.w	r3, [r7, #32]
 8001544:	2300      	movs	r3, #0
 8001546:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            HAL_I2C_Master_Transmit(&hi2c1, DHT20_ADDRESS << 1, init_reg, 2, 500);
 800154a:	f107 0220 	add.w	r2, r7, #32
 800154e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2302      	movs	r3, #2
 8001556:	2170      	movs	r1, #112	@ 0x70
 8001558:	4885      	ldr	r0, [pc, #532]	@ (8001770 <DHT20_Measure+0x304>)
 800155a:	f001 f8f7 	bl	800274c <HAL_I2C_Master_Transmit>
            HAL_Delay(5);
 800155e:	2005      	movs	r0, #5
 8001560:	f000 fbf4 	bl	8001d4c <HAL_Delay>

            init_reg[0] = 0x1E; init_reg[1] = 0x00;
 8001564:	231e      	movs	r3, #30
 8001566:	f887 3020 	strb.w	r3, [r7, #32]
 800156a:	2300      	movs	r3, #0
 800156c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            HAL_I2C_Master_Transmit(&hi2c1, DHT20_ADDRESS << 1, init_reg, 2, 500);
 8001570:	f107 0220 	add.w	r2, r7, #32
 8001574:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2302      	movs	r3, #2
 800157c:	2170      	movs	r1, #112	@ 0x70
 800157e:	487c      	ldr	r0, [pc, #496]	@ (8001770 <DHT20_Measure+0x304>)
 8001580:	f001 f8e4 	bl	800274c <HAL_I2C_Master_Transmit>
            HAL_Delay(5);
 8001584:	2005      	movs	r0, #5
 8001586:	f000 fbe1 	bl	8001d4c <HAL_Delay>
        }

        res = HAL_I2C_Master_Transmit(&hi2c1, DHT20_ADDRESS << 1, command_buf, 3, 500);
 800158a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800158e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2303      	movs	r3, #3
 8001596:	2170      	movs	r1, #112	@ 0x70
 8001598:	4875      	ldr	r0, [pc, #468]	@ (8001770 <DHT20_Measure+0x304>)
 800159a:	f001 f8d7 	bl	800274c <HAL_I2C_Master_Transmit>
 800159e:	4603      	mov	r3, r0
 80015a0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        HAL_Delay(80);
 80015a4:	2050      	movs	r0, #80	@ 0x50
 80015a6:	f000 fbd1 	bl	8001d4c <HAL_Delay>
        if (res != HAL_OK) {
 80015aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d012      	beq.n	80015d8 <DHT20_Measure+0x16c>
            LCD_SendCommand(LCD_CLEAR);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff fe62 	bl	800127c <LCD_SendCommand>
            writeToLCD("Cmd Fail - Reset");
 80015b8:	4870      	ldr	r0, [pc, #448]	@ (800177c <DHT20_Measure+0x310>)
 80015ba:	f7ff ff11 	bl	80013e0 <writeToLCD>
            HAL_I2C_DeInit(&hi2c1);
 80015be:	486c      	ldr	r0, [pc, #432]	@ (8001770 <DHT20_Measure+0x304>)
 80015c0:	f001 f894 	bl	80026ec <HAL_I2C_DeInit>
            HAL_Delay(10);
 80015c4:	200a      	movs	r0, #10
 80015c6:	f000 fbc1 	bl	8001d4c <HAL_Delay>
            HAL_I2C_Init(&hi2c1);
 80015ca:	4869      	ldr	r0, [pc, #420]	@ (8001770 <DHT20_Measure+0x304>)
 80015cc:	f000 ff4a 	bl	8002464 <HAL_I2C_Init>
            HAL_Delay(100);
 80015d0:	2064      	movs	r0, #100	@ 0x64
 80015d2:	f000 fbbb 	bl	8001d4c <HAL_Delay>
            continue;
 80015d6:	e0ac      	b.n	8001732 <DHT20_Measure+0x2c6>
        }

        HAL_I2C_Master_Receive(&hi2c1, DHT20_ADDRESS << 1, &status_byte, 1, 500);
 80015d8:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 80015dc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2301      	movs	r3, #1
 80015e4:	2170      	movs	r1, #112	@ 0x70
 80015e6:	4862      	ldr	r0, [pc, #392]	@ (8001770 <DHT20_Measure+0x304>)
 80015e8:	f001 f9ae 	bl	8002948 <HAL_I2C_Master_Receive>
        if ((status_byte & 0x80) == 0) {
 80015ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f2c0 8094 	blt.w	8001720 <DHT20_Measure+0x2b4>
            res = HAL_I2C_Master_Receive(&hi2c1, DHT20_ADDRESS << 1, receive_buf, 6, 1000);
 80015f8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80015fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2306      	movs	r3, #6
 8001604:	2170      	movs	r1, #112	@ 0x70
 8001606:	485a      	ldr	r0, [pc, #360]	@ (8001770 <DHT20_Measure+0x304>)
 8001608:	f001 f99e 	bl	8002948 <HAL_I2C_Master_Receive>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
            if (res != HAL_OK) {
 8001612:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <DHT20_Measure+0x1bc>
                LCD_SendCommand(LCD_CLEAR);
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff fe2e 	bl	800127c <LCD_SendCommand>
                writeToLCD("Read Fail - Retry");
 8001620:	4857      	ldr	r0, [pc, #348]	@ (8001780 <DHT20_Measure+0x314>)
 8001622:	f7ff fedd 	bl	80013e0 <writeToLCD>
 8001626:	e084      	b.n	8001732 <DHT20_Measure+0x2c6>
                continue;
            }

            uint32_t raw_humidity = ((uint32_t)receive_buf[1] << 12) |
 8001628:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800162c:	031a      	lsls	r2, r3, #12
                                    ((uint32_t)receive_buf[2] << 4) |
 800162e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001632:	011b      	lsls	r3, r3, #4
            uint32_t raw_humidity = ((uint32_t)receive_buf[1] << 12) |
 8001634:	4313      	orrs	r3, r2
                                    ((uint32_t)(receive_buf[3] >> 4));
 8001636:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800163a:	0912      	lsrs	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
            uint32_t raw_humidity = ((uint32_t)receive_buf[1] << 12) |
 800163e:	4313      	orrs	r3, r2
 8001640:	63fb      	str	r3, [r7, #60]	@ 0x3c

            uint32_t raw_temperature = (((uint32_t)(receive_buf[3] & 0x0F)) << 16) |
 8001642:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001646:	041b      	lsls	r3, r3, #16
 8001648:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
                                       ((uint32_t)receive_buf[4] << 8) |
 800164c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001650:	021b      	lsls	r3, r3, #8
            uint32_t raw_temperature = (((uint32_t)(receive_buf[3] & 0x0F)) << 16) |
 8001652:	4313      	orrs	r3, r2
                                       (uint32_t)receive_buf[5];
 8001654:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
            uint32_t raw_temperature = (((uint32_t)(receive_buf[3] & 0x0F)) << 16) |
 8001658:	4313      	orrs	r3, r2
 800165a:	63bb      	str	r3, [r7, #56]	@ 0x38

            float humidity = (raw_humidity / 1048576.0) * 100.0;
 800165c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800165e:	f7fe ff59 	bl	8000514 <__aeabi_ui2d>
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b47      	ldr	r3, [pc, #284]	@ (8001784 <DHT20_Measure+0x318>)
 8001668:	f7ff f8f8 	bl	800085c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	4b43      	ldr	r3, [pc, #268]	@ (8001788 <DHT20_Measure+0x31c>)
 800167a:	f7fe ffc5 	bl	8000608 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fa97 	bl	8000bb8 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	637b      	str	r3, [r7, #52]	@ 0x34
            float temperature = ((raw_temperature / 1048576.0) * 200.0) - 50.0;
 800168e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001690:	f7fe ff40 	bl	8000514 <__aeabi_ui2d>
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <DHT20_Measure+0x318>)
 800169a:	f7ff f8df 	bl	800085c <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b38      	ldr	r3, [pc, #224]	@ (800178c <DHT20_Measure+0x320>)
 80016ac:	f7fe ffac 	bl	8000608 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b34      	ldr	r3, [pc, #208]	@ (8001790 <DHT20_Measure+0x324>)
 80016be:	f7fe fdeb 	bl	8000298 <__aeabi_dsub>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff fa75 	bl	8000bb8 <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	633b      	str	r3, [r7, #48]	@ 0x30

            char lcd_buf[32];
            LCD_SendCommand(LCD_CLEAR);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f7ff fdd2 	bl	800127c <LCD_SendCommand>
            snprintf(lcd_buf, sizeof(lcd_buf), "Hum: %.2f%%", humidity);
 80016d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80016da:	f7fe ff3d 	bl	8000558 <__aeabi_f2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4638      	mov	r0, r7
 80016e4:	e9cd 2300 	strd	r2, r3, [sp]
 80016e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001794 <DHT20_Measure+0x328>)
 80016ea:	2120      	movs	r1, #32
 80016ec:	f003 fb58 	bl	8004da0 <sniprintf>
            writeToLCD(lcd_buf);
 80016f0:	463b      	mov	r3, r7
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fe74 	bl	80013e0 <writeToLCD>
            LCD_SendCommand(LCD_NEXTLINE);
 80016f8:	20c0      	movs	r0, #192	@ 0xc0
 80016fa:	f7ff fdbf 	bl	800127c <LCD_SendCommand>
            snprintf(lcd_buf, sizeof(lcd_buf), "Temp: %.2fC", temperature);
 80016fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001700:	f7fe ff2a 	bl	8000558 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4638      	mov	r0, r7
 800170a:	e9cd 2300 	strd	r2, r3, [sp]
 800170e:	4a22      	ldr	r2, [pc, #136]	@ (8001798 <DHT20_Measure+0x32c>)
 8001710:	2120      	movs	r1, #32
 8001712:	f003 fb45 	bl	8004da0 <sniprintf>
            writeToLCD(lcd_buf);
 8001716:	463b      	mov	r3, r7
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fe61 	bl	80013e0 <writeToLCD>
 800171e:	e00e      	b.n	800173e <DHT20_Measure+0x2d2>

            break;  // success
        } else {
            LCD_SendCommand(LCD_CLEAR);
 8001720:	2001      	movs	r0, #1
 8001722:	f7ff fdab 	bl	800127c <LCD_SendCommand>
            writeToLCD("Data not ready");
 8001726:	481d      	ldr	r0, [pc, #116]	@ (800179c <DHT20_Measure+0x330>)
 8001728:	f7ff fe5a 	bl	80013e0 <writeToLCD>
            HAL_Delay(100);
 800172c:	2064      	movs	r0, #100	@ 0x64
 800172e:	f000 fb0d 	bl	8001d4c <HAL_Delay>
    while (attempts--) {
 8001732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001734:	1e5a      	subs	r2, r3, #1
 8001736:	647a      	str	r2, [r7, #68]	@ 0x44
 8001738:	2b00      	cmp	r3, #0
 800173a:	f47f aeb7 	bne.w	80014ac <DHT20_Measure+0x40>
        }
    }

    if (attempts < 0) {
 800173e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001740:	2b00      	cmp	r3, #0
 8001742:	da05      	bge.n	8001750 <DHT20_Measure+0x2e4>
        LCD_SendCommand(LCD_CLEAR);
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff fd99 	bl	800127c <LCD_SendCommand>
        writeToLCD("DHT20 Failed");
 800174a:	4815      	ldr	r0, [pc, #84]	@ (80017a0 <DHT20_Measure+0x334>)
 800174c:	f7ff fe48 	bl	80013e0 <writeToLCD>
    }

    HAL_GPIO_WritePin(GPIOB, DHT20_EN_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001756:	4803      	ldr	r0, [pc, #12]	@ (8001764 <DHT20_Measure+0x2f8>)
 8001758:	f000 fe6a 	bl	8002430 <HAL_GPIO_WritePin>
}
 800175c:	bf00      	nop
 800175e:	3748      	adds	r7, #72	@ 0x48
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40020400 	.word	0x40020400
 8001768:	080070f8 	.word	0x080070f8
 800176c:	0800705c 	.word	0x0800705c
 8001770:	200001f0 	.word	0x200001f0
 8001774:	08007070 	.word	0x08007070
 8001778:	08007084 	.word	0x08007084
 800177c:	08007098 	.word	0x08007098
 8001780:	080070ac 	.word	0x080070ac
 8001784:	41300000 	.word	0x41300000
 8001788:	40590000 	.word	0x40590000
 800178c:	40690000 	.word	0x40690000
 8001790:	40490000 	.word	0x40490000
 8001794:	080070c0 	.word	0x080070c0
 8001798:	080070cc 	.word	0x080070cc
 800179c:	080070d8 	.word	0x080070d8
 80017a0:	080070e8 	.word	0x080070e8

080017a4 <turnOnLED>:

void turnOnLED(int led_number) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	switch(led_number) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d842      	bhi.n	8001838 <turnOnLED+0x94>
 80017b2:	a201      	add	r2, pc, #4	@ (adr r2, 80017b8 <turnOnLED+0x14>)
 80017b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b8:	080017c9 	.word	0x080017c9
 80017bc:	080017e5 	.word	0x080017e5
 80017c0:	08001801 	.word	0x08001801
 80017c4:	0800181d 	.word	0x0800181d
	case 0:
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2101      	movs	r1, #1
 80017cc:	481c      	ldr	r0, [pc, #112]	@ (8001840 <turnOnLED+0x9c>)
 80017ce:	f000 fe2f 	bl	8002430 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 80017d2:	2064      	movs	r0, #100	@ 0x64
 80017d4:	f000 faba 	bl	8001d4c <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	2101      	movs	r1, #1
 80017dc:	4818      	ldr	r0, [pc, #96]	@ (8001840 <turnOnLED+0x9c>)
 80017de:	f000 fe27 	bl	8002430 <HAL_GPIO_WritePin>
		break;
 80017e2:	e029      	b.n	8001838 <turnOnLED+0x94>
	case 1:
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2102      	movs	r1, #2
 80017e8:	4815      	ldr	r0, [pc, #84]	@ (8001840 <turnOnLED+0x9c>)
 80017ea:	f000 fe21 	bl	8002430 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 80017ee:	2064      	movs	r0, #100	@ 0x64
 80017f0:	f000 faac 	bl	8001d4c <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2102      	movs	r1, #2
 80017f8:	4811      	ldr	r0, [pc, #68]	@ (8001840 <turnOnLED+0x9c>)
 80017fa:	f000 fe19 	bl	8002430 <HAL_GPIO_WritePin>
		break;
 80017fe:	e01b      	b.n	8001838 <turnOnLED+0x94>
	case 2:
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	2104      	movs	r1, #4
 8001804:	480e      	ldr	r0, [pc, #56]	@ (8001840 <turnOnLED+0x9c>)
 8001806:	f000 fe13 	bl	8002430 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 800180a:	2064      	movs	r0, #100	@ 0x64
 800180c:	f000 fa9e 	bl	8001d4c <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	2104      	movs	r1, #4
 8001814:	480a      	ldr	r0, [pc, #40]	@ (8001840 <turnOnLED+0x9c>)
 8001816:	f000 fe0b 	bl	8002430 <HAL_GPIO_WritePin>
		break;
 800181a:	e00d      	b.n	8001838 <turnOnLED+0x94>
	case 3:
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	2108      	movs	r1, #8
 8001820:	4807      	ldr	r0, [pc, #28]	@ (8001840 <turnOnLED+0x9c>)
 8001822:	f000 fe05 	bl	8002430 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 8001826:	2064      	movs	r0, #100	@ 0x64
 8001828:	f000 fa90 	bl	8001d4c <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	2108      	movs	r1, #8
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <turnOnLED+0x9c>)
 8001832:	f000 fdfd 	bl	8002430 <HAL_GPIO_WritePin>
		break;
 8001836:	bf00      	nop
	}
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40020800 	.word	0x40020800

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <Error_Handler+0x8>

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	4a0f      	ldr	r2, [pc, #60]	@ (800189c <HAL_MspInit+0x4c>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001864:	6453      	str	r3, [r2, #68]	@ 0x44
 8001866:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	4a08      	ldr	r2, [pc, #32]	@ (800189c <HAL_MspInit+0x4c>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	@ 0x40
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800188e:	2007      	movs	r0, #7
 8001890:	f000 fb32 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a19      	ldr	r2, [pc, #100]	@ (8001924 <HAL_I2C_MspInit+0x84>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d12b      	bne.n	800191a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <HAL_I2C_MspInit+0x88>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a17      	ldr	r2, [pc, #92]	@ (8001928 <HAL_I2C_MspInit+0x88>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_I2C_MspInit+0x88>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018de:	23c0      	movs	r3, #192	@ 0xc0
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e2:	2312      	movs	r3, #18
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ee:	2304      	movs	r3, #4
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	480c      	ldr	r0, [pc, #48]	@ (800192c <HAL_I2C_MspInit+0x8c>)
 80018fa:	f000 fb31 	bl	8001f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <HAL_I2C_MspInit+0x88>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	4a08      	ldr	r2, [pc, #32]	@ (8001928 <HAL_I2C_MspInit+0x88>)
 8001908:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800190c:	6413      	str	r3, [r2, #64]	@ 0x40
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_I2C_MspInit+0x88>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	@ 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40005400 	.word	0x40005400
 8001928:	40023800 	.word	0x40023800
 800192c:	40020400 	.word	0x40020400

08001930 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <HAL_I2C_MspDeInit+0x38>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d10d      	bne.n	800195e <HAL_I2C_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_I2C_MspDeInit+0x3c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	4a09      	ldr	r2, [pc, #36]	@ (800196c <HAL_I2C_MspDeInit+0x3c>)
 8001948:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800194c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800194e:	2140      	movs	r1, #64	@ 0x40
 8001950:	4807      	ldr	r0, [pc, #28]	@ (8001970 <HAL_I2C_MspDeInit+0x40>)
 8001952:	f000 fc89 	bl	8002268 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001956:	2180      	movs	r1, #128	@ 0x80
 8001958:	4805      	ldr	r0, [pc, #20]	@ (8001970 <HAL_I2C_MspDeInit+0x40>)
 800195a:	f000 fc85 	bl	8002268 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40005400 	.word	0x40005400
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400

08001974 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_UART_MspInit+0x84>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d12b      	bne.n	80019ee <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <HAL_UART_MspInit+0x88>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <HAL_UART_MspInit+0x88>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <HAL_UART_MspInit+0x88>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <HAL_UART_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a10      	ldr	r2, [pc, #64]	@ (80019fc <HAL_UART_MspInit+0x88>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <HAL_UART_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019ce:	230c      	movs	r3, #12
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019de:	2307      	movs	r3, #7
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <HAL_UART_MspInit+0x8c>)
 80019ea:	f000 fab9 	bl	8001f60 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	@ 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40004400 	.word	0x40004400
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <NMI_Handler+0x4>

08001a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5a:	f000 f957 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  return 1;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_kill>:

int _kill(int pid, int sig)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7c:	f003 fa5c 	bl	8004f38 <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2216      	movs	r2, #22
 8001a84:	601a      	str	r2, [r3, #0]
  return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_exit>:

void _exit (int status)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a9a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffe7 	bl	8001a72 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <_exit+0x12>

08001aa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e00a      	b.n	8001ad0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aba:	f3af 8000 	nop.w
 8001abe:	4601      	mov	r1, r0
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	b2ca      	uxtb	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf0      	blt.n	8001aba <_read+0x12>
  }

  return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e009      	b.n	8001b08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	60ba      	str	r2, [r7, #8]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf1      	blt.n	8001af4 <_write+0x12>
  }
  return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_close>:

int _close(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b42:	605a      	str	r2, [r3, #4]
  return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_isatty>:

int _isatty(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	@ (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	@ (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f003 f9c0 	bl	8004f38 <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20020000 	.word	0x20020000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	2000028c 	.word	0x2000028c
 8001bec:	200003e0 	.word	0x200003e0

08001bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c18:	f7ff ffea 	bl	8001bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c1c:	480c      	ldr	r0, [pc, #48]	@ (8001c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1e:	490d      	ldr	r1, [pc, #52]	@ (8001c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c20:	4a0d      	ldr	r2, [pc, #52]	@ (8001c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c24:	e002      	b.n	8001c2c <LoopCopyDataInit>

08001c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2a:	3304      	adds	r3, #4

08001c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c30:	d3f9      	bcc.n	8001c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c34:	4c0a      	ldr	r4, [pc, #40]	@ (8001c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c38:	e001      	b.n	8001c3e <LoopFillZerobss>

08001c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c3c:	3204      	adds	r2, #4

08001c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c40:	d3fb      	bcc.n	8001c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c42:	f003 f97f 	bl	8004f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7ff f99d 	bl	8000f84 <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c58:	0800749c 	.word	0x0800749c
  ldr r2, =_sbss
 8001c5c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c60:	200003e0 	.word	0x200003e0

08001c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca8 <HAL_Init+0x40>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <HAL_Init+0x40>)
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <HAL_Init+0x40>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 f931 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f000 f808 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7ff fdd8 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_InitTick+0x54>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <HAL_InitTick+0x58>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f93b 	bl	8001f46 <HAL_SYSTICK_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00e      	b.n	8001cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d80a      	bhi.n	8001cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ce8:	f000 f911 	bl	8001f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cec:	4a06      	ldr	r2, [pc, #24]	@ (8001d08 <HAL_InitTick+0x5c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000008 	.word	0x20000008
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	20000290 	.word	0x20000290

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000290 	.word	0x20000290

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff ffee 	bl	8001d34 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d72:	bf00      	nop
 8001d74:	f7ff ffde 	bl	8001d34 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000008 	.word	0x20000008

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	@ (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	@ (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	@ 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	@ 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec4:	d301      	bcc.n	8001eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00f      	b.n	8001eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ed8:	f7ff ff8e 	bl	8001df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff47 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f20:	f7ff ff5c 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff8e 	bl	8001e4c <NVIC_EncodePriority>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff5d 	bl	8001df8 <__NVIC_SetPriority>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffb0 	bl	8001eb4 <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	@ 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e159      	b.n	8002230 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	f040 8148 	bne.w	800222a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d005      	beq.n	8001fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d130      	bne.n	8002014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 0201 	and.w	r2, r3, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b03      	cmp	r3, #3
 800201e:	d017      	beq.n	8002050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2203      	movs	r2, #3
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d123      	bne.n	80020a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0203 	and.w	r2, r3, #3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a2 	beq.w	800222a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b57      	ldr	r3, [pc, #348]	@ (8002248 <HAL_GPIO_Init+0x2e8>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	4a56      	ldr	r2, [pc, #344]	@ (8002248 <HAL_GPIO_Init+0x2e8>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020f6:	4b54      	ldr	r3, [pc, #336]	@ (8002248 <HAL_GPIO_Init+0x2e8>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002102:	4a52      	ldr	r2, [pc, #328]	@ (800224c <HAL_GPIO_Init+0x2ec>)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a49      	ldr	r2, [pc, #292]	@ (8002250 <HAL_GPIO_Init+0x2f0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_GPIO_Init+0x202>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a48      	ldr	r2, [pc, #288]	@ (8002254 <HAL_GPIO_Init+0x2f4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_GPIO_Init+0x1fe>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a47      	ldr	r2, [pc, #284]	@ (8002258 <HAL_GPIO_Init+0x2f8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00d      	beq.n	800215a <HAL_GPIO_Init+0x1fa>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a46      	ldr	r2, [pc, #280]	@ (800225c <HAL_GPIO_Init+0x2fc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0x1f6>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a45      	ldr	r2, [pc, #276]	@ (8002260 <HAL_GPIO_Init+0x300>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_Init+0x1f2>
 800214e:	2304      	movs	r3, #4
 8002150:	e008      	b.n	8002164 <HAL_GPIO_Init+0x204>
 8002152:	2307      	movs	r3, #7
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x204>
 8002156:	2303      	movs	r3, #3
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x204>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x204>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x204>
 8002162:	2300      	movs	r3, #0
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002174:	4935      	ldr	r1, [pc, #212]	@ (800224c <HAL_GPIO_Init+0x2ec>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002182:	4b38      	ldr	r3, [pc, #224]	@ (8002264 <HAL_GPIO_Init+0x304>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002264 <HAL_GPIO_Init+0x304>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002264 <HAL_GPIO_Init+0x304>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d0:	4a24      	ldr	r2, [pc, #144]	@ (8002264 <HAL_GPIO_Init+0x304>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021d6:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_GPIO_Init+0x304>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <HAL_GPIO_Init+0x304>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002200:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_GPIO_Init+0x304>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002224:	4a0f      	ldr	r2, [pc, #60]	@ (8002264 <HAL_GPIO_Init+0x304>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3301      	adds	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	f67f aea2 	bls.w	8001f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3724      	adds	r7, #36	@ 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	40013800 	.word	0x40013800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400
 8002258:	40020800 	.word	0x40020800
 800225c:	40020c00 	.word	0x40020c00
 8002260:	40021000 	.word	0x40021000
 8002264:	40013c00 	.word	0x40013c00

08002268 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e0bb      	b.n	80023fc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002284:	2201      	movs	r2, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	429a      	cmp	r2, r3
 800229c:	f040 80ab 	bne.w	80023f6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80022a0:	4a5c      	ldr	r2, [pc, #368]	@ (8002414 <HAL_GPIO_DeInit+0x1ac>)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	3302      	adds	r3, #2
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	220f      	movs	r2, #15
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	4013      	ands	r3, r2
 80022c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a54      	ldr	r2, [pc, #336]	@ (8002418 <HAL_GPIO_DeInit+0x1b0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d019      	beq.n	80022fe <HAL_GPIO_DeInit+0x96>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a53      	ldr	r2, [pc, #332]	@ (800241c <HAL_GPIO_DeInit+0x1b4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_DeInit+0x92>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a52      	ldr	r2, [pc, #328]	@ (8002420 <HAL_GPIO_DeInit+0x1b8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <HAL_GPIO_DeInit+0x8e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a51      	ldr	r2, [pc, #324]	@ (8002424 <HAL_GPIO_DeInit+0x1bc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <HAL_GPIO_DeInit+0x8a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a50      	ldr	r2, [pc, #320]	@ (8002428 <HAL_GPIO_DeInit+0x1c0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_GPIO_DeInit+0x86>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e008      	b.n	8002300 <HAL_GPIO_DeInit+0x98>
 80022ee:	2307      	movs	r3, #7
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_DeInit+0x98>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e004      	b.n	8002300 <HAL_GPIO_DeInit+0x98>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_DeInit+0x98>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_GPIO_DeInit+0x98>
 80022fe:	2300      	movs	r3, #0
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	f002 0203 	and.w	r2, r2, #3
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	4093      	lsls	r3, r2
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d132      	bne.n	8002376 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002310:	4b46      	ldr	r3, [pc, #280]	@ (800242c <HAL_GPIO_DeInit+0x1c4>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43db      	mvns	r3, r3
 8002318:	4944      	ldr	r1, [pc, #272]	@ (800242c <HAL_GPIO_DeInit+0x1c4>)
 800231a:	4013      	ands	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800231e:	4b43      	ldr	r3, [pc, #268]	@ (800242c <HAL_GPIO_DeInit+0x1c4>)
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43db      	mvns	r3, r3
 8002326:	4941      	ldr	r1, [pc, #260]	@ (800242c <HAL_GPIO_DeInit+0x1c4>)
 8002328:	4013      	ands	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800232c:	4b3f      	ldr	r3, [pc, #252]	@ (800242c <HAL_GPIO_DeInit+0x1c4>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	43db      	mvns	r3, r3
 8002334:	493d      	ldr	r1, [pc, #244]	@ (800242c <HAL_GPIO_DeInit+0x1c4>)
 8002336:	4013      	ands	r3, r2
 8002338:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800233a:	4b3c      	ldr	r3, [pc, #240]	@ (800242c <HAL_GPIO_DeInit+0x1c4>)
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	43db      	mvns	r3, r3
 8002342:	493a      	ldr	r1, [pc, #232]	@ (800242c <HAL_GPIO_DeInit+0x1c4>)
 8002344:	4013      	ands	r3, r2
 8002346:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002358:	4a2e      	ldr	r2, [pc, #184]	@ (8002414 <HAL_GPIO_DeInit+0x1ac>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	43da      	mvns	r2, r3
 8002368:	482a      	ldr	r0, [pc, #168]	@ (8002414 <HAL_GPIO_DeInit+0x1ac>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	400a      	ands	r2, r1
 8002370:	3302      	adds	r3, #2
 8002372:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2103      	movs	r1, #3
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	401a      	ands	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	08d2      	lsrs	r2, r2, #3
 80023ac:	4019      	ands	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	2103      	movs	r1, #3
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	401a      	ands	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	2101      	movs	r1, #1
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	401a      	ands	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2103      	movs	r1, #3
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	401a      	ands	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	f67f af40 	bls.w	8002284 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40013800 	.word	0x40013800
 8002418:	40020000 	.word	0x40020000
 800241c:	40020400 	.word	0x40020400
 8002420:	40020800 	.word	0x40020800
 8002424:	40020c00 	.word	0x40020c00
 8002428:	40021000 	.word	0x40021000
 800242c:	40013c00 	.word	0x40013c00

08002430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
 800243c:	4613      	mov	r3, r2
 800243e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002440:	787b      	ldrb	r3, [r7, #1]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800244c:	e003      	b.n	8002456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	041a      	lsls	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	619a      	str	r2, [r3, #24]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e12b      	b.n	80026ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fa08 	bl	80018a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	@ 0x24
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024c8:	f001 fc66 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 80024cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4a81      	ldr	r2, [pc, #516]	@ (80026d8 <HAL_I2C_Init+0x274>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d807      	bhi.n	80024e8 <HAL_I2C_Init+0x84>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4a80      	ldr	r2, [pc, #512]	@ (80026dc <HAL_I2C_Init+0x278>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	bf94      	ite	ls
 80024e0:	2301      	movls	r3, #1
 80024e2:	2300      	movhi	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	e006      	b.n	80024f6 <HAL_I2C_Init+0x92>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a7d      	ldr	r2, [pc, #500]	@ (80026e0 <HAL_I2C_Init+0x27c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	bf94      	ite	ls
 80024f0:	2301      	movls	r3, #1
 80024f2:	2300      	movhi	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0e7      	b.n	80026ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a78      	ldr	r2, [pc, #480]	@ (80026e4 <HAL_I2C_Init+0x280>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	0c9b      	lsrs	r3, r3, #18
 8002508:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a6a      	ldr	r2, [pc, #424]	@ (80026d8 <HAL_I2C_Init+0x274>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d802      	bhi.n	8002538 <HAL_I2C_Init+0xd4>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	3301      	adds	r3, #1
 8002536:	e009      	b.n	800254c <HAL_I2C_Init+0xe8>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	4a69      	ldr	r2, [pc, #420]	@ (80026e8 <HAL_I2C_Init+0x284>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	3301      	adds	r3, #1
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	430b      	orrs	r3, r1
 8002552:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800255e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	495c      	ldr	r1, [pc, #368]	@ (80026d8 <HAL_I2C_Init+0x274>)
 8002568:	428b      	cmp	r3, r1
 800256a:	d819      	bhi.n	80025a0 <HAL_I2C_Init+0x13c>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1e59      	subs	r1, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	fbb1 f3f3 	udiv	r3, r1, r3
 800257a:	1c59      	adds	r1, r3, #1
 800257c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002580:	400b      	ands	r3, r1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_I2C_Init+0x138>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1e59      	subs	r1, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fbb1 f3f3 	udiv	r3, r1, r3
 8002594:	3301      	adds	r3, #1
 8002596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259a:	e051      	b.n	8002640 <HAL_I2C_Init+0x1dc>
 800259c:	2304      	movs	r3, #4
 800259e:	e04f      	b.n	8002640 <HAL_I2C_Init+0x1dc>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d111      	bne.n	80025cc <HAL_I2C_Init+0x168>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e58      	subs	r0, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	440b      	add	r3, r1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e012      	b.n	80025f2 <HAL_I2C_Init+0x18e>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e58      	subs	r0, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	0099      	lsls	r1, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Init+0x196>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e022      	b.n	8002640 <HAL_I2C_Init+0x1dc>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10e      	bne.n	8002620 <HAL_I2C_Init+0x1bc>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1e58      	subs	r0, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	440b      	add	r3, r1
 8002610:	fbb0 f3f3 	udiv	r3, r0, r3
 8002614:	3301      	adds	r3, #1
 8002616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800261e:	e00f      	b.n	8002640 <HAL_I2C_Init+0x1dc>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e58      	subs	r0, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	0099      	lsls	r1, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	fbb0 f3f3 	udiv	r3, r0, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	6809      	ldr	r1, [r1, #0]
 8002644:	4313      	orrs	r3, r2
 8002646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69da      	ldr	r2, [r3, #28]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800266e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6911      	ldr	r1, [r2, #16]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68d2      	ldr	r2, [r2, #12]
 800267a:	4311      	orrs	r1, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	430b      	orrs	r3, r1
 8002682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	000186a0 	.word	0x000186a0
 80026dc:	001e847f 	.word	0x001e847f
 80026e0:	003d08ff 	.word	0x003d08ff
 80026e4:	431bde83 	.word	0x431bde83
 80026e8:	10624dd3 	.word	0x10624dd3

080026ec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e021      	b.n	8002742 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2224      	movs	r2, #36	@ 0x24
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff f90a 	bl	8001930 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	461a      	mov	r2, r3
 8002758:	460b      	mov	r3, r1
 800275a:	817b      	strh	r3, [r7, #10]
 800275c:	4613      	mov	r3, r2
 800275e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002760:	f7ff fae8 	bl	8001d34 <HAL_GetTick>
 8002764:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	f040 80e0 	bne.w	8002934 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2319      	movs	r3, #25
 800277a:	2201      	movs	r2, #1
 800277c:	4970      	ldr	r1, [pc, #448]	@ (8002940 <HAL_I2C_Master_Transmit+0x1f4>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fc64 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800278a:	2302      	movs	r3, #2
 800278c:	e0d3      	b.n	8002936 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_I2C_Master_Transmit+0x50>
 8002798:	2302      	movs	r3, #2
 800279a:	e0cc      	b.n	8002936 <HAL_I2C_Master_Transmit+0x1ea>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d007      	beq.n	80027c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2221      	movs	r2, #33	@ 0x21
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2210      	movs	r2, #16
 80027de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	893a      	ldrh	r2, [r7, #8]
 80027f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a50      	ldr	r2, [pc, #320]	@ (8002944 <HAL_I2C_Master_Transmit+0x1f8>)
 8002802:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	6a3a      	ldr	r2, [r7, #32]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 face 	bl	8002dac <I2C_MasterRequestWrite>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e08d      	b.n	8002936 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002830:	e066      	b.n	8002900 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	6a39      	ldr	r1, [r7, #32]
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fd22 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	2b04      	cmp	r3, #4
 8002848:	d107      	bne.n	800285a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002858:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e06b      	b.n	8002936 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b04      	cmp	r3, #4
 800289a:	d11b      	bne.n	80028d4 <HAL_I2C_Master_Transmit+0x188>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d017      	beq.n	80028d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	6a39      	ldr	r1, [r7, #32]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fd19 	bl	8003310 <I2C_WaitOnBTFFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00d      	beq.n	8002900 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d107      	bne.n	80028fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e01a      	b.n	8002936 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002904:	2b00      	cmp	r3, #0
 8002906:	d194      	bne.n	8002832 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002934:	2302      	movs	r3, #2
  }
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	00100002 	.word	0x00100002
 8002944:	ffff0000 	.word	0xffff0000

08002948 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	@ 0x30
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	461a      	mov	r2, r3
 8002954:	460b      	mov	r3, r1
 8002956:	817b      	strh	r3, [r7, #10]
 8002958:	4613      	mov	r3, r2
 800295a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff f9ea 	bl	8001d34 <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b20      	cmp	r3, #32
 800296c:	f040 8217 	bne.w	8002d9e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2319      	movs	r3, #25
 8002976:	2201      	movs	r2, #1
 8002978:	497c      	ldr	r1, [pc, #496]	@ (8002b6c <HAL_I2C_Master_Receive+0x224>)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fb66 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	e20a      	b.n	8002da0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_I2C_Master_Receive+0x50>
 8002994:	2302      	movs	r3, #2
 8002996:	e203      	b.n	8002da0 <HAL_I2C_Master_Receive+0x458>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d007      	beq.n	80029be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2222      	movs	r2, #34	@ 0x22
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2210      	movs	r2, #16
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	893a      	ldrh	r2, [r7, #8]
 80029ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002b70 <HAL_I2C_Master_Receive+0x228>)
 80029fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a00:	8979      	ldrh	r1, [r7, #10]
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fa52 	bl	8002eb0 <I2C_MasterRequestRead>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e1c4      	b.n	8002da0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d113      	bne.n	8002a46 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	623b      	str	r3, [r7, #32]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e198      	b.n	8002d78 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d11b      	bne.n	8002a86 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e178      	b.n	8002d78 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d11b      	bne.n	8002ac6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	e158      	b.n	8002d78 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002aec:	e144      	b.n	8002d78 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	f200 80f1 	bhi.w	8002cda <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d123      	bne.n	8002b48 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fc4b 	bl	80033a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e145      	b.n	8002da0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b46:	e117      	b.n	8002d78 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d14e      	bne.n	8002bee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b56:	2200      	movs	r2, #0
 8002b58:	4906      	ldr	r1, [pc, #24]	@ (8002b74 <HAL_I2C_Master_Receive+0x22c>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fa76 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e11a      	b.n	8002da0 <HAL_I2C_Master_Receive+0x458>
 8002b6a:	bf00      	nop
 8002b6c:	00100002 	.word	0x00100002
 8002b70:	ffff0000 	.word	0xffff0000
 8002b74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bec:	e0c4      	b.n	8002d78 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	496c      	ldr	r1, [pc, #432]	@ (8002da8 <HAL_I2C_Master_Receive+0x460>)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fa27 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0cb      	b.n	8002da0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c50:	2200      	movs	r2, #0
 8002c52:	4955      	ldr	r1, [pc, #340]	@ (8002da8 <HAL_I2C_Master_Receive+0x460>)
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f9f9 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e09d      	b.n	8002da0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cd8:	e04e      	b.n	8002d78 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fb5e 	bl	80033a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e058      	b.n	8002da0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d124      	bne.n	8002d78 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d107      	bne.n	8002d46 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d44:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f47f aeb6 	bne.w	8002aee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e000      	b.n	8002da0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
  }
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3728      	adds	r7, #40	@ 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	00010004 	.word	0x00010004

08002dac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	460b      	mov	r3, r1
 8002dba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d006      	beq.n	8002dd6 <I2C_MasterRequestWrite+0x2a>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d003      	beq.n	8002dd6 <I2C_MasterRequestWrite+0x2a>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dd4:	d108      	bne.n	8002de8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e00b      	b.n	8002e00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	2b12      	cmp	r3, #18
 8002dee:	d107      	bne.n	8002e00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f91d 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00d      	beq.n	8002e34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e26:	d103      	bne.n	8002e30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e035      	b.n	8002ea0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e3c:	d108      	bne.n	8002e50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e3e:	897b      	ldrh	r3, [r7, #10]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e4c:	611a      	str	r2, [r3, #16]
 8002e4e:	e01b      	b.n	8002e88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e50:	897b      	ldrh	r3, [r7, #10]
 8002e52:	11db      	asrs	r3, r3, #7
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f003 0306 	and.w	r3, r3, #6
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f063 030f 	orn	r3, r3, #15
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	490e      	ldr	r1, [pc, #56]	@ (8002ea8 <I2C_MasterRequestWrite+0xfc>)
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f966 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e010      	b.n	8002ea0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4907      	ldr	r1, [pc, #28]	@ (8002eac <I2C_MasterRequestWrite+0x100>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f956 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	00010008 	.word	0x00010008
 8002eac:	00010002 	.word	0x00010002

08002eb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d006      	beq.n	8002eea <I2C_MasterRequestRead+0x3a>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d003      	beq.n	8002eea <I2C_MasterRequestRead+0x3a>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ee8:	d108      	bne.n	8002efc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e00b      	b.n	8002f14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	2b11      	cmp	r3, #17
 8002f02:	d107      	bne.n	8002f14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f893 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00d      	beq.n	8002f48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f3a:	d103      	bne.n	8002f44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e079      	b.n	800303c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f50:	d108      	bne.n	8002f64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f52:	897b      	ldrh	r3, [r7, #10]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	e05f      	b.n	8003024 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f64:	897b      	ldrh	r3, [r7, #10]
 8002f66:	11db      	asrs	r3, r3, #7
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 0306 	and.w	r3, r3, #6
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f063 030f 	orn	r3, r3, #15
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4930      	ldr	r1, [pc, #192]	@ (8003044 <I2C_MasterRequestRead+0x194>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f8dc 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e054      	b.n	800303c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4929      	ldr	r1, [pc, #164]	@ (8003048 <I2C_MasterRequestRead+0x198>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f8cc 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e044      	b.n	800303c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f831 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00d      	beq.n	800300c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ffe:	d103      	bne.n	8003008 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003006:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e017      	b.n	800303c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800300c:	897b      	ldrh	r3, [r7, #10]
 800300e:	11db      	asrs	r3, r3, #7
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 0306 	and.w	r3, r3, #6
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f063 030e 	orn	r3, r3, #14
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4907      	ldr	r1, [pc, #28]	@ (8003048 <I2C_MasterRequestRead+0x198>)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f888 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	00010008 	.word	0x00010008
 8003048:	00010002 	.word	0x00010002

0800304c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800305c:	e048      	b.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003064:	d044      	beq.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fe fe65 	bl	8001d34 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d139      	bne.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10d      	bne.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	43da      	mvns	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	4013      	ands	r3, r2
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	e00c      	b.n	80030bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	43da      	mvns	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d116      	bne.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e023      	b.n	8003138 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	0c1b      	lsrs	r3, r3, #16
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d10d      	bne.n	8003116 <I2C_WaitOnFlagUntilTimeout+0xca>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	43da      	mvns	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	e00c      	b.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	43da      	mvns	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	429a      	cmp	r2, r3
 8003134:	d093      	beq.n	800305e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800314e:	e071      	b.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315e:	d123      	bne.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e067      	b.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031ae:	d041      	beq.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b0:	f7fe fdc0 	bl	8001d34 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d302      	bcc.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d136      	bne.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10c      	bne.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4013      	ands	r3, r2
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e00b      	b.n	8003202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e021      	b.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	0c1b      	lsrs	r3, r3, #16
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10c      	bne.n	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	43da      	mvns	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4013      	ands	r3, r2
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e00b      	b.n	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	43da      	mvns	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4013      	ands	r3, r2
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f af6d 	bne.w	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800328c:	e034      	b.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f8e3 	bl	800345a <I2C_IsAcknowledgeFailed>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e034      	b.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032a4:	d028      	beq.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fe fd45 	bl	8001d34 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11d      	bne.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c6:	2b80      	cmp	r3, #128	@ 0x80
 80032c8:	d016      	beq.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e007      	b.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003302:	2b80      	cmp	r3, #128	@ 0x80
 8003304:	d1c3      	bne.n	800328e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800331c:	e034      	b.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f89b 	bl	800345a <I2C_IsAcknowledgeFailed>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e034      	b.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003334:	d028      	beq.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7fe fcfd 	bl	8001d34 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d11d      	bne.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b04      	cmp	r3, #4
 8003358:	d016      	beq.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e007      	b.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d1c3      	bne.n	800331e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033ac:	e049      	b.n	8003442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d119      	bne.n	80033f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0210 	mvn.w	r2, #16
 80033c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e030      	b.n	8003452 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f0:	f7fe fca0 	bl	8001d34 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d302      	bcc.n	8003406 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11d      	bne.n	8003442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003410:	2b40      	cmp	r3, #64	@ 0x40
 8003412:	d016      	beq.n	8003442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e007      	b.n	8003452 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344c:	2b40      	cmp	r3, #64	@ 0x40
 800344e:	d1ae      	bne.n	80033ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003470:	d11b      	bne.n	80034aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800347a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	f043 0204 	orr.w	r2, r3, #4
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e267      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d075      	beq.n	80035c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034d6:	4b88      	ldr	r3, [pc, #544]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d00c      	beq.n	80034fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e2:	4b85      	ldr	r3, [pc, #532]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d112      	bne.n	8003514 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ee:	4b82      	ldr	r3, [pc, #520]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034fa:	d10b      	bne.n	8003514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	4b7e      	ldr	r3, [pc, #504]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d05b      	beq.n	80035c0 <HAL_RCC_OscConfig+0x108>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d157      	bne.n	80035c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e242      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800351c:	d106      	bne.n	800352c <HAL_RCC_OscConfig+0x74>
 800351e:	4b76      	ldr	r3, [pc, #472]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a75      	ldr	r2, [pc, #468]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e01d      	b.n	8003568 <HAL_RCC_OscConfig+0xb0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x98>
 8003536:	4b70      	ldr	r3, [pc, #448]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a6f      	ldr	r2, [pc, #444]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800353c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b6d      	ldr	r3, [pc, #436]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6c      	ldr	r2, [pc, #432]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0xb0>
 8003550:	4b69      	ldr	r3, [pc, #420]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a68      	ldr	r2, [pc, #416]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b66      	ldr	r3, [pc, #408]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a65      	ldr	r2, [pc, #404]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe fbe0 	bl	8001d34 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fe fbdc 	bl	8001d34 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	@ 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e207      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b5b      	ldr	r3, [pc, #364]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0xc0>
 8003596:	e014      	b.n	80035c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe fbcc 	bl	8001d34 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe fbc8 	bl	8001d34 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e1f3      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	4b51      	ldr	r3, [pc, #324]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0xe8>
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d063      	beq.n	8003696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035ce:	4b4a      	ldr	r3, [pc, #296]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035da:	4b47      	ldr	r3, [pc, #284]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d11c      	bne.n	8003620 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e6:	4b44      	ldr	r3, [pc, #272]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d116      	bne.n	8003620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f2:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_RCC_OscConfig+0x152>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d001      	beq.n	800360a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e1c7      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360a:	4b3b      	ldr	r3, [pc, #236]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4937      	ldr	r1, [pc, #220]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	e03a      	b.n	8003696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003628:	4b34      	ldr	r3, [pc, #208]	@ (80036fc <HAL_RCC_OscConfig+0x244>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362e:	f7fe fb81 	bl	8001d34 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003636:	f7fe fb7d 	bl	8001d34 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e1a8      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	4b2b      	ldr	r3, [pc, #172]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b28      	ldr	r3, [pc, #160]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4925      	ldr	r1, [pc, #148]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]
 8003668:	e015      	b.n	8003696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366a:	4b24      	ldr	r3, [pc, #144]	@ (80036fc <HAL_RCC_OscConfig+0x244>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe fb60 	bl	8001d34 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003678:	f7fe fb5c 	bl	8001d34 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e187      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d036      	beq.n	8003710 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036aa:	4b15      	ldr	r3, [pc, #84]	@ (8003700 <HAL_RCC_OscConfig+0x248>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fe fb40 	bl	8001d34 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b8:	f7fe fb3c 	bl	8001d34 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e167      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80036cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x200>
 80036d6:	e01b      	b.n	8003710 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d8:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_OscConfig+0x248>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036de:	f7fe fb29 	bl	8001d34 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	e00e      	b.n	8003704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e6:	f7fe fb25 	bl	8001d34 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d907      	bls.n	8003704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e150      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
 80036f8:	40023800 	.word	0x40023800
 80036fc:	42470000 	.word	0x42470000
 8003700:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	4b88      	ldr	r3, [pc, #544]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ea      	bne.n	80036e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8097 	beq.w	800384c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003722:	4b81      	ldr	r3, [pc, #516]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	4b7d      	ldr	r3, [pc, #500]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	4a7c      	ldr	r2, [pc, #496]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373c:	6413      	str	r3, [r2, #64]	@ 0x40
 800373e:	4b7a      	ldr	r3, [pc, #488]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374a:	2301      	movs	r3, #1
 800374c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	4b77      	ldr	r3, [pc, #476]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d118      	bne.n	800378c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375a:	4b74      	ldr	r3, [pc, #464]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a73      	ldr	r2, [pc, #460]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003766:	f7fe fae5 	bl	8001d34 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376e:	f7fe fae1 	bl	8001d34 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e10c      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	4b6a      	ldr	r3, [pc, #424]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0f0      	beq.n	800376e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x2ea>
 8003794:	4b64      	ldr	r3, [pc, #400]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	4a63      	ldr	r2, [pc, #396]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a0:	e01c      	b.n	80037dc <HAL_RCC_OscConfig+0x324>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b05      	cmp	r3, #5
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x30c>
 80037aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0x324>
 80037c4:	4b58      	ldr	r3, [pc, #352]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c8:	4a57      	ldr	r2, [pc, #348]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d0:	4b55      	ldr	r3, [pc, #340]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d4:	4a54      	ldr	r2, [pc, #336]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037d6:	f023 0304 	bic.w	r3, r3, #4
 80037da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d015      	beq.n	8003810 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fe faa6 	bl	8001d34 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ec:	f7fe faa2 	bl	8001d34 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e0cb      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003802:	4b49      	ldr	r3, [pc, #292]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0ee      	beq.n	80037ec <HAL_RCC_OscConfig+0x334>
 800380e:	e014      	b.n	800383a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003810:	f7fe fa90 	bl	8001d34 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fe fa8c 	bl	8001d34 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e0b5      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382e:	4b3e      	ldr	r3, [pc, #248]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ee      	bne.n	8003818 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d105      	bne.n	800384c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003840:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	4a38      	ldr	r2, [pc, #224]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800384a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a1 	beq.w	8003998 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003856:	4b34      	ldr	r3, [pc, #208]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b08      	cmp	r3, #8
 8003860:	d05c      	beq.n	800391c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d141      	bne.n	80038ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <HAL_RCC_OscConfig+0x478>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe fa60 	bl	8001d34 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fe fa5c 	bl	8001d34 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e087      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	4b27      	ldr	r3, [pc, #156]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	019b      	lsls	r3, r3, #6
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	3b01      	subs	r3, #1
 80038b0:	041b      	lsls	r3, r3, #16
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	491b      	ldr	r1, [pc, #108]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003930 <HAL_RCC_OscConfig+0x478>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c6:	f7fe fa35 	bl	8001d34 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe fa31 	bl	8001d34 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e05c      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e0:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x416>
 80038ec:	e054      	b.n	8003998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ee:	4b10      	ldr	r3, [pc, #64]	@ (8003930 <HAL_RCC_OscConfig+0x478>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe fa1e 	bl	8001d34 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fe fa1a 	bl	8001d34 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e045      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x444>
 800391a:	e03d      	b.n	8003998 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d107      	bne.n	8003934 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e038      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
 8003928:	40023800 	.word	0x40023800
 800392c:	40007000 	.word	0x40007000
 8003930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003934:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x4ec>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d028      	beq.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d121      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d11a      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003964:	4013      	ands	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800396a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800396c:	4293      	cmp	r3, r2
 800396e:	d111      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	3b01      	subs	r3, #1
 800397e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800

080039a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0cc      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b68      	ldr	r3, [pc, #416]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d90c      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b65      	ldr	r3, [pc, #404]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b63      	ldr	r3, [pc, #396]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0b8      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d020      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039fc:	4b59      	ldr	r3, [pc, #356]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a58      	ldr	r2, [pc, #352]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a14:	4b53      	ldr	r3, [pc, #332]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a52      	ldr	r2, [pc, #328]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a20:	4b50      	ldr	r3, [pc, #320]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	494d      	ldr	r1, [pc, #308]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d044      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b47      	ldr	r3, [pc, #284]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d119      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e07f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a66:	4b3f      	ldr	r3, [pc, #252]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e06f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a76:	4b3b      	ldr	r3, [pc, #236]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e067      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a86:	4b37      	ldr	r3, [pc, #220]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f023 0203 	bic.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4934      	ldr	r1, [pc, #208]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a98:	f7fe f94c 	bl	8001d34 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa0:	f7fe f948 	bl	8001d34 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e04f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 020c 	and.w	r2, r3, #12
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d1eb      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d20c      	bcs.n	8003af0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e032      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003afc:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4916      	ldr	r1, [pc, #88]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b1a:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	490e      	ldr	r1, [pc, #56]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b2e:	f000 f821 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8003b32:	4602      	mov	r2, r0
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	490a      	ldr	r1, [pc, #40]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003b40:	5ccb      	ldrb	r3, [r1, r3]
 8003b42:	fa22 f303 	lsr.w	r3, r2, r3
 8003b46:	4a09      	ldr	r2, [pc, #36]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b4a:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe f8ac 	bl	8001cac <HAL_InitTick>

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023c00 	.word	0x40023c00
 8003b64:	40023800 	.word	0x40023800
 8003b68:	080070fc 	.word	0x080070fc
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	20000004 	.word	0x20000004

08003b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b78:	b094      	sub	sp, #80	@ 0x50
 8003b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b8c:	4b79      	ldr	r3, [pc, #484]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d00d      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	f200 80e1 	bhi.w	8003d60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d003      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x3a>
 8003ba6:	e0db      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b73      	ldr	r3, [pc, #460]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003baa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bac:	e0db      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bae:	4b73      	ldr	r3, [pc, #460]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x208>)
 8003bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bb2:	e0d8      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d063      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bca:	4b6a      	ldr	r3, [pc, #424]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bde:	2300      	movs	r3, #0
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003be2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003be6:	4622      	mov	r2, r4
 8003be8:	462b      	mov	r3, r5
 8003bea:	f04f 0000 	mov.w	r0, #0
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	0159      	lsls	r1, r3, #5
 8003bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf8:	0150      	lsls	r0, r2, #5
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4621      	mov	r1, r4
 8003c00:	1a51      	subs	r1, r2, r1
 8003c02:	6139      	str	r1, [r7, #16]
 8003c04:	4629      	mov	r1, r5
 8003c06:	eb63 0301 	sbc.w	r3, r3, r1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c18:	4659      	mov	r1, fp
 8003c1a:	018b      	lsls	r3, r1, #6
 8003c1c:	4651      	mov	r1, sl
 8003c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c22:	4651      	mov	r1, sl
 8003c24:	018a      	lsls	r2, r1, #6
 8003c26:	4651      	mov	r1, sl
 8003c28:	ebb2 0801 	subs.w	r8, r2, r1
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c46:	4690      	mov	r8, r2
 8003c48:	4699      	mov	r9, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	eb18 0303 	adds.w	r3, r8, r3
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	462b      	mov	r3, r5
 8003c54:	eb49 0303 	adc.w	r3, r9, r3
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c66:	4629      	mov	r1, r5
 8003c68:	024b      	lsls	r3, r1, #9
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c70:	4621      	mov	r1, r4
 8003c72:	024a      	lsls	r2, r1, #9
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c84:	f7fc ffe8 	bl	8000c58 <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c90:	e058      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b38      	ldr	r3, [pc, #224]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	f04f 0000 	mov.w	r0, #0
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	0159      	lsls	r1, r3, #5
 8003cba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cbe:	0150      	lsls	r0, r2, #5
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cca:	4649      	mov	r1, r9
 8003ccc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ce0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ce4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ce8:	eb63 050b 	sbc.w	r5, r3, fp
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	00eb      	lsls	r3, r5, #3
 8003cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cfa:	00e2      	lsls	r2, r4, #3
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	461d      	mov	r5, r3
 8003d00:	4643      	mov	r3, r8
 8003d02:	18e3      	adds	r3, r4, r3
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	464b      	mov	r3, r9
 8003d08:	eb45 0303 	adc.w	r3, r5, r3
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	028b      	lsls	r3, r1, #10
 8003d1e:	4621      	mov	r1, r4
 8003d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d24:	4621      	mov	r1, r4
 8003d26:	028a      	lsls	r2, r1, #10
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d2e:	2200      	movs	r2, #0
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	61fa      	str	r2, [r7, #28]
 8003d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d38:	f7fc ff8e 	bl	8000c58 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4613      	mov	r3, r2
 8003d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d5e:	e002      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3750      	adds	r7, #80	@ 0x50
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	00f42400 	.word	0x00f42400
 8003d7c:	007a1200 	.word	0x007a1200

08003d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d84:	4b03      	ldr	r3, [pc, #12]	@ (8003d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000000 	.word	0x20000000

08003d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d9c:	f7ff fff0 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	0a9b      	lsrs	r3, r3, #10
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	4903      	ldr	r1, [pc, #12]	@ (8003dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	0800710c 	.word	0x0800710c

08003dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dc4:	f7ff ffdc 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0b5b      	lsrs	r3, r3, #13
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4903      	ldr	r1, [pc, #12]	@ (8003de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40023800 	.word	0x40023800
 8003de4:	0800710c 	.word	0x0800710c

08003de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e042      	b.n	8003e80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd fdb0 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2224      	movs	r2, #36	@ 0x24
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f82b 	bl	8003e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e8c:	b0c0      	sub	sp, #256	@ 0x100
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	68d9      	ldr	r1, [r3, #12]
 8003ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	ea40 0301 	orr.w	r3, r0, r1
 8003eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ee0:	f021 010c 	bic.w	r1, r1, #12
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f02:	6999      	ldr	r1, [r3, #24]
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	ea40 0301 	orr.w	r3, r0, r1
 8003f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b8f      	ldr	r3, [pc, #572]	@ (8004154 <UART_SetConfig+0x2cc>)
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d005      	beq.n	8003f28 <UART_SetConfig+0xa0>
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b8d      	ldr	r3, [pc, #564]	@ (8004158 <UART_SetConfig+0x2d0>)
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d104      	bne.n	8003f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f28:	f7ff ff4a 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8003f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f30:	e003      	b.n	8003f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f32:	f7ff ff31 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8003f36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f44:	f040 810c 	bne.w	8004160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	462b      	mov	r3, r5
 8003f5e:	1891      	adds	r1, r2, r2
 8003f60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f62:	415b      	adcs	r3, r3
 8003f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	eb12 0801 	adds.w	r8, r2, r1
 8003f70:	4629      	mov	r1, r5
 8003f72:	eb43 0901 	adc.w	r9, r3, r1
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f8a:	4690      	mov	r8, r2
 8003f8c:	4699      	mov	r9, r3
 8003f8e:	4623      	mov	r3, r4
 8003f90:	eb18 0303 	adds.w	r3, r8, r3
 8003f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f98:	462b      	mov	r3, r5
 8003f9a:	eb49 0303 	adc.w	r3, r9, r3
 8003f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	18db      	adds	r3, r3, r3
 8003fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	eb42 0303 	adc.w	r3, r2, r3
 8003fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fcc:	f7fc fe44 	bl	8000c58 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4b61      	ldr	r3, [pc, #388]	@ (800415c <UART_SetConfig+0x2d4>)
 8003fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	011c      	lsls	r4, r3, #4
 8003fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	1891      	adds	r1, r2, r2
 8003ff6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ff8:	415b      	adcs	r3, r3
 8003ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004000:	4641      	mov	r1, r8
 8004002:	eb12 0a01 	adds.w	sl, r2, r1
 8004006:	4649      	mov	r1, r9
 8004008:	eb43 0b01 	adc.w	fp, r3, r1
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800401c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004020:	4692      	mov	sl, r2
 8004022:	469b      	mov	fp, r3
 8004024:	4643      	mov	r3, r8
 8004026:	eb1a 0303 	adds.w	r3, sl, r3
 800402a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800402e:	464b      	mov	r3, r9
 8004030:	eb4b 0303 	adc.w	r3, fp, r3
 8004034:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004044:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800404c:	460b      	mov	r3, r1
 800404e:	18db      	adds	r3, r3, r3
 8004050:	643b      	str	r3, [r7, #64]	@ 0x40
 8004052:	4613      	mov	r3, r2
 8004054:	eb42 0303 	adc.w	r3, r2, r3
 8004058:	647b      	str	r3, [r7, #68]	@ 0x44
 800405a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800405e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004062:	f7fc fdf9 	bl	8000c58 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4611      	mov	r1, r2
 800406c:	4b3b      	ldr	r3, [pc, #236]	@ (800415c <UART_SetConfig+0x2d4>)
 800406e:	fba3 2301 	umull	r2, r3, r3, r1
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2264      	movs	r2, #100	@ 0x64
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	1acb      	subs	r3, r1, r3
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004082:	4b36      	ldr	r3, [pc, #216]	@ (800415c <UART_SetConfig+0x2d4>)
 8004084:	fba3 2302 	umull	r2, r3, r3, r2
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004090:	441c      	add	r4, r3
 8004092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004096:	2200      	movs	r2, #0
 8004098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800409c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040a4:	4642      	mov	r2, r8
 80040a6:	464b      	mov	r3, r9
 80040a8:	1891      	adds	r1, r2, r2
 80040aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040ac:	415b      	adcs	r3, r3
 80040ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040b4:	4641      	mov	r1, r8
 80040b6:	1851      	adds	r1, r2, r1
 80040b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80040ba:	4649      	mov	r1, r9
 80040bc:	414b      	adcs	r3, r1
 80040be:	637b      	str	r3, [r7, #52]	@ 0x34
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040cc:	4659      	mov	r1, fp
 80040ce:	00cb      	lsls	r3, r1, #3
 80040d0:	4651      	mov	r1, sl
 80040d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040d6:	4651      	mov	r1, sl
 80040d8:	00ca      	lsls	r2, r1, #3
 80040da:	4610      	mov	r0, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	4603      	mov	r3, r0
 80040e0:	4642      	mov	r2, r8
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040e8:	464b      	mov	r3, r9
 80040ea:	460a      	mov	r2, r1
 80040ec:	eb42 0303 	adc.w	r3, r2, r3
 80040f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004100:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004108:	460b      	mov	r3, r1
 800410a:	18db      	adds	r3, r3, r3
 800410c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800410e:	4613      	mov	r3, r2
 8004110:	eb42 0303 	adc.w	r3, r2, r3
 8004114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800411a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800411e:	f7fc fd9b 	bl	8000c58 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <UART_SetConfig+0x2d4>)
 8004128:	fba3 1302 	umull	r1, r3, r3, r2
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	2164      	movs	r1, #100	@ 0x64
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	3332      	adds	r3, #50	@ 0x32
 800413a:	4a08      	ldr	r2, [pc, #32]	@ (800415c <UART_SetConfig+0x2d4>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	f003 0207 	and.w	r2, r3, #7
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4422      	add	r2, r4
 800414e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004150:	e106      	b.n	8004360 <UART_SetConfig+0x4d8>
 8004152:	bf00      	nop
 8004154:	40011000 	.word	0x40011000
 8004158:	40011400 	.word	0x40011400
 800415c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800416a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800416e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004172:	4642      	mov	r2, r8
 8004174:	464b      	mov	r3, r9
 8004176:	1891      	adds	r1, r2, r2
 8004178:	6239      	str	r1, [r7, #32]
 800417a:	415b      	adcs	r3, r3
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24
 800417e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004182:	4641      	mov	r1, r8
 8004184:	1854      	adds	r4, r2, r1
 8004186:	4649      	mov	r1, r9
 8004188:	eb43 0501 	adc.w	r5, r3, r1
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	00eb      	lsls	r3, r5, #3
 8004196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800419a:	00e2      	lsls	r2, r4, #3
 800419c:	4614      	mov	r4, r2
 800419e:	461d      	mov	r5, r3
 80041a0:	4643      	mov	r3, r8
 80041a2:	18e3      	adds	r3, r4, r3
 80041a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041a8:	464b      	mov	r3, r9
 80041aa:	eb45 0303 	adc.w	r3, r5, r3
 80041ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041ce:	4629      	mov	r1, r5
 80041d0:	008b      	lsls	r3, r1, #2
 80041d2:	4621      	mov	r1, r4
 80041d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d8:	4621      	mov	r1, r4
 80041da:	008a      	lsls	r2, r1, #2
 80041dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041e0:	f7fc fd3a 	bl	8000c58 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4b60      	ldr	r3, [pc, #384]	@ (800436c <UART_SetConfig+0x4e4>)
 80041ea:	fba3 2302 	umull	r2, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	011c      	lsls	r4, r3, #4
 80041f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	1891      	adds	r1, r2, r2
 800420a:	61b9      	str	r1, [r7, #24]
 800420c:	415b      	adcs	r3, r3
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004214:	4641      	mov	r1, r8
 8004216:	1851      	adds	r1, r2, r1
 8004218:	6139      	str	r1, [r7, #16]
 800421a:	4649      	mov	r1, r9
 800421c:	414b      	adcs	r3, r1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800422c:	4659      	mov	r1, fp
 800422e:	00cb      	lsls	r3, r1, #3
 8004230:	4651      	mov	r1, sl
 8004232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004236:	4651      	mov	r1, sl
 8004238:	00ca      	lsls	r2, r1, #3
 800423a:	4610      	mov	r0, r2
 800423c:	4619      	mov	r1, r3
 800423e:	4603      	mov	r3, r0
 8004240:	4642      	mov	r2, r8
 8004242:	189b      	adds	r3, r3, r2
 8004244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004248:	464b      	mov	r3, r9
 800424a:	460a      	mov	r2, r1
 800424c:	eb42 0303 	adc.w	r3, r2, r3
 8004250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800425e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800426c:	4649      	mov	r1, r9
 800426e:	008b      	lsls	r3, r1, #2
 8004270:	4641      	mov	r1, r8
 8004272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004276:	4641      	mov	r1, r8
 8004278:	008a      	lsls	r2, r1, #2
 800427a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800427e:	f7fc fceb 	bl	8000c58 <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4611      	mov	r1, r2
 8004288:	4b38      	ldr	r3, [pc, #224]	@ (800436c <UART_SetConfig+0x4e4>)
 800428a:	fba3 2301 	umull	r2, r3, r3, r1
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2264      	movs	r2, #100	@ 0x64
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	1acb      	subs	r3, r1, r3
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	3332      	adds	r3, #50	@ 0x32
 800429c:	4a33      	ldr	r2, [pc, #204]	@ (800436c <UART_SetConfig+0x4e4>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042a8:	441c      	add	r4, r3
 80042aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ae:	2200      	movs	r2, #0
 80042b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80042b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80042b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	415b      	adcs	r3, r3
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c8:	4641      	mov	r1, r8
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	6039      	str	r1, [r7, #0]
 80042ce:	4649      	mov	r1, r9
 80042d0:	414b      	adcs	r3, r1
 80042d2:	607b      	str	r3, [r7, #4]
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042e0:	4659      	mov	r1, fp
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4651      	mov	r1, sl
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4642      	mov	r2, r8
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042fa:	464b      	mov	r3, r9
 80042fc:	460a      	mov	r2, r1
 80042fe:	eb42 0303 	adc.w	r3, r2, r3
 8004302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	663b      	str	r3, [r7, #96]	@ 0x60
 800430e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800431c:	4649      	mov	r1, r9
 800431e:	008b      	lsls	r3, r1, #2
 8004320:	4641      	mov	r1, r8
 8004322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004326:	4641      	mov	r1, r8
 8004328:	008a      	lsls	r2, r1, #2
 800432a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800432e:	f7fc fc93 	bl	8000c58 <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4b0d      	ldr	r3, [pc, #52]	@ (800436c <UART_SetConfig+0x4e4>)
 8004338:	fba3 1302 	umull	r1, r3, r3, r2
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	2164      	movs	r1, #100	@ 0x64
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	3332      	adds	r3, #50	@ 0x32
 800434a:	4a08      	ldr	r2, [pc, #32]	@ (800436c <UART_SetConfig+0x4e4>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4422      	add	r2, r4
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004366:	46bd      	mov	sp, r7
 8004368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436c:	51eb851f 	.word	0x51eb851f

08004370 <__cvt>:
 8004370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004374:	ec57 6b10 	vmov	r6, r7, d0
 8004378:	2f00      	cmp	r7, #0
 800437a:	460c      	mov	r4, r1
 800437c:	4619      	mov	r1, r3
 800437e:	463b      	mov	r3, r7
 8004380:	bfbb      	ittet	lt
 8004382:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004386:	461f      	movlt	r7, r3
 8004388:	2300      	movge	r3, #0
 800438a:	232d      	movlt	r3, #45	@ 0x2d
 800438c:	700b      	strb	r3, [r1, #0]
 800438e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004390:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004394:	4691      	mov	r9, r2
 8004396:	f023 0820 	bic.w	r8, r3, #32
 800439a:	bfbc      	itt	lt
 800439c:	4632      	movlt	r2, r6
 800439e:	4616      	movlt	r6, r2
 80043a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80043a4:	d005      	beq.n	80043b2 <__cvt+0x42>
 80043a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80043aa:	d100      	bne.n	80043ae <__cvt+0x3e>
 80043ac:	3401      	adds	r4, #1
 80043ae:	2102      	movs	r1, #2
 80043b0:	e000      	b.n	80043b4 <__cvt+0x44>
 80043b2:	2103      	movs	r1, #3
 80043b4:	ab03      	add	r3, sp, #12
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	ab02      	add	r3, sp, #8
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	ec47 6b10 	vmov	d0, r6, r7
 80043c0:	4653      	mov	r3, sl
 80043c2:	4622      	mov	r2, r4
 80043c4:	f000 fe70 	bl	80050a8 <_dtoa_r>
 80043c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80043cc:	4605      	mov	r5, r0
 80043ce:	d119      	bne.n	8004404 <__cvt+0x94>
 80043d0:	f019 0f01 	tst.w	r9, #1
 80043d4:	d00e      	beq.n	80043f4 <__cvt+0x84>
 80043d6:	eb00 0904 	add.w	r9, r0, r4
 80043da:	2200      	movs	r2, #0
 80043dc:	2300      	movs	r3, #0
 80043de:	4630      	mov	r0, r6
 80043e0:	4639      	mov	r1, r7
 80043e2:	f7fc fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 80043e6:	b108      	cbz	r0, 80043ec <__cvt+0x7c>
 80043e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80043ec:	2230      	movs	r2, #48	@ 0x30
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	454b      	cmp	r3, r9
 80043f2:	d31e      	bcc.n	8004432 <__cvt+0xc2>
 80043f4:	9b03      	ldr	r3, [sp, #12]
 80043f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80043f8:	1b5b      	subs	r3, r3, r5
 80043fa:	4628      	mov	r0, r5
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	b004      	add	sp, #16
 8004400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004404:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004408:	eb00 0904 	add.w	r9, r0, r4
 800440c:	d1e5      	bne.n	80043da <__cvt+0x6a>
 800440e:	7803      	ldrb	r3, [r0, #0]
 8004410:	2b30      	cmp	r3, #48	@ 0x30
 8004412:	d10a      	bne.n	800442a <__cvt+0xba>
 8004414:	2200      	movs	r2, #0
 8004416:	2300      	movs	r3, #0
 8004418:	4630      	mov	r0, r6
 800441a:	4639      	mov	r1, r7
 800441c:	f7fc fb5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004420:	b918      	cbnz	r0, 800442a <__cvt+0xba>
 8004422:	f1c4 0401 	rsb	r4, r4, #1
 8004426:	f8ca 4000 	str.w	r4, [sl]
 800442a:	f8da 3000 	ldr.w	r3, [sl]
 800442e:	4499      	add	r9, r3
 8004430:	e7d3      	b.n	80043da <__cvt+0x6a>
 8004432:	1c59      	adds	r1, r3, #1
 8004434:	9103      	str	r1, [sp, #12]
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	e7d9      	b.n	80043ee <__cvt+0x7e>

0800443a <__exponent>:
 800443a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800443c:	2900      	cmp	r1, #0
 800443e:	bfba      	itte	lt
 8004440:	4249      	neglt	r1, r1
 8004442:	232d      	movlt	r3, #45	@ 0x2d
 8004444:	232b      	movge	r3, #43	@ 0x2b
 8004446:	2909      	cmp	r1, #9
 8004448:	7002      	strb	r2, [r0, #0]
 800444a:	7043      	strb	r3, [r0, #1]
 800444c:	dd29      	ble.n	80044a2 <__exponent+0x68>
 800444e:	f10d 0307 	add.w	r3, sp, #7
 8004452:	461d      	mov	r5, r3
 8004454:	270a      	movs	r7, #10
 8004456:	461a      	mov	r2, r3
 8004458:	fbb1 f6f7 	udiv	r6, r1, r7
 800445c:	fb07 1416 	mls	r4, r7, r6, r1
 8004460:	3430      	adds	r4, #48	@ 0x30
 8004462:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004466:	460c      	mov	r4, r1
 8004468:	2c63      	cmp	r4, #99	@ 0x63
 800446a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800446e:	4631      	mov	r1, r6
 8004470:	dcf1      	bgt.n	8004456 <__exponent+0x1c>
 8004472:	3130      	adds	r1, #48	@ 0x30
 8004474:	1e94      	subs	r4, r2, #2
 8004476:	f803 1c01 	strb.w	r1, [r3, #-1]
 800447a:	1c41      	adds	r1, r0, #1
 800447c:	4623      	mov	r3, r4
 800447e:	42ab      	cmp	r3, r5
 8004480:	d30a      	bcc.n	8004498 <__exponent+0x5e>
 8004482:	f10d 0309 	add.w	r3, sp, #9
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	42ac      	cmp	r4, r5
 800448a:	bf88      	it	hi
 800448c:	2300      	movhi	r3, #0
 800448e:	3302      	adds	r3, #2
 8004490:	4403      	add	r3, r0
 8004492:	1a18      	subs	r0, r3, r0
 8004494:	b003      	add	sp, #12
 8004496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004498:	f813 6b01 	ldrb.w	r6, [r3], #1
 800449c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80044a0:	e7ed      	b.n	800447e <__exponent+0x44>
 80044a2:	2330      	movs	r3, #48	@ 0x30
 80044a4:	3130      	adds	r1, #48	@ 0x30
 80044a6:	7083      	strb	r3, [r0, #2]
 80044a8:	70c1      	strb	r1, [r0, #3]
 80044aa:	1d03      	adds	r3, r0, #4
 80044ac:	e7f1      	b.n	8004492 <__exponent+0x58>
	...

080044b0 <_printf_float>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	b08d      	sub	sp, #52	@ 0x34
 80044b6:	460c      	mov	r4, r1
 80044b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80044bc:	4616      	mov	r6, r2
 80044be:	461f      	mov	r7, r3
 80044c0:	4605      	mov	r5, r0
 80044c2:	f000 fcef 	bl	8004ea4 <_localeconv_r>
 80044c6:	6803      	ldr	r3, [r0, #0]
 80044c8:	9304      	str	r3, [sp, #16]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fb fed8 	bl	8000280 <strlen>
 80044d0:	2300      	movs	r3, #0
 80044d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80044d4:	f8d8 3000 	ldr.w	r3, [r8]
 80044d8:	9005      	str	r0, [sp, #20]
 80044da:	3307      	adds	r3, #7
 80044dc:	f023 0307 	bic.w	r3, r3, #7
 80044e0:	f103 0208 	add.w	r2, r3, #8
 80044e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80044e8:	f8d4 b000 	ldr.w	fp, [r4]
 80044ec:	f8c8 2000 	str.w	r2, [r8]
 80044f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80044f8:	9307      	str	r3, [sp, #28]
 80044fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80044fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004502:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004506:	4b9c      	ldr	r3, [pc, #624]	@ (8004778 <_printf_float+0x2c8>)
 8004508:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800450c:	f7fc fb16 	bl	8000b3c <__aeabi_dcmpun>
 8004510:	bb70      	cbnz	r0, 8004570 <_printf_float+0xc0>
 8004512:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004516:	4b98      	ldr	r3, [pc, #608]	@ (8004778 <_printf_float+0x2c8>)
 8004518:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800451c:	f7fc faf0 	bl	8000b00 <__aeabi_dcmple>
 8004520:	bb30      	cbnz	r0, 8004570 <_printf_float+0xc0>
 8004522:	2200      	movs	r2, #0
 8004524:	2300      	movs	r3, #0
 8004526:	4640      	mov	r0, r8
 8004528:	4649      	mov	r1, r9
 800452a:	f7fc fadf 	bl	8000aec <__aeabi_dcmplt>
 800452e:	b110      	cbz	r0, 8004536 <_printf_float+0x86>
 8004530:	232d      	movs	r3, #45	@ 0x2d
 8004532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004536:	4a91      	ldr	r2, [pc, #580]	@ (800477c <_printf_float+0x2cc>)
 8004538:	4b91      	ldr	r3, [pc, #580]	@ (8004780 <_printf_float+0x2d0>)
 800453a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800453e:	bf8c      	ite	hi
 8004540:	4690      	movhi	r8, r2
 8004542:	4698      	movls	r8, r3
 8004544:	2303      	movs	r3, #3
 8004546:	6123      	str	r3, [r4, #16]
 8004548:	f02b 0304 	bic.w	r3, fp, #4
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	f04f 0900 	mov.w	r9, #0
 8004552:	9700      	str	r7, [sp, #0]
 8004554:	4633      	mov	r3, r6
 8004556:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004558:	4621      	mov	r1, r4
 800455a:	4628      	mov	r0, r5
 800455c:	f000 f9d2 	bl	8004904 <_printf_common>
 8004560:	3001      	adds	r0, #1
 8004562:	f040 808d 	bne.w	8004680 <_printf_float+0x1d0>
 8004566:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800456a:	b00d      	add	sp, #52	@ 0x34
 800456c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	4640      	mov	r0, r8
 8004576:	4649      	mov	r1, r9
 8004578:	f7fc fae0 	bl	8000b3c <__aeabi_dcmpun>
 800457c:	b140      	cbz	r0, 8004590 <_printf_float+0xe0>
 800457e:	464b      	mov	r3, r9
 8004580:	2b00      	cmp	r3, #0
 8004582:	bfbc      	itt	lt
 8004584:	232d      	movlt	r3, #45	@ 0x2d
 8004586:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800458a:	4a7e      	ldr	r2, [pc, #504]	@ (8004784 <_printf_float+0x2d4>)
 800458c:	4b7e      	ldr	r3, [pc, #504]	@ (8004788 <_printf_float+0x2d8>)
 800458e:	e7d4      	b.n	800453a <_printf_float+0x8a>
 8004590:	6863      	ldr	r3, [r4, #4]
 8004592:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004596:	9206      	str	r2, [sp, #24]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	d13b      	bne.n	8004614 <_printf_float+0x164>
 800459c:	2306      	movs	r3, #6
 800459e:	6063      	str	r3, [r4, #4]
 80045a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80045a4:	2300      	movs	r3, #0
 80045a6:	6022      	str	r2, [r4, #0]
 80045a8:	9303      	str	r3, [sp, #12]
 80045aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80045ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80045b0:	ab09      	add	r3, sp, #36	@ 0x24
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	6861      	ldr	r1, [r4, #4]
 80045b6:	ec49 8b10 	vmov	d0, r8, r9
 80045ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80045be:	4628      	mov	r0, r5
 80045c0:	f7ff fed6 	bl	8004370 <__cvt>
 80045c4:	9b06      	ldr	r3, [sp, #24]
 80045c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80045c8:	2b47      	cmp	r3, #71	@ 0x47
 80045ca:	4680      	mov	r8, r0
 80045cc:	d129      	bne.n	8004622 <_printf_float+0x172>
 80045ce:	1cc8      	adds	r0, r1, #3
 80045d0:	db02      	blt.n	80045d8 <_printf_float+0x128>
 80045d2:	6863      	ldr	r3, [r4, #4]
 80045d4:	4299      	cmp	r1, r3
 80045d6:	dd41      	ble.n	800465c <_printf_float+0x1ac>
 80045d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80045dc:	fa5f fa8a 	uxtb.w	sl, sl
 80045e0:	3901      	subs	r1, #1
 80045e2:	4652      	mov	r2, sl
 80045e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80045e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80045ea:	f7ff ff26 	bl	800443a <__exponent>
 80045ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045f0:	1813      	adds	r3, r2, r0
 80045f2:	2a01      	cmp	r2, #1
 80045f4:	4681      	mov	r9, r0
 80045f6:	6123      	str	r3, [r4, #16]
 80045f8:	dc02      	bgt.n	8004600 <_printf_float+0x150>
 80045fa:	6822      	ldr	r2, [r4, #0]
 80045fc:	07d2      	lsls	r2, r2, #31
 80045fe:	d501      	bpl.n	8004604 <_printf_float+0x154>
 8004600:	3301      	adds	r3, #1
 8004602:	6123      	str	r3, [r4, #16]
 8004604:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0a2      	beq.n	8004552 <_printf_float+0xa2>
 800460c:	232d      	movs	r3, #45	@ 0x2d
 800460e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004612:	e79e      	b.n	8004552 <_printf_float+0xa2>
 8004614:	9a06      	ldr	r2, [sp, #24]
 8004616:	2a47      	cmp	r2, #71	@ 0x47
 8004618:	d1c2      	bne.n	80045a0 <_printf_float+0xf0>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1c0      	bne.n	80045a0 <_printf_float+0xf0>
 800461e:	2301      	movs	r3, #1
 8004620:	e7bd      	b.n	800459e <_printf_float+0xee>
 8004622:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004626:	d9db      	bls.n	80045e0 <_printf_float+0x130>
 8004628:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800462c:	d118      	bne.n	8004660 <_printf_float+0x1b0>
 800462e:	2900      	cmp	r1, #0
 8004630:	6863      	ldr	r3, [r4, #4]
 8004632:	dd0b      	ble.n	800464c <_printf_float+0x19c>
 8004634:	6121      	str	r1, [r4, #16]
 8004636:	b913      	cbnz	r3, 800463e <_printf_float+0x18e>
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	07d0      	lsls	r0, r2, #31
 800463c:	d502      	bpl.n	8004644 <_printf_float+0x194>
 800463e:	3301      	adds	r3, #1
 8004640:	440b      	add	r3, r1
 8004642:	6123      	str	r3, [r4, #16]
 8004644:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004646:	f04f 0900 	mov.w	r9, #0
 800464a:	e7db      	b.n	8004604 <_printf_float+0x154>
 800464c:	b913      	cbnz	r3, 8004654 <_printf_float+0x1a4>
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	07d2      	lsls	r2, r2, #31
 8004652:	d501      	bpl.n	8004658 <_printf_float+0x1a8>
 8004654:	3302      	adds	r3, #2
 8004656:	e7f4      	b.n	8004642 <_printf_float+0x192>
 8004658:	2301      	movs	r3, #1
 800465a:	e7f2      	b.n	8004642 <_printf_float+0x192>
 800465c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004662:	4299      	cmp	r1, r3
 8004664:	db05      	blt.n	8004672 <_printf_float+0x1c2>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	6121      	str	r1, [r4, #16]
 800466a:	07d8      	lsls	r0, r3, #31
 800466c:	d5ea      	bpl.n	8004644 <_printf_float+0x194>
 800466e:	1c4b      	adds	r3, r1, #1
 8004670:	e7e7      	b.n	8004642 <_printf_float+0x192>
 8004672:	2900      	cmp	r1, #0
 8004674:	bfd4      	ite	le
 8004676:	f1c1 0202 	rsble	r2, r1, #2
 800467a:	2201      	movgt	r2, #1
 800467c:	4413      	add	r3, r2
 800467e:	e7e0      	b.n	8004642 <_printf_float+0x192>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	055a      	lsls	r2, r3, #21
 8004684:	d407      	bmi.n	8004696 <_printf_float+0x1e6>
 8004686:	6923      	ldr	r3, [r4, #16]
 8004688:	4642      	mov	r2, r8
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	d12b      	bne.n	80046ec <_printf_float+0x23c>
 8004694:	e767      	b.n	8004566 <_printf_float+0xb6>
 8004696:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800469a:	f240 80dd 	bls.w	8004858 <_printf_float+0x3a8>
 800469e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80046a2:	2200      	movs	r2, #0
 80046a4:	2300      	movs	r3, #0
 80046a6:	f7fc fa17 	bl	8000ad8 <__aeabi_dcmpeq>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d033      	beq.n	8004716 <_printf_float+0x266>
 80046ae:	4a37      	ldr	r2, [pc, #220]	@ (800478c <_printf_float+0x2dc>)
 80046b0:	2301      	movs	r3, #1
 80046b2:	4631      	mov	r1, r6
 80046b4:	4628      	mov	r0, r5
 80046b6:	47b8      	blx	r7
 80046b8:	3001      	adds	r0, #1
 80046ba:	f43f af54 	beq.w	8004566 <_printf_float+0xb6>
 80046be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80046c2:	4543      	cmp	r3, r8
 80046c4:	db02      	blt.n	80046cc <_printf_float+0x21c>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	07d8      	lsls	r0, r3, #31
 80046ca:	d50f      	bpl.n	80046ec <_printf_float+0x23c>
 80046cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046d0:	4631      	mov	r1, r6
 80046d2:	4628      	mov	r0, r5
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	f43f af45 	beq.w	8004566 <_printf_float+0xb6>
 80046dc:	f04f 0900 	mov.w	r9, #0
 80046e0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80046e4:	f104 0a1a 	add.w	sl, r4, #26
 80046e8:	45c8      	cmp	r8, r9
 80046ea:	dc09      	bgt.n	8004700 <_printf_float+0x250>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	079b      	lsls	r3, r3, #30
 80046f0:	f100 8103 	bmi.w	80048fa <_printf_float+0x44a>
 80046f4:	68e0      	ldr	r0, [r4, #12]
 80046f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046f8:	4298      	cmp	r0, r3
 80046fa:	bfb8      	it	lt
 80046fc:	4618      	movlt	r0, r3
 80046fe:	e734      	b.n	800456a <_printf_float+0xba>
 8004700:	2301      	movs	r3, #1
 8004702:	4652      	mov	r2, sl
 8004704:	4631      	mov	r1, r6
 8004706:	4628      	mov	r0, r5
 8004708:	47b8      	blx	r7
 800470a:	3001      	adds	r0, #1
 800470c:	f43f af2b 	beq.w	8004566 <_printf_float+0xb6>
 8004710:	f109 0901 	add.w	r9, r9, #1
 8004714:	e7e8      	b.n	80046e8 <_printf_float+0x238>
 8004716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004718:	2b00      	cmp	r3, #0
 800471a:	dc39      	bgt.n	8004790 <_printf_float+0x2e0>
 800471c:	4a1b      	ldr	r2, [pc, #108]	@ (800478c <_printf_float+0x2dc>)
 800471e:	2301      	movs	r3, #1
 8004720:	4631      	mov	r1, r6
 8004722:	4628      	mov	r0, r5
 8004724:	47b8      	blx	r7
 8004726:	3001      	adds	r0, #1
 8004728:	f43f af1d 	beq.w	8004566 <_printf_float+0xb6>
 800472c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004730:	ea59 0303 	orrs.w	r3, r9, r3
 8004734:	d102      	bne.n	800473c <_printf_float+0x28c>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	07d9      	lsls	r1, r3, #31
 800473a:	d5d7      	bpl.n	80046ec <_printf_float+0x23c>
 800473c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004740:	4631      	mov	r1, r6
 8004742:	4628      	mov	r0, r5
 8004744:	47b8      	blx	r7
 8004746:	3001      	adds	r0, #1
 8004748:	f43f af0d 	beq.w	8004566 <_printf_float+0xb6>
 800474c:	f04f 0a00 	mov.w	sl, #0
 8004750:	f104 0b1a 	add.w	fp, r4, #26
 8004754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004756:	425b      	negs	r3, r3
 8004758:	4553      	cmp	r3, sl
 800475a:	dc01      	bgt.n	8004760 <_printf_float+0x2b0>
 800475c:	464b      	mov	r3, r9
 800475e:	e793      	b.n	8004688 <_printf_float+0x1d8>
 8004760:	2301      	movs	r3, #1
 8004762:	465a      	mov	r2, fp
 8004764:	4631      	mov	r1, r6
 8004766:	4628      	mov	r0, r5
 8004768:	47b8      	blx	r7
 800476a:	3001      	adds	r0, #1
 800476c:	f43f aefb 	beq.w	8004566 <_printf_float+0xb6>
 8004770:	f10a 0a01 	add.w	sl, sl, #1
 8004774:	e7ee      	b.n	8004754 <_printf_float+0x2a4>
 8004776:	bf00      	nop
 8004778:	7fefffff 	.word	0x7fefffff
 800477c:	08007118 	.word	0x08007118
 8004780:	08007114 	.word	0x08007114
 8004784:	08007120 	.word	0x08007120
 8004788:	0800711c 	.word	0x0800711c
 800478c:	08007124 	.word	0x08007124
 8004790:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004792:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004796:	4553      	cmp	r3, sl
 8004798:	bfa8      	it	ge
 800479a:	4653      	movge	r3, sl
 800479c:	2b00      	cmp	r3, #0
 800479e:	4699      	mov	r9, r3
 80047a0:	dc36      	bgt.n	8004810 <_printf_float+0x360>
 80047a2:	f04f 0b00 	mov.w	fp, #0
 80047a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047aa:	f104 021a 	add.w	r2, r4, #26
 80047ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80047b0:	9306      	str	r3, [sp, #24]
 80047b2:	eba3 0309 	sub.w	r3, r3, r9
 80047b6:	455b      	cmp	r3, fp
 80047b8:	dc31      	bgt.n	800481e <_printf_float+0x36e>
 80047ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047bc:	459a      	cmp	sl, r3
 80047be:	dc3a      	bgt.n	8004836 <_printf_float+0x386>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	07da      	lsls	r2, r3, #31
 80047c4:	d437      	bmi.n	8004836 <_printf_float+0x386>
 80047c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047c8:	ebaa 0903 	sub.w	r9, sl, r3
 80047cc:	9b06      	ldr	r3, [sp, #24]
 80047ce:	ebaa 0303 	sub.w	r3, sl, r3
 80047d2:	4599      	cmp	r9, r3
 80047d4:	bfa8      	it	ge
 80047d6:	4699      	movge	r9, r3
 80047d8:	f1b9 0f00 	cmp.w	r9, #0
 80047dc:	dc33      	bgt.n	8004846 <_printf_float+0x396>
 80047de:	f04f 0800 	mov.w	r8, #0
 80047e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047e6:	f104 0b1a 	add.w	fp, r4, #26
 80047ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ec:	ebaa 0303 	sub.w	r3, sl, r3
 80047f0:	eba3 0309 	sub.w	r3, r3, r9
 80047f4:	4543      	cmp	r3, r8
 80047f6:	f77f af79 	ble.w	80046ec <_printf_float+0x23c>
 80047fa:	2301      	movs	r3, #1
 80047fc:	465a      	mov	r2, fp
 80047fe:	4631      	mov	r1, r6
 8004800:	4628      	mov	r0, r5
 8004802:	47b8      	blx	r7
 8004804:	3001      	adds	r0, #1
 8004806:	f43f aeae 	beq.w	8004566 <_printf_float+0xb6>
 800480a:	f108 0801 	add.w	r8, r8, #1
 800480e:	e7ec      	b.n	80047ea <_printf_float+0x33a>
 8004810:	4642      	mov	r2, r8
 8004812:	4631      	mov	r1, r6
 8004814:	4628      	mov	r0, r5
 8004816:	47b8      	blx	r7
 8004818:	3001      	adds	r0, #1
 800481a:	d1c2      	bne.n	80047a2 <_printf_float+0x2f2>
 800481c:	e6a3      	b.n	8004566 <_printf_float+0xb6>
 800481e:	2301      	movs	r3, #1
 8004820:	4631      	mov	r1, r6
 8004822:	4628      	mov	r0, r5
 8004824:	9206      	str	r2, [sp, #24]
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	f43f ae9c 	beq.w	8004566 <_printf_float+0xb6>
 800482e:	9a06      	ldr	r2, [sp, #24]
 8004830:	f10b 0b01 	add.w	fp, fp, #1
 8004834:	e7bb      	b.n	80047ae <_printf_float+0x2fe>
 8004836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800483a:	4631      	mov	r1, r6
 800483c:	4628      	mov	r0, r5
 800483e:	47b8      	blx	r7
 8004840:	3001      	adds	r0, #1
 8004842:	d1c0      	bne.n	80047c6 <_printf_float+0x316>
 8004844:	e68f      	b.n	8004566 <_printf_float+0xb6>
 8004846:	9a06      	ldr	r2, [sp, #24]
 8004848:	464b      	mov	r3, r9
 800484a:	4442      	add	r2, r8
 800484c:	4631      	mov	r1, r6
 800484e:	4628      	mov	r0, r5
 8004850:	47b8      	blx	r7
 8004852:	3001      	adds	r0, #1
 8004854:	d1c3      	bne.n	80047de <_printf_float+0x32e>
 8004856:	e686      	b.n	8004566 <_printf_float+0xb6>
 8004858:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800485c:	f1ba 0f01 	cmp.w	sl, #1
 8004860:	dc01      	bgt.n	8004866 <_printf_float+0x3b6>
 8004862:	07db      	lsls	r3, r3, #31
 8004864:	d536      	bpl.n	80048d4 <_printf_float+0x424>
 8004866:	2301      	movs	r3, #1
 8004868:	4642      	mov	r2, r8
 800486a:	4631      	mov	r1, r6
 800486c:	4628      	mov	r0, r5
 800486e:	47b8      	blx	r7
 8004870:	3001      	adds	r0, #1
 8004872:	f43f ae78 	beq.w	8004566 <_printf_float+0xb6>
 8004876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	f43f ae70 	beq.w	8004566 <_printf_float+0xb6>
 8004886:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800488a:	2200      	movs	r2, #0
 800488c:	2300      	movs	r3, #0
 800488e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004892:	f7fc f921 	bl	8000ad8 <__aeabi_dcmpeq>
 8004896:	b9c0      	cbnz	r0, 80048ca <_printf_float+0x41a>
 8004898:	4653      	mov	r3, sl
 800489a:	f108 0201 	add.w	r2, r8, #1
 800489e:	4631      	mov	r1, r6
 80048a0:	4628      	mov	r0, r5
 80048a2:	47b8      	blx	r7
 80048a4:	3001      	adds	r0, #1
 80048a6:	d10c      	bne.n	80048c2 <_printf_float+0x412>
 80048a8:	e65d      	b.n	8004566 <_printf_float+0xb6>
 80048aa:	2301      	movs	r3, #1
 80048ac:	465a      	mov	r2, fp
 80048ae:	4631      	mov	r1, r6
 80048b0:	4628      	mov	r0, r5
 80048b2:	47b8      	blx	r7
 80048b4:	3001      	adds	r0, #1
 80048b6:	f43f ae56 	beq.w	8004566 <_printf_float+0xb6>
 80048ba:	f108 0801 	add.w	r8, r8, #1
 80048be:	45d0      	cmp	r8, sl
 80048c0:	dbf3      	blt.n	80048aa <_printf_float+0x3fa>
 80048c2:	464b      	mov	r3, r9
 80048c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80048c8:	e6df      	b.n	800468a <_printf_float+0x1da>
 80048ca:	f04f 0800 	mov.w	r8, #0
 80048ce:	f104 0b1a 	add.w	fp, r4, #26
 80048d2:	e7f4      	b.n	80048be <_printf_float+0x40e>
 80048d4:	2301      	movs	r3, #1
 80048d6:	4642      	mov	r2, r8
 80048d8:	e7e1      	b.n	800489e <_printf_float+0x3ee>
 80048da:	2301      	movs	r3, #1
 80048dc:	464a      	mov	r2, r9
 80048de:	4631      	mov	r1, r6
 80048e0:	4628      	mov	r0, r5
 80048e2:	47b8      	blx	r7
 80048e4:	3001      	adds	r0, #1
 80048e6:	f43f ae3e 	beq.w	8004566 <_printf_float+0xb6>
 80048ea:	f108 0801 	add.w	r8, r8, #1
 80048ee:	68e3      	ldr	r3, [r4, #12]
 80048f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048f2:	1a5b      	subs	r3, r3, r1
 80048f4:	4543      	cmp	r3, r8
 80048f6:	dcf0      	bgt.n	80048da <_printf_float+0x42a>
 80048f8:	e6fc      	b.n	80046f4 <_printf_float+0x244>
 80048fa:	f04f 0800 	mov.w	r8, #0
 80048fe:	f104 0919 	add.w	r9, r4, #25
 8004902:	e7f4      	b.n	80048ee <_printf_float+0x43e>

08004904 <_printf_common>:
 8004904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004908:	4616      	mov	r6, r2
 800490a:	4698      	mov	r8, r3
 800490c:	688a      	ldr	r2, [r1, #8]
 800490e:	690b      	ldr	r3, [r1, #16]
 8004910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004914:	4293      	cmp	r3, r2
 8004916:	bfb8      	it	lt
 8004918:	4613      	movlt	r3, r2
 800491a:	6033      	str	r3, [r6, #0]
 800491c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004920:	4607      	mov	r7, r0
 8004922:	460c      	mov	r4, r1
 8004924:	b10a      	cbz	r2, 800492a <_printf_common+0x26>
 8004926:	3301      	adds	r3, #1
 8004928:	6033      	str	r3, [r6, #0]
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	0699      	lsls	r1, r3, #26
 800492e:	bf42      	ittt	mi
 8004930:	6833      	ldrmi	r3, [r6, #0]
 8004932:	3302      	addmi	r3, #2
 8004934:	6033      	strmi	r3, [r6, #0]
 8004936:	6825      	ldr	r5, [r4, #0]
 8004938:	f015 0506 	ands.w	r5, r5, #6
 800493c:	d106      	bne.n	800494c <_printf_common+0x48>
 800493e:	f104 0a19 	add.w	sl, r4, #25
 8004942:	68e3      	ldr	r3, [r4, #12]
 8004944:	6832      	ldr	r2, [r6, #0]
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	42ab      	cmp	r3, r5
 800494a:	dc26      	bgt.n	800499a <_printf_common+0x96>
 800494c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004950:	6822      	ldr	r2, [r4, #0]
 8004952:	3b00      	subs	r3, #0
 8004954:	bf18      	it	ne
 8004956:	2301      	movne	r3, #1
 8004958:	0692      	lsls	r2, r2, #26
 800495a:	d42b      	bmi.n	80049b4 <_printf_common+0xb0>
 800495c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004960:	4641      	mov	r1, r8
 8004962:	4638      	mov	r0, r7
 8004964:	47c8      	blx	r9
 8004966:	3001      	adds	r0, #1
 8004968:	d01e      	beq.n	80049a8 <_printf_common+0xa4>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	6922      	ldr	r2, [r4, #16]
 800496e:	f003 0306 	and.w	r3, r3, #6
 8004972:	2b04      	cmp	r3, #4
 8004974:	bf02      	ittt	eq
 8004976:	68e5      	ldreq	r5, [r4, #12]
 8004978:	6833      	ldreq	r3, [r6, #0]
 800497a:	1aed      	subeq	r5, r5, r3
 800497c:	68a3      	ldr	r3, [r4, #8]
 800497e:	bf0c      	ite	eq
 8004980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004984:	2500      	movne	r5, #0
 8004986:	4293      	cmp	r3, r2
 8004988:	bfc4      	itt	gt
 800498a:	1a9b      	subgt	r3, r3, r2
 800498c:	18ed      	addgt	r5, r5, r3
 800498e:	2600      	movs	r6, #0
 8004990:	341a      	adds	r4, #26
 8004992:	42b5      	cmp	r5, r6
 8004994:	d11a      	bne.n	80049cc <_printf_common+0xc8>
 8004996:	2000      	movs	r0, #0
 8004998:	e008      	b.n	80049ac <_printf_common+0xa8>
 800499a:	2301      	movs	r3, #1
 800499c:	4652      	mov	r2, sl
 800499e:	4641      	mov	r1, r8
 80049a0:	4638      	mov	r0, r7
 80049a2:	47c8      	blx	r9
 80049a4:	3001      	adds	r0, #1
 80049a6:	d103      	bne.n	80049b0 <_printf_common+0xac>
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b0:	3501      	adds	r5, #1
 80049b2:	e7c6      	b.n	8004942 <_printf_common+0x3e>
 80049b4:	18e1      	adds	r1, r4, r3
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	2030      	movs	r0, #48	@ 0x30
 80049ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049be:	4422      	add	r2, r4
 80049c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049c8:	3302      	adds	r3, #2
 80049ca:	e7c7      	b.n	800495c <_printf_common+0x58>
 80049cc:	2301      	movs	r3, #1
 80049ce:	4622      	mov	r2, r4
 80049d0:	4641      	mov	r1, r8
 80049d2:	4638      	mov	r0, r7
 80049d4:	47c8      	blx	r9
 80049d6:	3001      	adds	r0, #1
 80049d8:	d0e6      	beq.n	80049a8 <_printf_common+0xa4>
 80049da:	3601      	adds	r6, #1
 80049dc:	e7d9      	b.n	8004992 <_printf_common+0x8e>
	...

080049e0 <_printf_i>:
 80049e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049e4:	7e0f      	ldrb	r7, [r1, #24]
 80049e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049e8:	2f78      	cmp	r7, #120	@ 0x78
 80049ea:	4691      	mov	r9, r2
 80049ec:	4680      	mov	r8, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	469a      	mov	sl, r3
 80049f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049f6:	d807      	bhi.n	8004a08 <_printf_i+0x28>
 80049f8:	2f62      	cmp	r7, #98	@ 0x62
 80049fa:	d80a      	bhi.n	8004a12 <_printf_i+0x32>
 80049fc:	2f00      	cmp	r7, #0
 80049fe:	f000 80d1 	beq.w	8004ba4 <_printf_i+0x1c4>
 8004a02:	2f58      	cmp	r7, #88	@ 0x58
 8004a04:	f000 80b8 	beq.w	8004b78 <_printf_i+0x198>
 8004a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a10:	e03a      	b.n	8004a88 <_printf_i+0xa8>
 8004a12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a16:	2b15      	cmp	r3, #21
 8004a18:	d8f6      	bhi.n	8004a08 <_printf_i+0x28>
 8004a1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004a20 <_printf_i+0x40>)
 8004a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a20:	08004a79 	.word	0x08004a79
 8004a24:	08004a8d 	.word	0x08004a8d
 8004a28:	08004a09 	.word	0x08004a09
 8004a2c:	08004a09 	.word	0x08004a09
 8004a30:	08004a09 	.word	0x08004a09
 8004a34:	08004a09 	.word	0x08004a09
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	08004a09 	.word	0x08004a09
 8004a40:	08004a09 	.word	0x08004a09
 8004a44:	08004a09 	.word	0x08004a09
 8004a48:	08004a09 	.word	0x08004a09
 8004a4c:	08004b8b 	.word	0x08004b8b
 8004a50:	08004ab7 	.word	0x08004ab7
 8004a54:	08004b45 	.word	0x08004b45
 8004a58:	08004a09 	.word	0x08004a09
 8004a5c:	08004a09 	.word	0x08004a09
 8004a60:	08004bad 	.word	0x08004bad
 8004a64:	08004a09 	.word	0x08004a09
 8004a68:	08004ab7 	.word	0x08004ab7
 8004a6c:	08004a09 	.word	0x08004a09
 8004a70:	08004a09 	.word	0x08004a09
 8004a74:	08004b4d 	.word	0x08004b4d
 8004a78:	6833      	ldr	r3, [r6, #0]
 8004a7a:	1d1a      	adds	r2, r3, #4
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6032      	str	r2, [r6, #0]
 8004a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e09c      	b.n	8004bc6 <_printf_i+0x1e6>
 8004a8c:	6833      	ldr	r3, [r6, #0]
 8004a8e:	6820      	ldr	r0, [r4, #0]
 8004a90:	1d19      	adds	r1, r3, #4
 8004a92:	6031      	str	r1, [r6, #0]
 8004a94:	0606      	lsls	r6, r0, #24
 8004a96:	d501      	bpl.n	8004a9c <_printf_i+0xbc>
 8004a98:	681d      	ldr	r5, [r3, #0]
 8004a9a:	e003      	b.n	8004aa4 <_printf_i+0xc4>
 8004a9c:	0645      	lsls	r5, r0, #25
 8004a9e:	d5fb      	bpl.n	8004a98 <_printf_i+0xb8>
 8004aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004aa4:	2d00      	cmp	r5, #0
 8004aa6:	da03      	bge.n	8004ab0 <_printf_i+0xd0>
 8004aa8:	232d      	movs	r3, #45	@ 0x2d
 8004aaa:	426d      	negs	r5, r5
 8004aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ab0:	4858      	ldr	r0, [pc, #352]	@ (8004c14 <_printf_i+0x234>)
 8004ab2:	230a      	movs	r3, #10
 8004ab4:	e011      	b.n	8004ada <_printf_i+0xfa>
 8004ab6:	6821      	ldr	r1, [r4, #0]
 8004ab8:	6833      	ldr	r3, [r6, #0]
 8004aba:	0608      	lsls	r0, r1, #24
 8004abc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ac0:	d402      	bmi.n	8004ac8 <_printf_i+0xe8>
 8004ac2:	0649      	lsls	r1, r1, #25
 8004ac4:	bf48      	it	mi
 8004ac6:	b2ad      	uxthmi	r5, r5
 8004ac8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004aca:	4852      	ldr	r0, [pc, #328]	@ (8004c14 <_printf_i+0x234>)
 8004acc:	6033      	str	r3, [r6, #0]
 8004ace:	bf14      	ite	ne
 8004ad0:	230a      	movne	r3, #10
 8004ad2:	2308      	moveq	r3, #8
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ada:	6866      	ldr	r6, [r4, #4]
 8004adc:	60a6      	str	r6, [r4, #8]
 8004ade:	2e00      	cmp	r6, #0
 8004ae0:	db05      	blt.n	8004aee <_printf_i+0x10e>
 8004ae2:	6821      	ldr	r1, [r4, #0]
 8004ae4:	432e      	orrs	r6, r5
 8004ae6:	f021 0104 	bic.w	r1, r1, #4
 8004aea:	6021      	str	r1, [r4, #0]
 8004aec:	d04b      	beq.n	8004b86 <_printf_i+0x1a6>
 8004aee:	4616      	mov	r6, r2
 8004af0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004af4:	fb03 5711 	mls	r7, r3, r1, r5
 8004af8:	5dc7      	ldrb	r7, [r0, r7]
 8004afa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004afe:	462f      	mov	r7, r5
 8004b00:	42bb      	cmp	r3, r7
 8004b02:	460d      	mov	r5, r1
 8004b04:	d9f4      	bls.n	8004af0 <_printf_i+0x110>
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d10b      	bne.n	8004b22 <_printf_i+0x142>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	07df      	lsls	r7, r3, #31
 8004b0e:	d508      	bpl.n	8004b22 <_printf_i+0x142>
 8004b10:	6923      	ldr	r3, [r4, #16]
 8004b12:	6861      	ldr	r1, [r4, #4]
 8004b14:	4299      	cmp	r1, r3
 8004b16:	bfde      	ittt	le
 8004b18:	2330      	movle	r3, #48	@ 0x30
 8004b1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004b22:	1b92      	subs	r2, r2, r6
 8004b24:	6122      	str	r2, [r4, #16]
 8004b26:	f8cd a000 	str.w	sl, [sp]
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	aa03      	add	r2, sp, #12
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4640      	mov	r0, r8
 8004b32:	f7ff fee7 	bl	8004904 <_printf_common>
 8004b36:	3001      	adds	r0, #1
 8004b38:	d14a      	bne.n	8004bd0 <_printf_i+0x1f0>
 8004b3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b3e:	b004      	add	sp, #16
 8004b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	f043 0320 	orr.w	r3, r3, #32
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	4832      	ldr	r0, [pc, #200]	@ (8004c18 <_printf_i+0x238>)
 8004b4e:	2778      	movs	r7, #120	@ 0x78
 8004b50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	6831      	ldr	r1, [r6, #0]
 8004b58:	061f      	lsls	r7, r3, #24
 8004b5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b5e:	d402      	bmi.n	8004b66 <_printf_i+0x186>
 8004b60:	065f      	lsls	r7, r3, #25
 8004b62:	bf48      	it	mi
 8004b64:	b2ad      	uxthmi	r5, r5
 8004b66:	6031      	str	r1, [r6, #0]
 8004b68:	07d9      	lsls	r1, r3, #31
 8004b6a:	bf44      	itt	mi
 8004b6c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b70:	6023      	strmi	r3, [r4, #0]
 8004b72:	b11d      	cbz	r5, 8004b7c <_printf_i+0x19c>
 8004b74:	2310      	movs	r3, #16
 8004b76:	e7ad      	b.n	8004ad4 <_printf_i+0xf4>
 8004b78:	4826      	ldr	r0, [pc, #152]	@ (8004c14 <_printf_i+0x234>)
 8004b7a:	e7e9      	b.n	8004b50 <_printf_i+0x170>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	f023 0320 	bic.w	r3, r3, #32
 8004b82:	6023      	str	r3, [r4, #0]
 8004b84:	e7f6      	b.n	8004b74 <_printf_i+0x194>
 8004b86:	4616      	mov	r6, r2
 8004b88:	e7bd      	b.n	8004b06 <_printf_i+0x126>
 8004b8a:	6833      	ldr	r3, [r6, #0]
 8004b8c:	6825      	ldr	r5, [r4, #0]
 8004b8e:	6961      	ldr	r1, [r4, #20]
 8004b90:	1d18      	adds	r0, r3, #4
 8004b92:	6030      	str	r0, [r6, #0]
 8004b94:	062e      	lsls	r6, r5, #24
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	d501      	bpl.n	8004b9e <_printf_i+0x1be>
 8004b9a:	6019      	str	r1, [r3, #0]
 8004b9c:	e002      	b.n	8004ba4 <_printf_i+0x1c4>
 8004b9e:	0668      	lsls	r0, r5, #25
 8004ba0:	d5fb      	bpl.n	8004b9a <_printf_i+0x1ba>
 8004ba2:	8019      	strh	r1, [r3, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	6123      	str	r3, [r4, #16]
 8004ba8:	4616      	mov	r6, r2
 8004baa:	e7bc      	b.n	8004b26 <_printf_i+0x146>
 8004bac:	6833      	ldr	r3, [r6, #0]
 8004bae:	1d1a      	adds	r2, r3, #4
 8004bb0:	6032      	str	r2, [r6, #0]
 8004bb2:	681e      	ldr	r6, [r3, #0]
 8004bb4:	6862      	ldr	r2, [r4, #4]
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f7fb fb11 	bl	80001e0 <memchr>
 8004bbe:	b108      	cbz	r0, 8004bc4 <_printf_i+0x1e4>
 8004bc0:	1b80      	subs	r0, r0, r6
 8004bc2:	6060      	str	r0, [r4, #4]
 8004bc4:	6863      	ldr	r3, [r4, #4]
 8004bc6:	6123      	str	r3, [r4, #16]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bce:	e7aa      	b.n	8004b26 <_printf_i+0x146>
 8004bd0:	6923      	ldr	r3, [r4, #16]
 8004bd2:	4632      	mov	r2, r6
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	47d0      	blx	sl
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d0ad      	beq.n	8004b3a <_printf_i+0x15a>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	079b      	lsls	r3, r3, #30
 8004be2:	d413      	bmi.n	8004c0c <_printf_i+0x22c>
 8004be4:	68e0      	ldr	r0, [r4, #12]
 8004be6:	9b03      	ldr	r3, [sp, #12]
 8004be8:	4298      	cmp	r0, r3
 8004bea:	bfb8      	it	lt
 8004bec:	4618      	movlt	r0, r3
 8004bee:	e7a6      	b.n	8004b3e <_printf_i+0x15e>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4632      	mov	r2, r6
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	47d0      	blx	sl
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	d09d      	beq.n	8004b3a <_printf_i+0x15a>
 8004bfe:	3501      	adds	r5, #1
 8004c00:	68e3      	ldr	r3, [r4, #12]
 8004c02:	9903      	ldr	r1, [sp, #12]
 8004c04:	1a5b      	subs	r3, r3, r1
 8004c06:	42ab      	cmp	r3, r5
 8004c08:	dcf2      	bgt.n	8004bf0 <_printf_i+0x210>
 8004c0a:	e7eb      	b.n	8004be4 <_printf_i+0x204>
 8004c0c:	2500      	movs	r5, #0
 8004c0e:	f104 0619 	add.w	r6, r4, #25
 8004c12:	e7f5      	b.n	8004c00 <_printf_i+0x220>
 8004c14:	08007126 	.word	0x08007126
 8004c18:	08007137 	.word	0x08007137

08004c1c <std>:
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	4604      	mov	r4, r0
 8004c22:	e9c0 3300 	strd	r3, r3, [r0]
 8004c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c2a:	6083      	str	r3, [r0, #8]
 8004c2c:	8181      	strh	r1, [r0, #12]
 8004c2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c30:	81c2      	strh	r2, [r0, #14]
 8004c32:	6183      	str	r3, [r0, #24]
 8004c34:	4619      	mov	r1, r3
 8004c36:	2208      	movs	r2, #8
 8004c38:	305c      	adds	r0, #92	@ 0x5c
 8004c3a:	f000 f92a 	bl	8004e92 <memset>
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <std+0x58>)
 8004c40:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c42:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <std+0x5c>)
 8004c44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c46:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <std+0x60>)
 8004c48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c80 <std+0x64>)
 8004c4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c84 <std+0x68>)
 8004c50:	6224      	str	r4, [r4, #32]
 8004c52:	429c      	cmp	r4, r3
 8004c54:	d006      	beq.n	8004c64 <std+0x48>
 8004c56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c5a:	4294      	cmp	r4, r2
 8004c5c:	d002      	beq.n	8004c64 <std+0x48>
 8004c5e:	33d0      	adds	r3, #208	@ 0xd0
 8004c60:	429c      	cmp	r4, r3
 8004c62:	d105      	bne.n	8004c70 <std+0x54>
 8004c64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c6c:	f000 b98e 	b.w	8004f8c <__retarget_lock_init_recursive>
 8004c70:	bd10      	pop	{r4, pc}
 8004c72:	bf00      	nop
 8004c74:	08004e0d 	.word	0x08004e0d
 8004c78:	08004e2f 	.word	0x08004e2f
 8004c7c:	08004e67 	.word	0x08004e67
 8004c80:	08004e8b 	.word	0x08004e8b
 8004c84:	20000294 	.word	0x20000294

08004c88 <stdio_exit_handler>:
 8004c88:	4a02      	ldr	r2, [pc, #8]	@ (8004c94 <stdio_exit_handler+0xc>)
 8004c8a:	4903      	ldr	r1, [pc, #12]	@ (8004c98 <stdio_exit_handler+0x10>)
 8004c8c:	4803      	ldr	r0, [pc, #12]	@ (8004c9c <stdio_exit_handler+0x14>)
 8004c8e:	f000 b869 	b.w	8004d64 <_fwalk_sglue>
 8004c92:	bf00      	nop
 8004c94:	2000000c 	.word	0x2000000c
 8004c98:	080068f5 	.word	0x080068f5
 8004c9c:	2000001c 	.word	0x2000001c

08004ca0 <cleanup_stdio>:
 8004ca0:	6841      	ldr	r1, [r0, #4]
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd4 <cleanup_stdio+0x34>)
 8004ca4:	4299      	cmp	r1, r3
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	4604      	mov	r4, r0
 8004caa:	d001      	beq.n	8004cb0 <cleanup_stdio+0x10>
 8004cac:	f001 fe22 	bl	80068f4 <_fflush_r>
 8004cb0:	68a1      	ldr	r1, [r4, #8]
 8004cb2:	4b09      	ldr	r3, [pc, #36]	@ (8004cd8 <cleanup_stdio+0x38>)
 8004cb4:	4299      	cmp	r1, r3
 8004cb6:	d002      	beq.n	8004cbe <cleanup_stdio+0x1e>
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f001 fe1b 	bl	80068f4 <_fflush_r>
 8004cbe:	68e1      	ldr	r1, [r4, #12]
 8004cc0:	4b06      	ldr	r3, [pc, #24]	@ (8004cdc <cleanup_stdio+0x3c>)
 8004cc2:	4299      	cmp	r1, r3
 8004cc4:	d004      	beq.n	8004cd0 <cleanup_stdio+0x30>
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ccc:	f001 be12 	b.w	80068f4 <_fflush_r>
 8004cd0:	bd10      	pop	{r4, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000294 	.word	0x20000294
 8004cd8:	200002fc 	.word	0x200002fc
 8004cdc:	20000364 	.word	0x20000364

08004ce0 <global_stdio_init.part.0>:
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d10 <global_stdio_init.part.0+0x30>)
 8004ce4:	4c0b      	ldr	r4, [pc, #44]	@ (8004d14 <global_stdio_init.part.0+0x34>)
 8004ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8004d18 <global_stdio_init.part.0+0x38>)
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	4620      	mov	r0, r4
 8004cec:	2200      	movs	r2, #0
 8004cee:	2104      	movs	r1, #4
 8004cf0:	f7ff ff94 	bl	8004c1c <std>
 8004cf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	2109      	movs	r1, #9
 8004cfc:	f7ff ff8e 	bl	8004c1c <std>
 8004d00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d04:	2202      	movs	r2, #2
 8004d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d0a:	2112      	movs	r1, #18
 8004d0c:	f7ff bf86 	b.w	8004c1c <std>
 8004d10:	200003cc 	.word	0x200003cc
 8004d14:	20000294 	.word	0x20000294
 8004d18:	08004c89 	.word	0x08004c89

08004d1c <__sfp_lock_acquire>:
 8004d1c:	4801      	ldr	r0, [pc, #4]	@ (8004d24 <__sfp_lock_acquire+0x8>)
 8004d1e:	f000 b936 	b.w	8004f8e <__retarget_lock_acquire_recursive>
 8004d22:	bf00      	nop
 8004d24:	200003d5 	.word	0x200003d5

08004d28 <__sfp_lock_release>:
 8004d28:	4801      	ldr	r0, [pc, #4]	@ (8004d30 <__sfp_lock_release+0x8>)
 8004d2a:	f000 b931 	b.w	8004f90 <__retarget_lock_release_recursive>
 8004d2e:	bf00      	nop
 8004d30:	200003d5 	.word	0x200003d5

08004d34 <__sinit>:
 8004d34:	b510      	push	{r4, lr}
 8004d36:	4604      	mov	r4, r0
 8004d38:	f7ff fff0 	bl	8004d1c <__sfp_lock_acquire>
 8004d3c:	6a23      	ldr	r3, [r4, #32]
 8004d3e:	b11b      	cbz	r3, 8004d48 <__sinit+0x14>
 8004d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d44:	f7ff bff0 	b.w	8004d28 <__sfp_lock_release>
 8004d48:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <__sinit+0x28>)
 8004d4a:	6223      	str	r3, [r4, #32]
 8004d4c:	4b04      	ldr	r3, [pc, #16]	@ (8004d60 <__sinit+0x2c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f5      	bne.n	8004d40 <__sinit+0xc>
 8004d54:	f7ff ffc4 	bl	8004ce0 <global_stdio_init.part.0>
 8004d58:	e7f2      	b.n	8004d40 <__sinit+0xc>
 8004d5a:	bf00      	nop
 8004d5c:	08004ca1 	.word	0x08004ca1
 8004d60:	200003cc 	.word	0x200003cc

08004d64 <_fwalk_sglue>:
 8004d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d68:	4607      	mov	r7, r0
 8004d6a:	4688      	mov	r8, r1
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	2600      	movs	r6, #0
 8004d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d74:	f1b9 0901 	subs.w	r9, r9, #1
 8004d78:	d505      	bpl.n	8004d86 <_fwalk_sglue+0x22>
 8004d7a:	6824      	ldr	r4, [r4, #0]
 8004d7c:	2c00      	cmp	r4, #0
 8004d7e:	d1f7      	bne.n	8004d70 <_fwalk_sglue+0xc>
 8004d80:	4630      	mov	r0, r6
 8004d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d86:	89ab      	ldrh	r3, [r5, #12]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d907      	bls.n	8004d9c <_fwalk_sglue+0x38>
 8004d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d90:	3301      	adds	r3, #1
 8004d92:	d003      	beq.n	8004d9c <_fwalk_sglue+0x38>
 8004d94:	4629      	mov	r1, r5
 8004d96:	4638      	mov	r0, r7
 8004d98:	47c0      	blx	r8
 8004d9a:	4306      	orrs	r6, r0
 8004d9c:	3568      	adds	r5, #104	@ 0x68
 8004d9e:	e7e9      	b.n	8004d74 <_fwalk_sglue+0x10>

08004da0 <sniprintf>:
 8004da0:	b40c      	push	{r2, r3}
 8004da2:	b530      	push	{r4, r5, lr}
 8004da4:	4b18      	ldr	r3, [pc, #96]	@ (8004e08 <sniprintf+0x68>)
 8004da6:	1e0c      	subs	r4, r1, #0
 8004da8:	681d      	ldr	r5, [r3, #0]
 8004daa:	b09d      	sub	sp, #116	@ 0x74
 8004dac:	da08      	bge.n	8004dc0 <sniprintf+0x20>
 8004dae:	238b      	movs	r3, #139	@ 0x8b
 8004db0:	602b      	str	r3, [r5, #0]
 8004db2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004db6:	b01d      	add	sp, #116	@ 0x74
 8004db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dbc:	b002      	add	sp, #8
 8004dbe:	4770      	bx	lr
 8004dc0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004dc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004dce:	bf14      	ite	ne
 8004dd0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004dd4:	4623      	moveq	r3, r4
 8004dd6:	9304      	str	r3, [sp, #16]
 8004dd8:	9307      	str	r3, [sp, #28]
 8004dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004dde:	9002      	str	r0, [sp, #8]
 8004de0:	9006      	str	r0, [sp, #24]
 8004de2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004de6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004de8:	ab21      	add	r3, sp, #132	@ 0x84
 8004dea:	a902      	add	r1, sp, #8
 8004dec:	4628      	mov	r0, r5
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	f001 fc00 	bl	80065f4 <_svfiprintf_r>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	bfbc      	itt	lt
 8004df8:	238b      	movlt	r3, #139	@ 0x8b
 8004dfa:	602b      	strlt	r3, [r5, #0]
 8004dfc:	2c00      	cmp	r4, #0
 8004dfe:	d0da      	beq.n	8004db6 <sniprintf+0x16>
 8004e00:	9b02      	ldr	r3, [sp, #8]
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e7d6      	b.n	8004db6 <sniprintf+0x16>
 8004e08:	20000018 	.word	0x20000018

08004e0c <__sread>:
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	460c      	mov	r4, r1
 8004e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e14:	f000 f86c 	bl	8004ef0 <_read_r>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	bfab      	itete	ge
 8004e1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e20:	181b      	addge	r3, r3, r0
 8004e22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e26:	bfac      	ite	ge
 8004e28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e2a:	81a3      	strhlt	r3, [r4, #12]
 8004e2c:	bd10      	pop	{r4, pc}

08004e2e <__swrite>:
 8004e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e32:	461f      	mov	r7, r3
 8004e34:	898b      	ldrh	r3, [r1, #12]
 8004e36:	05db      	lsls	r3, r3, #23
 8004e38:	4605      	mov	r5, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4616      	mov	r6, r2
 8004e3e:	d505      	bpl.n	8004e4c <__swrite+0x1e>
 8004e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e44:	2302      	movs	r3, #2
 8004e46:	2200      	movs	r2, #0
 8004e48:	f000 f840 	bl	8004ecc <_lseek_r>
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e56:	81a3      	strh	r3, [r4, #12]
 8004e58:	4632      	mov	r2, r6
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e62:	f000 b857 	b.w	8004f14 <_write_r>

08004e66 <__sseek>:
 8004e66:	b510      	push	{r4, lr}
 8004e68:	460c      	mov	r4, r1
 8004e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6e:	f000 f82d 	bl	8004ecc <_lseek_r>
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	bf15      	itete	ne
 8004e78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e82:	81a3      	strheq	r3, [r4, #12]
 8004e84:	bf18      	it	ne
 8004e86:	81a3      	strhne	r3, [r4, #12]
 8004e88:	bd10      	pop	{r4, pc}

08004e8a <__sclose>:
 8004e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8e:	f000 b80d 	b.w	8004eac <_close_r>

08004e92 <memset>:
 8004e92:	4402      	add	r2, r0
 8004e94:	4603      	mov	r3, r0
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d100      	bne.n	8004e9c <memset+0xa>
 8004e9a:	4770      	bx	lr
 8004e9c:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea0:	e7f9      	b.n	8004e96 <memset+0x4>
	...

08004ea4 <_localeconv_r>:
 8004ea4:	4800      	ldr	r0, [pc, #0]	@ (8004ea8 <_localeconv_r+0x4>)
 8004ea6:	4770      	bx	lr
 8004ea8:	20000158 	.word	0x20000158

08004eac <_close_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4d06      	ldr	r5, [pc, #24]	@ (8004ec8 <_close_r+0x1c>)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	f7fc fe2f 	bl	8001b1a <_close>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d102      	bne.n	8004ec6 <_close_r+0x1a>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	b103      	cbz	r3, 8004ec6 <_close_r+0x1a>
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	200003d0 	.word	0x200003d0

08004ecc <_lseek_r>:
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4d07      	ldr	r5, [pc, #28]	@ (8004eec <_lseek_r+0x20>)
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	4608      	mov	r0, r1
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	602a      	str	r2, [r5, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f7fc fe44 	bl	8001b68 <_lseek>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_lseek_r+0x1e>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_lseek_r+0x1e>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	200003d0 	.word	0x200003d0

08004ef0 <_read_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	4d07      	ldr	r5, [pc, #28]	@ (8004f10 <_read_r+0x20>)
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	4608      	mov	r0, r1
 8004ef8:	4611      	mov	r1, r2
 8004efa:	2200      	movs	r2, #0
 8004efc:	602a      	str	r2, [r5, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f7fc fdd2 	bl	8001aa8 <_read>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d102      	bne.n	8004f0e <_read_r+0x1e>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	b103      	cbz	r3, 8004f0e <_read_r+0x1e>
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	200003d0 	.word	0x200003d0

08004f14 <_write_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4d07      	ldr	r5, [pc, #28]	@ (8004f34 <_write_r+0x20>)
 8004f18:	4604      	mov	r4, r0
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	602a      	str	r2, [r5, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f7fc fddd 	bl	8001ae2 <_write>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_write_r+0x1e>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_write_r+0x1e>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	200003d0 	.word	0x200003d0

08004f38 <__errno>:
 8004f38:	4b01      	ldr	r3, [pc, #4]	@ (8004f40 <__errno+0x8>)
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20000018 	.word	0x20000018

08004f44 <__libc_init_array>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	4d0d      	ldr	r5, [pc, #52]	@ (8004f7c <__libc_init_array+0x38>)
 8004f48:	4c0d      	ldr	r4, [pc, #52]	@ (8004f80 <__libc_init_array+0x3c>)
 8004f4a:	1b64      	subs	r4, r4, r5
 8004f4c:	10a4      	asrs	r4, r4, #2
 8004f4e:	2600      	movs	r6, #0
 8004f50:	42a6      	cmp	r6, r4
 8004f52:	d109      	bne.n	8004f68 <__libc_init_array+0x24>
 8004f54:	4d0b      	ldr	r5, [pc, #44]	@ (8004f84 <__libc_init_array+0x40>)
 8004f56:	4c0c      	ldr	r4, [pc, #48]	@ (8004f88 <__libc_init_array+0x44>)
 8004f58:	f002 f86a 	bl	8007030 <_init>
 8004f5c:	1b64      	subs	r4, r4, r5
 8004f5e:	10a4      	asrs	r4, r4, #2
 8004f60:	2600      	movs	r6, #0
 8004f62:	42a6      	cmp	r6, r4
 8004f64:	d105      	bne.n	8004f72 <__libc_init_array+0x2e>
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6c:	4798      	blx	r3
 8004f6e:	3601      	adds	r6, #1
 8004f70:	e7ee      	b.n	8004f50 <__libc_init_array+0xc>
 8004f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f76:	4798      	blx	r3
 8004f78:	3601      	adds	r6, #1
 8004f7a:	e7f2      	b.n	8004f62 <__libc_init_array+0x1e>
 8004f7c:	08007494 	.word	0x08007494
 8004f80:	08007494 	.word	0x08007494
 8004f84:	08007494 	.word	0x08007494
 8004f88:	08007498 	.word	0x08007498

08004f8c <__retarget_lock_init_recursive>:
 8004f8c:	4770      	bx	lr

08004f8e <__retarget_lock_acquire_recursive>:
 8004f8e:	4770      	bx	lr

08004f90 <__retarget_lock_release_recursive>:
 8004f90:	4770      	bx	lr

08004f92 <quorem>:
 8004f92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f96:	6903      	ldr	r3, [r0, #16]
 8004f98:	690c      	ldr	r4, [r1, #16]
 8004f9a:	42a3      	cmp	r3, r4
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	db7e      	blt.n	800509e <quorem+0x10c>
 8004fa0:	3c01      	subs	r4, #1
 8004fa2:	f101 0814 	add.w	r8, r1, #20
 8004fa6:	00a3      	lsls	r3, r4, #2
 8004fa8:	f100 0514 	add.w	r5, r0, #20
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fb2:	9301      	str	r3, [sp, #4]
 8004fb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004fb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004fc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fc8:	d32e      	bcc.n	8005028 <quorem+0x96>
 8004fca:	f04f 0a00 	mov.w	sl, #0
 8004fce:	46c4      	mov	ip, r8
 8004fd0:	46ae      	mov	lr, r5
 8004fd2:	46d3      	mov	fp, sl
 8004fd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004fd8:	b298      	uxth	r0, r3
 8004fda:	fb06 a000 	mla	r0, r6, r0, sl
 8004fde:	0c02      	lsrs	r2, r0, #16
 8004fe0:	0c1b      	lsrs	r3, r3, #16
 8004fe2:	fb06 2303 	mla	r3, r6, r3, r2
 8004fe6:	f8de 2000 	ldr.w	r2, [lr]
 8004fea:	b280      	uxth	r0, r0
 8004fec:	b292      	uxth	r2, r2
 8004fee:	1a12      	subs	r2, r2, r0
 8004ff0:	445a      	add	r2, fp
 8004ff2:	f8de 0000 	ldr.w	r0, [lr]
 8004ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005000:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005004:	b292      	uxth	r2, r2
 8005006:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800500a:	45e1      	cmp	r9, ip
 800500c:	f84e 2b04 	str.w	r2, [lr], #4
 8005010:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005014:	d2de      	bcs.n	8004fd4 <quorem+0x42>
 8005016:	9b00      	ldr	r3, [sp, #0]
 8005018:	58eb      	ldr	r3, [r5, r3]
 800501a:	b92b      	cbnz	r3, 8005028 <quorem+0x96>
 800501c:	9b01      	ldr	r3, [sp, #4]
 800501e:	3b04      	subs	r3, #4
 8005020:	429d      	cmp	r5, r3
 8005022:	461a      	mov	r2, r3
 8005024:	d32f      	bcc.n	8005086 <quorem+0xf4>
 8005026:	613c      	str	r4, [r7, #16]
 8005028:	4638      	mov	r0, r7
 800502a:	f001 f97f 	bl	800632c <__mcmp>
 800502e:	2800      	cmp	r0, #0
 8005030:	db25      	blt.n	800507e <quorem+0xec>
 8005032:	4629      	mov	r1, r5
 8005034:	2000      	movs	r0, #0
 8005036:	f858 2b04 	ldr.w	r2, [r8], #4
 800503a:	f8d1 c000 	ldr.w	ip, [r1]
 800503e:	fa1f fe82 	uxth.w	lr, r2
 8005042:	fa1f f38c 	uxth.w	r3, ip
 8005046:	eba3 030e 	sub.w	r3, r3, lr
 800504a:	4403      	add	r3, r0
 800504c:	0c12      	lsrs	r2, r2, #16
 800504e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005052:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005056:	b29b      	uxth	r3, r3
 8005058:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800505c:	45c1      	cmp	r9, r8
 800505e:	f841 3b04 	str.w	r3, [r1], #4
 8005062:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005066:	d2e6      	bcs.n	8005036 <quorem+0xa4>
 8005068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800506c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005070:	b922      	cbnz	r2, 800507c <quorem+0xea>
 8005072:	3b04      	subs	r3, #4
 8005074:	429d      	cmp	r5, r3
 8005076:	461a      	mov	r2, r3
 8005078:	d30b      	bcc.n	8005092 <quorem+0x100>
 800507a:	613c      	str	r4, [r7, #16]
 800507c:	3601      	adds	r6, #1
 800507e:	4630      	mov	r0, r6
 8005080:	b003      	add	sp, #12
 8005082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	3b04      	subs	r3, #4
 800508a:	2a00      	cmp	r2, #0
 800508c:	d1cb      	bne.n	8005026 <quorem+0x94>
 800508e:	3c01      	subs	r4, #1
 8005090:	e7c6      	b.n	8005020 <quorem+0x8e>
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	3b04      	subs	r3, #4
 8005096:	2a00      	cmp	r2, #0
 8005098:	d1ef      	bne.n	800507a <quorem+0xe8>
 800509a:	3c01      	subs	r4, #1
 800509c:	e7ea      	b.n	8005074 <quorem+0xe2>
 800509e:	2000      	movs	r0, #0
 80050a0:	e7ee      	b.n	8005080 <quorem+0xee>
 80050a2:	0000      	movs	r0, r0
 80050a4:	0000      	movs	r0, r0
	...

080050a8 <_dtoa_r>:
 80050a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ac:	69c7      	ldr	r7, [r0, #28]
 80050ae:	b097      	sub	sp, #92	@ 0x5c
 80050b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80050b4:	ec55 4b10 	vmov	r4, r5, d0
 80050b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80050ba:	9107      	str	r1, [sp, #28]
 80050bc:	4681      	mov	r9, r0
 80050be:	920c      	str	r2, [sp, #48]	@ 0x30
 80050c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80050c2:	b97f      	cbnz	r7, 80050e4 <_dtoa_r+0x3c>
 80050c4:	2010      	movs	r0, #16
 80050c6:	f000 fe09 	bl	8005cdc <malloc>
 80050ca:	4602      	mov	r2, r0
 80050cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80050d0:	b920      	cbnz	r0, 80050dc <_dtoa_r+0x34>
 80050d2:	4ba9      	ldr	r3, [pc, #676]	@ (8005378 <_dtoa_r+0x2d0>)
 80050d4:	21ef      	movs	r1, #239	@ 0xef
 80050d6:	48a9      	ldr	r0, [pc, #676]	@ (800537c <_dtoa_r+0x2d4>)
 80050d8:	f001 fc6c 	bl	80069b4 <__assert_func>
 80050dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80050e0:	6007      	str	r7, [r0, #0]
 80050e2:	60c7      	str	r7, [r0, #12]
 80050e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80050e8:	6819      	ldr	r1, [r3, #0]
 80050ea:	b159      	cbz	r1, 8005104 <_dtoa_r+0x5c>
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	604a      	str	r2, [r1, #4]
 80050f0:	2301      	movs	r3, #1
 80050f2:	4093      	lsls	r3, r2
 80050f4:	608b      	str	r3, [r1, #8]
 80050f6:	4648      	mov	r0, r9
 80050f8:	f000 fee6 	bl	8005ec8 <_Bfree>
 80050fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	1e2b      	subs	r3, r5, #0
 8005106:	bfb9      	ittee	lt
 8005108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800510c:	9305      	strlt	r3, [sp, #20]
 800510e:	2300      	movge	r3, #0
 8005110:	6033      	strge	r3, [r6, #0]
 8005112:	9f05      	ldr	r7, [sp, #20]
 8005114:	4b9a      	ldr	r3, [pc, #616]	@ (8005380 <_dtoa_r+0x2d8>)
 8005116:	bfbc      	itt	lt
 8005118:	2201      	movlt	r2, #1
 800511a:	6032      	strlt	r2, [r6, #0]
 800511c:	43bb      	bics	r3, r7
 800511e:	d112      	bne.n	8005146 <_dtoa_r+0x9e>
 8005120:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005122:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800512c:	4323      	orrs	r3, r4
 800512e:	f000 855a 	beq.w	8005be6 <_dtoa_r+0xb3e>
 8005132:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005134:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005394 <_dtoa_r+0x2ec>
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 855c 	beq.w	8005bf6 <_dtoa_r+0xb4e>
 800513e:	f10a 0303 	add.w	r3, sl, #3
 8005142:	f000 bd56 	b.w	8005bf2 <_dtoa_r+0xb4a>
 8005146:	ed9d 7b04 	vldr	d7, [sp, #16]
 800514a:	2200      	movs	r2, #0
 800514c:	ec51 0b17 	vmov	r0, r1, d7
 8005150:	2300      	movs	r3, #0
 8005152:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005156:	f7fb fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800515a:	4680      	mov	r8, r0
 800515c:	b158      	cbz	r0, 8005176 <_dtoa_r+0xce>
 800515e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005160:	2301      	movs	r3, #1
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005166:	b113      	cbz	r3, 800516e <_dtoa_r+0xc6>
 8005168:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800516a:	4b86      	ldr	r3, [pc, #536]	@ (8005384 <_dtoa_r+0x2dc>)
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005398 <_dtoa_r+0x2f0>
 8005172:	f000 bd40 	b.w	8005bf6 <_dtoa_r+0xb4e>
 8005176:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800517a:	aa14      	add	r2, sp, #80	@ 0x50
 800517c:	a915      	add	r1, sp, #84	@ 0x54
 800517e:	4648      	mov	r0, r9
 8005180:	f001 f984 	bl	800648c <__d2b>
 8005184:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005188:	9002      	str	r0, [sp, #8]
 800518a:	2e00      	cmp	r6, #0
 800518c:	d078      	beq.n	8005280 <_dtoa_r+0x1d8>
 800518e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005190:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005198:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800519c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80051a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80051a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80051a8:	4619      	mov	r1, r3
 80051aa:	2200      	movs	r2, #0
 80051ac:	4b76      	ldr	r3, [pc, #472]	@ (8005388 <_dtoa_r+0x2e0>)
 80051ae:	f7fb f873 	bl	8000298 <__aeabi_dsub>
 80051b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005360 <_dtoa_r+0x2b8>)
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f7fb fa26 	bl	8000608 <__aeabi_dmul>
 80051bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8005368 <_dtoa_r+0x2c0>)
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f7fb f86b 	bl	800029c <__adddf3>
 80051c6:	4604      	mov	r4, r0
 80051c8:	4630      	mov	r0, r6
 80051ca:	460d      	mov	r5, r1
 80051cc:	f7fb f9b2 	bl	8000534 <__aeabi_i2d>
 80051d0:	a367      	add	r3, pc, #412	@ (adr r3, 8005370 <_dtoa_r+0x2c8>)
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f7fb fa17 	bl	8000608 <__aeabi_dmul>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4620      	mov	r0, r4
 80051e0:	4629      	mov	r1, r5
 80051e2:	f7fb f85b 	bl	800029c <__adddf3>
 80051e6:	4604      	mov	r4, r0
 80051e8:	460d      	mov	r5, r1
 80051ea:	f7fb fcbd 	bl	8000b68 <__aeabi_d2iz>
 80051ee:	2200      	movs	r2, #0
 80051f0:	4607      	mov	r7, r0
 80051f2:	2300      	movs	r3, #0
 80051f4:	4620      	mov	r0, r4
 80051f6:	4629      	mov	r1, r5
 80051f8:	f7fb fc78 	bl	8000aec <__aeabi_dcmplt>
 80051fc:	b140      	cbz	r0, 8005210 <_dtoa_r+0x168>
 80051fe:	4638      	mov	r0, r7
 8005200:	f7fb f998 	bl	8000534 <__aeabi_i2d>
 8005204:	4622      	mov	r2, r4
 8005206:	462b      	mov	r3, r5
 8005208:	f7fb fc66 	bl	8000ad8 <__aeabi_dcmpeq>
 800520c:	b900      	cbnz	r0, 8005210 <_dtoa_r+0x168>
 800520e:	3f01      	subs	r7, #1
 8005210:	2f16      	cmp	r7, #22
 8005212:	d852      	bhi.n	80052ba <_dtoa_r+0x212>
 8005214:	4b5d      	ldr	r3, [pc, #372]	@ (800538c <_dtoa_r+0x2e4>)
 8005216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005222:	f7fb fc63 	bl	8000aec <__aeabi_dcmplt>
 8005226:	2800      	cmp	r0, #0
 8005228:	d049      	beq.n	80052be <_dtoa_r+0x216>
 800522a:	3f01      	subs	r7, #1
 800522c:	2300      	movs	r3, #0
 800522e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005230:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005232:	1b9b      	subs	r3, r3, r6
 8005234:	1e5a      	subs	r2, r3, #1
 8005236:	bf45      	ittet	mi
 8005238:	f1c3 0301 	rsbmi	r3, r3, #1
 800523c:	9300      	strmi	r3, [sp, #0]
 800523e:	2300      	movpl	r3, #0
 8005240:	2300      	movmi	r3, #0
 8005242:	9206      	str	r2, [sp, #24]
 8005244:	bf54      	ite	pl
 8005246:	9300      	strpl	r3, [sp, #0]
 8005248:	9306      	strmi	r3, [sp, #24]
 800524a:	2f00      	cmp	r7, #0
 800524c:	db39      	blt.n	80052c2 <_dtoa_r+0x21a>
 800524e:	9b06      	ldr	r3, [sp, #24]
 8005250:	970d      	str	r7, [sp, #52]	@ 0x34
 8005252:	443b      	add	r3, r7
 8005254:	9306      	str	r3, [sp, #24]
 8005256:	2300      	movs	r3, #0
 8005258:	9308      	str	r3, [sp, #32]
 800525a:	9b07      	ldr	r3, [sp, #28]
 800525c:	2b09      	cmp	r3, #9
 800525e:	d863      	bhi.n	8005328 <_dtoa_r+0x280>
 8005260:	2b05      	cmp	r3, #5
 8005262:	bfc4      	itt	gt
 8005264:	3b04      	subgt	r3, #4
 8005266:	9307      	strgt	r3, [sp, #28]
 8005268:	9b07      	ldr	r3, [sp, #28]
 800526a:	f1a3 0302 	sub.w	r3, r3, #2
 800526e:	bfcc      	ite	gt
 8005270:	2400      	movgt	r4, #0
 8005272:	2401      	movle	r4, #1
 8005274:	2b03      	cmp	r3, #3
 8005276:	d863      	bhi.n	8005340 <_dtoa_r+0x298>
 8005278:	e8df f003 	tbb	[pc, r3]
 800527c:	2b375452 	.word	0x2b375452
 8005280:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005284:	441e      	add	r6, r3
 8005286:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800528a:	2b20      	cmp	r3, #32
 800528c:	bfc1      	itttt	gt
 800528e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005292:	409f      	lslgt	r7, r3
 8005294:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005298:	fa24 f303 	lsrgt.w	r3, r4, r3
 800529c:	bfd6      	itet	le
 800529e:	f1c3 0320 	rsble	r3, r3, #32
 80052a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80052a6:	fa04 f003 	lslle.w	r0, r4, r3
 80052aa:	f7fb f933 	bl	8000514 <__aeabi_ui2d>
 80052ae:	2201      	movs	r2, #1
 80052b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80052b4:	3e01      	subs	r6, #1
 80052b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80052b8:	e776      	b.n	80051a8 <_dtoa_r+0x100>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e7b7      	b.n	800522e <_dtoa_r+0x186>
 80052be:	9010      	str	r0, [sp, #64]	@ 0x40
 80052c0:	e7b6      	b.n	8005230 <_dtoa_r+0x188>
 80052c2:	9b00      	ldr	r3, [sp, #0]
 80052c4:	1bdb      	subs	r3, r3, r7
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	427b      	negs	r3, r7
 80052ca:	9308      	str	r3, [sp, #32]
 80052cc:	2300      	movs	r3, #0
 80052ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80052d0:	e7c3      	b.n	800525a <_dtoa_r+0x1b2>
 80052d2:	2301      	movs	r3, #1
 80052d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052d8:	eb07 0b03 	add.w	fp, r7, r3
 80052dc:	f10b 0301 	add.w	r3, fp, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	9303      	str	r3, [sp, #12]
 80052e4:	bfb8      	it	lt
 80052e6:	2301      	movlt	r3, #1
 80052e8:	e006      	b.n	80052f8 <_dtoa_r+0x250>
 80052ea:	2301      	movs	r3, #1
 80052ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80052ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	dd28      	ble.n	8005346 <_dtoa_r+0x29e>
 80052f4:	469b      	mov	fp, r3
 80052f6:	9303      	str	r3, [sp, #12]
 80052f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80052fc:	2100      	movs	r1, #0
 80052fe:	2204      	movs	r2, #4
 8005300:	f102 0514 	add.w	r5, r2, #20
 8005304:	429d      	cmp	r5, r3
 8005306:	d926      	bls.n	8005356 <_dtoa_r+0x2ae>
 8005308:	6041      	str	r1, [r0, #4]
 800530a:	4648      	mov	r0, r9
 800530c:	f000 fd9c 	bl	8005e48 <_Balloc>
 8005310:	4682      	mov	sl, r0
 8005312:	2800      	cmp	r0, #0
 8005314:	d142      	bne.n	800539c <_dtoa_r+0x2f4>
 8005316:	4b1e      	ldr	r3, [pc, #120]	@ (8005390 <_dtoa_r+0x2e8>)
 8005318:	4602      	mov	r2, r0
 800531a:	f240 11af 	movw	r1, #431	@ 0x1af
 800531e:	e6da      	b.n	80050d6 <_dtoa_r+0x2e>
 8005320:	2300      	movs	r3, #0
 8005322:	e7e3      	b.n	80052ec <_dtoa_r+0x244>
 8005324:	2300      	movs	r3, #0
 8005326:	e7d5      	b.n	80052d4 <_dtoa_r+0x22c>
 8005328:	2401      	movs	r4, #1
 800532a:	2300      	movs	r3, #0
 800532c:	9307      	str	r3, [sp, #28]
 800532e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005330:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005334:	2200      	movs	r2, #0
 8005336:	f8cd b00c 	str.w	fp, [sp, #12]
 800533a:	2312      	movs	r3, #18
 800533c:	920c      	str	r2, [sp, #48]	@ 0x30
 800533e:	e7db      	b.n	80052f8 <_dtoa_r+0x250>
 8005340:	2301      	movs	r3, #1
 8005342:	9309      	str	r3, [sp, #36]	@ 0x24
 8005344:	e7f4      	b.n	8005330 <_dtoa_r+0x288>
 8005346:	f04f 0b01 	mov.w	fp, #1
 800534a:	f8cd b00c 	str.w	fp, [sp, #12]
 800534e:	465b      	mov	r3, fp
 8005350:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005354:	e7d0      	b.n	80052f8 <_dtoa_r+0x250>
 8005356:	3101      	adds	r1, #1
 8005358:	0052      	lsls	r2, r2, #1
 800535a:	e7d1      	b.n	8005300 <_dtoa_r+0x258>
 800535c:	f3af 8000 	nop.w
 8005360:	636f4361 	.word	0x636f4361
 8005364:	3fd287a7 	.word	0x3fd287a7
 8005368:	8b60c8b3 	.word	0x8b60c8b3
 800536c:	3fc68a28 	.word	0x3fc68a28
 8005370:	509f79fb 	.word	0x509f79fb
 8005374:	3fd34413 	.word	0x3fd34413
 8005378:	08007155 	.word	0x08007155
 800537c:	0800716c 	.word	0x0800716c
 8005380:	7ff00000 	.word	0x7ff00000
 8005384:	08007125 	.word	0x08007125
 8005388:	3ff80000 	.word	0x3ff80000
 800538c:	080072c0 	.word	0x080072c0
 8005390:	080071c4 	.word	0x080071c4
 8005394:	08007151 	.word	0x08007151
 8005398:	08007124 	.word	0x08007124
 800539c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80053a0:	6018      	str	r0, [r3, #0]
 80053a2:	9b03      	ldr	r3, [sp, #12]
 80053a4:	2b0e      	cmp	r3, #14
 80053a6:	f200 80a1 	bhi.w	80054ec <_dtoa_r+0x444>
 80053aa:	2c00      	cmp	r4, #0
 80053ac:	f000 809e 	beq.w	80054ec <_dtoa_r+0x444>
 80053b0:	2f00      	cmp	r7, #0
 80053b2:	dd33      	ble.n	800541c <_dtoa_r+0x374>
 80053b4:	4b9c      	ldr	r3, [pc, #624]	@ (8005628 <_dtoa_r+0x580>)
 80053b6:	f007 020f 	and.w	r2, r7, #15
 80053ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053be:	ed93 7b00 	vldr	d7, [r3]
 80053c2:	05f8      	lsls	r0, r7, #23
 80053c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80053c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80053cc:	d516      	bpl.n	80053fc <_dtoa_r+0x354>
 80053ce:	4b97      	ldr	r3, [pc, #604]	@ (800562c <_dtoa_r+0x584>)
 80053d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80053d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053d8:	f7fb fa40 	bl	800085c <__aeabi_ddiv>
 80053dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053e0:	f004 040f 	and.w	r4, r4, #15
 80053e4:	2603      	movs	r6, #3
 80053e6:	4d91      	ldr	r5, [pc, #580]	@ (800562c <_dtoa_r+0x584>)
 80053e8:	b954      	cbnz	r4, 8005400 <_dtoa_r+0x358>
 80053ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80053ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f2:	f7fb fa33 	bl	800085c <__aeabi_ddiv>
 80053f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053fa:	e028      	b.n	800544e <_dtoa_r+0x3a6>
 80053fc:	2602      	movs	r6, #2
 80053fe:	e7f2      	b.n	80053e6 <_dtoa_r+0x33e>
 8005400:	07e1      	lsls	r1, r4, #31
 8005402:	d508      	bpl.n	8005416 <_dtoa_r+0x36e>
 8005404:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005408:	e9d5 2300 	ldrd	r2, r3, [r5]
 800540c:	f7fb f8fc 	bl	8000608 <__aeabi_dmul>
 8005410:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005414:	3601      	adds	r6, #1
 8005416:	1064      	asrs	r4, r4, #1
 8005418:	3508      	adds	r5, #8
 800541a:	e7e5      	b.n	80053e8 <_dtoa_r+0x340>
 800541c:	f000 80af 	beq.w	800557e <_dtoa_r+0x4d6>
 8005420:	427c      	negs	r4, r7
 8005422:	4b81      	ldr	r3, [pc, #516]	@ (8005628 <_dtoa_r+0x580>)
 8005424:	4d81      	ldr	r5, [pc, #516]	@ (800562c <_dtoa_r+0x584>)
 8005426:	f004 020f 	and.w	r2, r4, #15
 800542a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005436:	f7fb f8e7 	bl	8000608 <__aeabi_dmul>
 800543a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800543e:	1124      	asrs	r4, r4, #4
 8005440:	2300      	movs	r3, #0
 8005442:	2602      	movs	r6, #2
 8005444:	2c00      	cmp	r4, #0
 8005446:	f040 808f 	bne.w	8005568 <_dtoa_r+0x4c0>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1d3      	bne.n	80053f6 <_dtoa_r+0x34e>
 800544e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005450:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8094 	beq.w	8005582 <_dtoa_r+0x4da>
 800545a:	4b75      	ldr	r3, [pc, #468]	@ (8005630 <_dtoa_r+0x588>)
 800545c:	2200      	movs	r2, #0
 800545e:	4620      	mov	r0, r4
 8005460:	4629      	mov	r1, r5
 8005462:	f7fb fb43 	bl	8000aec <__aeabi_dcmplt>
 8005466:	2800      	cmp	r0, #0
 8005468:	f000 808b 	beq.w	8005582 <_dtoa_r+0x4da>
 800546c:	9b03      	ldr	r3, [sp, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8087 	beq.w	8005582 <_dtoa_r+0x4da>
 8005474:	f1bb 0f00 	cmp.w	fp, #0
 8005478:	dd34      	ble.n	80054e4 <_dtoa_r+0x43c>
 800547a:	4620      	mov	r0, r4
 800547c:	4b6d      	ldr	r3, [pc, #436]	@ (8005634 <_dtoa_r+0x58c>)
 800547e:	2200      	movs	r2, #0
 8005480:	4629      	mov	r1, r5
 8005482:	f7fb f8c1 	bl	8000608 <__aeabi_dmul>
 8005486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800548a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800548e:	3601      	adds	r6, #1
 8005490:	465c      	mov	r4, fp
 8005492:	4630      	mov	r0, r6
 8005494:	f7fb f84e 	bl	8000534 <__aeabi_i2d>
 8005498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800549c:	f7fb f8b4 	bl	8000608 <__aeabi_dmul>
 80054a0:	4b65      	ldr	r3, [pc, #404]	@ (8005638 <_dtoa_r+0x590>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	f7fa fefa 	bl	800029c <__adddf3>
 80054a8:	4605      	mov	r5, r0
 80054aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80054ae:	2c00      	cmp	r4, #0
 80054b0:	d16a      	bne.n	8005588 <_dtoa_r+0x4e0>
 80054b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054b6:	4b61      	ldr	r3, [pc, #388]	@ (800563c <_dtoa_r+0x594>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	f7fa feed 	bl	8000298 <__aeabi_dsub>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054c6:	462a      	mov	r2, r5
 80054c8:	4633      	mov	r3, r6
 80054ca:	f7fb fb2d 	bl	8000b28 <__aeabi_dcmpgt>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f040 8298 	bne.w	8005a04 <_dtoa_r+0x95c>
 80054d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054d8:	462a      	mov	r2, r5
 80054da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80054de:	f7fb fb05 	bl	8000aec <__aeabi_dcmplt>
 80054e2:	bb38      	cbnz	r0, 8005534 <_dtoa_r+0x48c>
 80054e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80054e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80054ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f2c0 8157 	blt.w	80057a2 <_dtoa_r+0x6fa>
 80054f4:	2f0e      	cmp	r7, #14
 80054f6:	f300 8154 	bgt.w	80057a2 <_dtoa_r+0x6fa>
 80054fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005628 <_dtoa_r+0x580>)
 80054fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005500:	ed93 7b00 	vldr	d7, [r3]
 8005504:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005506:	2b00      	cmp	r3, #0
 8005508:	ed8d 7b00 	vstr	d7, [sp]
 800550c:	f280 80e5 	bge.w	80056da <_dtoa_r+0x632>
 8005510:	9b03      	ldr	r3, [sp, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f300 80e1 	bgt.w	80056da <_dtoa_r+0x632>
 8005518:	d10c      	bne.n	8005534 <_dtoa_r+0x48c>
 800551a:	4b48      	ldr	r3, [pc, #288]	@ (800563c <_dtoa_r+0x594>)
 800551c:	2200      	movs	r2, #0
 800551e:	ec51 0b17 	vmov	r0, r1, d7
 8005522:	f7fb f871 	bl	8000608 <__aeabi_dmul>
 8005526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800552a:	f7fb faf3 	bl	8000b14 <__aeabi_dcmpge>
 800552e:	2800      	cmp	r0, #0
 8005530:	f000 8266 	beq.w	8005a00 <_dtoa_r+0x958>
 8005534:	2400      	movs	r4, #0
 8005536:	4625      	mov	r5, r4
 8005538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800553a:	4656      	mov	r6, sl
 800553c:	ea6f 0803 	mvn.w	r8, r3
 8005540:	2700      	movs	r7, #0
 8005542:	4621      	mov	r1, r4
 8005544:	4648      	mov	r0, r9
 8005546:	f000 fcbf 	bl	8005ec8 <_Bfree>
 800554a:	2d00      	cmp	r5, #0
 800554c:	f000 80bd 	beq.w	80056ca <_dtoa_r+0x622>
 8005550:	b12f      	cbz	r7, 800555e <_dtoa_r+0x4b6>
 8005552:	42af      	cmp	r7, r5
 8005554:	d003      	beq.n	800555e <_dtoa_r+0x4b6>
 8005556:	4639      	mov	r1, r7
 8005558:	4648      	mov	r0, r9
 800555a:	f000 fcb5 	bl	8005ec8 <_Bfree>
 800555e:	4629      	mov	r1, r5
 8005560:	4648      	mov	r0, r9
 8005562:	f000 fcb1 	bl	8005ec8 <_Bfree>
 8005566:	e0b0      	b.n	80056ca <_dtoa_r+0x622>
 8005568:	07e2      	lsls	r2, r4, #31
 800556a:	d505      	bpl.n	8005578 <_dtoa_r+0x4d0>
 800556c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005570:	f7fb f84a 	bl	8000608 <__aeabi_dmul>
 8005574:	3601      	adds	r6, #1
 8005576:	2301      	movs	r3, #1
 8005578:	1064      	asrs	r4, r4, #1
 800557a:	3508      	adds	r5, #8
 800557c:	e762      	b.n	8005444 <_dtoa_r+0x39c>
 800557e:	2602      	movs	r6, #2
 8005580:	e765      	b.n	800544e <_dtoa_r+0x3a6>
 8005582:	9c03      	ldr	r4, [sp, #12]
 8005584:	46b8      	mov	r8, r7
 8005586:	e784      	b.n	8005492 <_dtoa_r+0x3ea>
 8005588:	4b27      	ldr	r3, [pc, #156]	@ (8005628 <_dtoa_r+0x580>)
 800558a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800558c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005590:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005594:	4454      	add	r4, sl
 8005596:	2900      	cmp	r1, #0
 8005598:	d054      	beq.n	8005644 <_dtoa_r+0x59c>
 800559a:	4929      	ldr	r1, [pc, #164]	@ (8005640 <_dtoa_r+0x598>)
 800559c:	2000      	movs	r0, #0
 800559e:	f7fb f95d 	bl	800085c <__aeabi_ddiv>
 80055a2:	4633      	mov	r3, r6
 80055a4:	462a      	mov	r2, r5
 80055a6:	f7fa fe77 	bl	8000298 <__aeabi_dsub>
 80055aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80055ae:	4656      	mov	r6, sl
 80055b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055b4:	f7fb fad8 	bl	8000b68 <__aeabi_d2iz>
 80055b8:	4605      	mov	r5, r0
 80055ba:	f7fa ffbb 	bl	8000534 <__aeabi_i2d>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055c6:	f7fa fe67 	bl	8000298 <__aeabi_dsub>
 80055ca:	3530      	adds	r5, #48	@ 0x30
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055d4:	f806 5b01 	strb.w	r5, [r6], #1
 80055d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80055dc:	f7fb fa86 	bl	8000aec <__aeabi_dcmplt>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d172      	bne.n	80056ca <_dtoa_r+0x622>
 80055e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055e8:	4911      	ldr	r1, [pc, #68]	@ (8005630 <_dtoa_r+0x588>)
 80055ea:	2000      	movs	r0, #0
 80055ec:	f7fa fe54 	bl	8000298 <__aeabi_dsub>
 80055f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80055f4:	f7fb fa7a 	bl	8000aec <__aeabi_dcmplt>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	f040 80b4 	bne.w	8005766 <_dtoa_r+0x6be>
 80055fe:	42a6      	cmp	r6, r4
 8005600:	f43f af70 	beq.w	80054e4 <_dtoa_r+0x43c>
 8005604:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005608:	4b0a      	ldr	r3, [pc, #40]	@ (8005634 <_dtoa_r+0x58c>)
 800560a:	2200      	movs	r2, #0
 800560c:	f7fa fffc 	bl	8000608 <__aeabi_dmul>
 8005610:	4b08      	ldr	r3, [pc, #32]	@ (8005634 <_dtoa_r+0x58c>)
 8005612:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005616:	2200      	movs	r2, #0
 8005618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800561c:	f7fa fff4 	bl	8000608 <__aeabi_dmul>
 8005620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005624:	e7c4      	b.n	80055b0 <_dtoa_r+0x508>
 8005626:	bf00      	nop
 8005628:	080072c0 	.word	0x080072c0
 800562c:	08007298 	.word	0x08007298
 8005630:	3ff00000 	.word	0x3ff00000
 8005634:	40240000 	.word	0x40240000
 8005638:	401c0000 	.word	0x401c0000
 800563c:	40140000 	.word	0x40140000
 8005640:	3fe00000 	.word	0x3fe00000
 8005644:	4631      	mov	r1, r6
 8005646:	4628      	mov	r0, r5
 8005648:	f7fa ffde 	bl	8000608 <__aeabi_dmul>
 800564c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005650:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005652:	4656      	mov	r6, sl
 8005654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005658:	f7fb fa86 	bl	8000b68 <__aeabi_d2iz>
 800565c:	4605      	mov	r5, r0
 800565e:	f7fa ff69 	bl	8000534 <__aeabi_i2d>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800566a:	f7fa fe15 	bl	8000298 <__aeabi_dsub>
 800566e:	3530      	adds	r5, #48	@ 0x30
 8005670:	f806 5b01 	strb.w	r5, [r6], #1
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	42a6      	cmp	r6, r4
 800567a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	d124      	bne.n	80056ce <_dtoa_r+0x626>
 8005684:	4baf      	ldr	r3, [pc, #700]	@ (8005944 <_dtoa_r+0x89c>)
 8005686:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800568a:	f7fa fe07 	bl	800029c <__adddf3>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005696:	f7fb fa47 	bl	8000b28 <__aeabi_dcmpgt>
 800569a:	2800      	cmp	r0, #0
 800569c:	d163      	bne.n	8005766 <_dtoa_r+0x6be>
 800569e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80056a2:	49a8      	ldr	r1, [pc, #672]	@ (8005944 <_dtoa_r+0x89c>)
 80056a4:	2000      	movs	r0, #0
 80056a6:	f7fa fdf7 	bl	8000298 <__aeabi_dsub>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056b2:	f7fb fa1b 	bl	8000aec <__aeabi_dcmplt>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	f43f af14 	beq.w	80054e4 <_dtoa_r+0x43c>
 80056bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80056be:	1e73      	subs	r3, r6, #1
 80056c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80056c6:	2b30      	cmp	r3, #48	@ 0x30
 80056c8:	d0f8      	beq.n	80056bc <_dtoa_r+0x614>
 80056ca:	4647      	mov	r7, r8
 80056cc:	e03b      	b.n	8005746 <_dtoa_r+0x69e>
 80056ce:	4b9e      	ldr	r3, [pc, #632]	@ (8005948 <_dtoa_r+0x8a0>)
 80056d0:	f7fa ff9a 	bl	8000608 <__aeabi_dmul>
 80056d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056d8:	e7bc      	b.n	8005654 <_dtoa_r+0x5ac>
 80056da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80056de:	4656      	mov	r6, sl
 80056e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056e4:	4620      	mov	r0, r4
 80056e6:	4629      	mov	r1, r5
 80056e8:	f7fb f8b8 	bl	800085c <__aeabi_ddiv>
 80056ec:	f7fb fa3c 	bl	8000b68 <__aeabi_d2iz>
 80056f0:	4680      	mov	r8, r0
 80056f2:	f7fa ff1f 	bl	8000534 <__aeabi_i2d>
 80056f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056fa:	f7fa ff85 	bl	8000608 <__aeabi_dmul>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4620      	mov	r0, r4
 8005704:	4629      	mov	r1, r5
 8005706:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800570a:	f7fa fdc5 	bl	8000298 <__aeabi_dsub>
 800570e:	f806 4b01 	strb.w	r4, [r6], #1
 8005712:	9d03      	ldr	r5, [sp, #12]
 8005714:	eba6 040a 	sub.w	r4, r6, sl
 8005718:	42a5      	cmp	r5, r4
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	d133      	bne.n	8005788 <_dtoa_r+0x6e0>
 8005720:	f7fa fdbc 	bl	800029c <__adddf3>
 8005724:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005728:	4604      	mov	r4, r0
 800572a:	460d      	mov	r5, r1
 800572c:	f7fb f9fc 	bl	8000b28 <__aeabi_dcmpgt>
 8005730:	b9c0      	cbnz	r0, 8005764 <_dtoa_r+0x6bc>
 8005732:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005736:	4620      	mov	r0, r4
 8005738:	4629      	mov	r1, r5
 800573a:	f7fb f9cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800573e:	b110      	cbz	r0, 8005746 <_dtoa_r+0x69e>
 8005740:	f018 0f01 	tst.w	r8, #1
 8005744:	d10e      	bne.n	8005764 <_dtoa_r+0x6bc>
 8005746:	9902      	ldr	r1, [sp, #8]
 8005748:	4648      	mov	r0, r9
 800574a:	f000 fbbd 	bl	8005ec8 <_Bfree>
 800574e:	2300      	movs	r3, #0
 8005750:	7033      	strb	r3, [r6, #0]
 8005752:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005754:	3701      	adds	r7, #1
 8005756:	601f      	str	r7, [r3, #0]
 8005758:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 824b 	beq.w	8005bf6 <_dtoa_r+0xb4e>
 8005760:	601e      	str	r6, [r3, #0]
 8005762:	e248      	b.n	8005bf6 <_dtoa_r+0xb4e>
 8005764:	46b8      	mov	r8, r7
 8005766:	4633      	mov	r3, r6
 8005768:	461e      	mov	r6, r3
 800576a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800576e:	2a39      	cmp	r2, #57	@ 0x39
 8005770:	d106      	bne.n	8005780 <_dtoa_r+0x6d8>
 8005772:	459a      	cmp	sl, r3
 8005774:	d1f8      	bne.n	8005768 <_dtoa_r+0x6c0>
 8005776:	2230      	movs	r2, #48	@ 0x30
 8005778:	f108 0801 	add.w	r8, r8, #1
 800577c:	f88a 2000 	strb.w	r2, [sl]
 8005780:	781a      	ldrb	r2, [r3, #0]
 8005782:	3201      	adds	r2, #1
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	e7a0      	b.n	80056ca <_dtoa_r+0x622>
 8005788:	4b6f      	ldr	r3, [pc, #444]	@ (8005948 <_dtoa_r+0x8a0>)
 800578a:	2200      	movs	r2, #0
 800578c:	f7fa ff3c 	bl	8000608 <__aeabi_dmul>
 8005790:	2200      	movs	r2, #0
 8005792:	2300      	movs	r3, #0
 8005794:	4604      	mov	r4, r0
 8005796:	460d      	mov	r5, r1
 8005798:	f7fb f99e 	bl	8000ad8 <__aeabi_dcmpeq>
 800579c:	2800      	cmp	r0, #0
 800579e:	d09f      	beq.n	80056e0 <_dtoa_r+0x638>
 80057a0:	e7d1      	b.n	8005746 <_dtoa_r+0x69e>
 80057a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057a4:	2a00      	cmp	r2, #0
 80057a6:	f000 80ea 	beq.w	800597e <_dtoa_r+0x8d6>
 80057aa:	9a07      	ldr	r2, [sp, #28]
 80057ac:	2a01      	cmp	r2, #1
 80057ae:	f300 80cd 	bgt.w	800594c <_dtoa_r+0x8a4>
 80057b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80057b4:	2a00      	cmp	r2, #0
 80057b6:	f000 80c1 	beq.w	800593c <_dtoa_r+0x894>
 80057ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80057be:	9c08      	ldr	r4, [sp, #32]
 80057c0:	9e00      	ldr	r6, [sp, #0]
 80057c2:	9a00      	ldr	r2, [sp, #0]
 80057c4:	441a      	add	r2, r3
 80057c6:	9200      	str	r2, [sp, #0]
 80057c8:	9a06      	ldr	r2, [sp, #24]
 80057ca:	2101      	movs	r1, #1
 80057cc:	441a      	add	r2, r3
 80057ce:	4648      	mov	r0, r9
 80057d0:	9206      	str	r2, [sp, #24]
 80057d2:	f000 fc2d 	bl	8006030 <__i2b>
 80057d6:	4605      	mov	r5, r0
 80057d8:	b166      	cbz	r6, 80057f4 <_dtoa_r+0x74c>
 80057da:	9b06      	ldr	r3, [sp, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dd09      	ble.n	80057f4 <_dtoa_r+0x74c>
 80057e0:	42b3      	cmp	r3, r6
 80057e2:	9a00      	ldr	r2, [sp, #0]
 80057e4:	bfa8      	it	ge
 80057e6:	4633      	movge	r3, r6
 80057e8:	1ad2      	subs	r2, r2, r3
 80057ea:	9200      	str	r2, [sp, #0]
 80057ec:	9a06      	ldr	r2, [sp, #24]
 80057ee:	1af6      	subs	r6, r6, r3
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	9306      	str	r3, [sp, #24]
 80057f4:	9b08      	ldr	r3, [sp, #32]
 80057f6:	b30b      	cbz	r3, 800583c <_dtoa_r+0x794>
 80057f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 80c6 	beq.w	800598c <_dtoa_r+0x8e4>
 8005800:	2c00      	cmp	r4, #0
 8005802:	f000 80c0 	beq.w	8005986 <_dtoa_r+0x8de>
 8005806:	4629      	mov	r1, r5
 8005808:	4622      	mov	r2, r4
 800580a:	4648      	mov	r0, r9
 800580c:	f000 fcc8 	bl	80061a0 <__pow5mult>
 8005810:	9a02      	ldr	r2, [sp, #8]
 8005812:	4601      	mov	r1, r0
 8005814:	4605      	mov	r5, r0
 8005816:	4648      	mov	r0, r9
 8005818:	f000 fc20 	bl	800605c <__multiply>
 800581c:	9902      	ldr	r1, [sp, #8]
 800581e:	4680      	mov	r8, r0
 8005820:	4648      	mov	r0, r9
 8005822:	f000 fb51 	bl	8005ec8 <_Bfree>
 8005826:	9b08      	ldr	r3, [sp, #32]
 8005828:	1b1b      	subs	r3, r3, r4
 800582a:	9308      	str	r3, [sp, #32]
 800582c:	f000 80b1 	beq.w	8005992 <_dtoa_r+0x8ea>
 8005830:	9a08      	ldr	r2, [sp, #32]
 8005832:	4641      	mov	r1, r8
 8005834:	4648      	mov	r0, r9
 8005836:	f000 fcb3 	bl	80061a0 <__pow5mult>
 800583a:	9002      	str	r0, [sp, #8]
 800583c:	2101      	movs	r1, #1
 800583e:	4648      	mov	r0, r9
 8005840:	f000 fbf6 	bl	8006030 <__i2b>
 8005844:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005846:	4604      	mov	r4, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 81d8 	beq.w	8005bfe <_dtoa_r+0xb56>
 800584e:	461a      	mov	r2, r3
 8005850:	4601      	mov	r1, r0
 8005852:	4648      	mov	r0, r9
 8005854:	f000 fca4 	bl	80061a0 <__pow5mult>
 8005858:	9b07      	ldr	r3, [sp, #28]
 800585a:	2b01      	cmp	r3, #1
 800585c:	4604      	mov	r4, r0
 800585e:	f300 809f 	bgt.w	80059a0 <_dtoa_r+0x8f8>
 8005862:	9b04      	ldr	r3, [sp, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 8097 	bne.w	8005998 <_dtoa_r+0x8f0>
 800586a:	9b05      	ldr	r3, [sp, #20]
 800586c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005870:	2b00      	cmp	r3, #0
 8005872:	f040 8093 	bne.w	800599c <_dtoa_r+0x8f4>
 8005876:	9b05      	ldr	r3, [sp, #20]
 8005878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800587c:	0d1b      	lsrs	r3, r3, #20
 800587e:	051b      	lsls	r3, r3, #20
 8005880:	b133      	cbz	r3, 8005890 <_dtoa_r+0x7e8>
 8005882:	9b00      	ldr	r3, [sp, #0]
 8005884:	3301      	adds	r3, #1
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	9b06      	ldr	r3, [sp, #24]
 800588a:	3301      	adds	r3, #1
 800588c:	9306      	str	r3, [sp, #24]
 800588e:	2301      	movs	r3, #1
 8005890:	9308      	str	r3, [sp, #32]
 8005892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 81b8 	beq.w	8005c0a <_dtoa_r+0xb62>
 800589a:	6923      	ldr	r3, [r4, #16]
 800589c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058a0:	6918      	ldr	r0, [r3, #16]
 80058a2:	f000 fb79 	bl	8005f98 <__hi0bits>
 80058a6:	f1c0 0020 	rsb	r0, r0, #32
 80058aa:	9b06      	ldr	r3, [sp, #24]
 80058ac:	4418      	add	r0, r3
 80058ae:	f010 001f 	ands.w	r0, r0, #31
 80058b2:	f000 8082 	beq.w	80059ba <_dtoa_r+0x912>
 80058b6:	f1c0 0320 	rsb	r3, r0, #32
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	dd73      	ble.n	80059a6 <_dtoa_r+0x8fe>
 80058be:	9b00      	ldr	r3, [sp, #0]
 80058c0:	f1c0 001c 	rsb	r0, r0, #28
 80058c4:	4403      	add	r3, r0
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	9b06      	ldr	r3, [sp, #24]
 80058ca:	4403      	add	r3, r0
 80058cc:	4406      	add	r6, r0
 80058ce:	9306      	str	r3, [sp, #24]
 80058d0:	9b00      	ldr	r3, [sp, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	dd05      	ble.n	80058e2 <_dtoa_r+0x83a>
 80058d6:	9902      	ldr	r1, [sp, #8]
 80058d8:	461a      	mov	r2, r3
 80058da:	4648      	mov	r0, r9
 80058dc:	f000 fcba 	bl	8006254 <__lshift>
 80058e0:	9002      	str	r0, [sp, #8]
 80058e2:	9b06      	ldr	r3, [sp, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	dd05      	ble.n	80058f4 <_dtoa_r+0x84c>
 80058e8:	4621      	mov	r1, r4
 80058ea:	461a      	mov	r2, r3
 80058ec:	4648      	mov	r0, r9
 80058ee:	f000 fcb1 	bl	8006254 <__lshift>
 80058f2:	4604      	mov	r4, r0
 80058f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d061      	beq.n	80059be <_dtoa_r+0x916>
 80058fa:	9802      	ldr	r0, [sp, #8]
 80058fc:	4621      	mov	r1, r4
 80058fe:	f000 fd15 	bl	800632c <__mcmp>
 8005902:	2800      	cmp	r0, #0
 8005904:	da5b      	bge.n	80059be <_dtoa_r+0x916>
 8005906:	2300      	movs	r3, #0
 8005908:	9902      	ldr	r1, [sp, #8]
 800590a:	220a      	movs	r2, #10
 800590c:	4648      	mov	r0, r9
 800590e:	f000 fafd 	bl	8005f0c <__multadd>
 8005912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005914:	9002      	str	r0, [sp, #8]
 8005916:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8177 	beq.w	8005c0e <_dtoa_r+0xb66>
 8005920:	4629      	mov	r1, r5
 8005922:	2300      	movs	r3, #0
 8005924:	220a      	movs	r2, #10
 8005926:	4648      	mov	r0, r9
 8005928:	f000 faf0 	bl	8005f0c <__multadd>
 800592c:	f1bb 0f00 	cmp.w	fp, #0
 8005930:	4605      	mov	r5, r0
 8005932:	dc6f      	bgt.n	8005a14 <_dtoa_r+0x96c>
 8005934:	9b07      	ldr	r3, [sp, #28]
 8005936:	2b02      	cmp	r3, #2
 8005938:	dc49      	bgt.n	80059ce <_dtoa_r+0x926>
 800593a:	e06b      	b.n	8005a14 <_dtoa_r+0x96c>
 800593c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800593e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005942:	e73c      	b.n	80057be <_dtoa_r+0x716>
 8005944:	3fe00000 	.word	0x3fe00000
 8005948:	40240000 	.word	0x40240000
 800594c:	9b03      	ldr	r3, [sp, #12]
 800594e:	1e5c      	subs	r4, r3, #1
 8005950:	9b08      	ldr	r3, [sp, #32]
 8005952:	42a3      	cmp	r3, r4
 8005954:	db09      	blt.n	800596a <_dtoa_r+0x8c2>
 8005956:	1b1c      	subs	r4, r3, r4
 8005958:	9b03      	ldr	r3, [sp, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f6bf af30 	bge.w	80057c0 <_dtoa_r+0x718>
 8005960:	9b00      	ldr	r3, [sp, #0]
 8005962:	9a03      	ldr	r2, [sp, #12]
 8005964:	1a9e      	subs	r6, r3, r2
 8005966:	2300      	movs	r3, #0
 8005968:	e72b      	b.n	80057c2 <_dtoa_r+0x71a>
 800596a:	9b08      	ldr	r3, [sp, #32]
 800596c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800596e:	9408      	str	r4, [sp, #32]
 8005970:	1ae3      	subs	r3, r4, r3
 8005972:	441a      	add	r2, r3
 8005974:	9e00      	ldr	r6, [sp, #0]
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	920d      	str	r2, [sp, #52]	@ 0x34
 800597a:	2400      	movs	r4, #0
 800597c:	e721      	b.n	80057c2 <_dtoa_r+0x71a>
 800597e:	9c08      	ldr	r4, [sp, #32]
 8005980:	9e00      	ldr	r6, [sp, #0]
 8005982:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005984:	e728      	b.n	80057d8 <_dtoa_r+0x730>
 8005986:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800598a:	e751      	b.n	8005830 <_dtoa_r+0x788>
 800598c:	9a08      	ldr	r2, [sp, #32]
 800598e:	9902      	ldr	r1, [sp, #8]
 8005990:	e750      	b.n	8005834 <_dtoa_r+0x78c>
 8005992:	f8cd 8008 	str.w	r8, [sp, #8]
 8005996:	e751      	b.n	800583c <_dtoa_r+0x794>
 8005998:	2300      	movs	r3, #0
 800599a:	e779      	b.n	8005890 <_dtoa_r+0x7e8>
 800599c:	9b04      	ldr	r3, [sp, #16]
 800599e:	e777      	b.n	8005890 <_dtoa_r+0x7e8>
 80059a0:	2300      	movs	r3, #0
 80059a2:	9308      	str	r3, [sp, #32]
 80059a4:	e779      	b.n	800589a <_dtoa_r+0x7f2>
 80059a6:	d093      	beq.n	80058d0 <_dtoa_r+0x828>
 80059a8:	9a00      	ldr	r2, [sp, #0]
 80059aa:	331c      	adds	r3, #28
 80059ac:	441a      	add	r2, r3
 80059ae:	9200      	str	r2, [sp, #0]
 80059b0:	9a06      	ldr	r2, [sp, #24]
 80059b2:	441a      	add	r2, r3
 80059b4:	441e      	add	r6, r3
 80059b6:	9206      	str	r2, [sp, #24]
 80059b8:	e78a      	b.n	80058d0 <_dtoa_r+0x828>
 80059ba:	4603      	mov	r3, r0
 80059bc:	e7f4      	b.n	80059a8 <_dtoa_r+0x900>
 80059be:	9b03      	ldr	r3, [sp, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	46b8      	mov	r8, r7
 80059c4:	dc20      	bgt.n	8005a08 <_dtoa_r+0x960>
 80059c6:	469b      	mov	fp, r3
 80059c8:	9b07      	ldr	r3, [sp, #28]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	dd1e      	ble.n	8005a0c <_dtoa_r+0x964>
 80059ce:	f1bb 0f00 	cmp.w	fp, #0
 80059d2:	f47f adb1 	bne.w	8005538 <_dtoa_r+0x490>
 80059d6:	4621      	mov	r1, r4
 80059d8:	465b      	mov	r3, fp
 80059da:	2205      	movs	r2, #5
 80059dc:	4648      	mov	r0, r9
 80059de:	f000 fa95 	bl	8005f0c <__multadd>
 80059e2:	4601      	mov	r1, r0
 80059e4:	4604      	mov	r4, r0
 80059e6:	9802      	ldr	r0, [sp, #8]
 80059e8:	f000 fca0 	bl	800632c <__mcmp>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	f77f ada3 	ble.w	8005538 <_dtoa_r+0x490>
 80059f2:	4656      	mov	r6, sl
 80059f4:	2331      	movs	r3, #49	@ 0x31
 80059f6:	f806 3b01 	strb.w	r3, [r6], #1
 80059fa:	f108 0801 	add.w	r8, r8, #1
 80059fe:	e59f      	b.n	8005540 <_dtoa_r+0x498>
 8005a00:	9c03      	ldr	r4, [sp, #12]
 8005a02:	46b8      	mov	r8, r7
 8005a04:	4625      	mov	r5, r4
 8005a06:	e7f4      	b.n	80059f2 <_dtoa_r+0x94a>
 8005a08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8101 	beq.w	8005c16 <_dtoa_r+0xb6e>
 8005a14:	2e00      	cmp	r6, #0
 8005a16:	dd05      	ble.n	8005a24 <_dtoa_r+0x97c>
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4632      	mov	r2, r6
 8005a1c:	4648      	mov	r0, r9
 8005a1e:	f000 fc19 	bl	8006254 <__lshift>
 8005a22:	4605      	mov	r5, r0
 8005a24:	9b08      	ldr	r3, [sp, #32]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d05c      	beq.n	8005ae4 <_dtoa_r+0xa3c>
 8005a2a:	6869      	ldr	r1, [r5, #4]
 8005a2c:	4648      	mov	r0, r9
 8005a2e:	f000 fa0b 	bl	8005e48 <_Balloc>
 8005a32:	4606      	mov	r6, r0
 8005a34:	b928      	cbnz	r0, 8005a42 <_dtoa_r+0x99a>
 8005a36:	4b82      	ldr	r3, [pc, #520]	@ (8005c40 <_dtoa_r+0xb98>)
 8005a38:	4602      	mov	r2, r0
 8005a3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005a3e:	f7ff bb4a 	b.w	80050d6 <_dtoa_r+0x2e>
 8005a42:	692a      	ldr	r2, [r5, #16]
 8005a44:	3202      	adds	r2, #2
 8005a46:	0092      	lsls	r2, r2, #2
 8005a48:	f105 010c 	add.w	r1, r5, #12
 8005a4c:	300c      	adds	r0, #12
 8005a4e:	f000 ffa3 	bl	8006998 <memcpy>
 8005a52:	2201      	movs	r2, #1
 8005a54:	4631      	mov	r1, r6
 8005a56:	4648      	mov	r0, r9
 8005a58:	f000 fbfc 	bl	8006254 <__lshift>
 8005a5c:	f10a 0301 	add.w	r3, sl, #1
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	eb0a 030b 	add.w	r3, sl, fp
 8005a66:	9308      	str	r3, [sp, #32]
 8005a68:	9b04      	ldr	r3, [sp, #16]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	462f      	mov	r7, r5
 8005a70:	9306      	str	r3, [sp, #24]
 8005a72:	4605      	mov	r5, r0
 8005a74:	9b00      	ldr	r3, [sp, #0]
 8005a76:	9802      	ldr	r0, [sp, #8]
 8005a78:	4621      	mov	r1, r4
 8005a7a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8005a7e:	f7ff fa88 	bl	8004f92 <quorem>
 8005a82:	4603      	mov	r3, r0
 8005a84:	3330      	adds	r3, #48	@ 0x30
 8005a86:	9003      	str	r0, [sp, #12]
 8005a88:	4639      	mov	r1, r7
 8005a8a:	9802      	ldr	r0, [sp, #8]
 8005a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a8e:	f000 fc4d 	bl	800632c <__mcmp>
 8005a92:	462a      	mov	r2, r5
 8005a94:	9004      	str	r0, [sp, #16]
 8005a96:	4621      	mov	r1, r4
 8005a98:	4648      	mov	r0, r9
 8005a9a:	f000 fc63 	bl	8006364 <__mdiff>
 8005a9e:	68c2      	ldr	r2, [r0, #12]
 8005aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	bb02      	cbnz	r2, 8005ae8 <_dtoa_r+0xa40>
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	9802      	ldr	r0, [sp, #8]
 8005aaa:	f000 fc3f 	bl	800632c <__mcmp>
 8005aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4648      	mov	r0, r9
 8005ab6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aba:	f000 fa05 	bl	8005ec8 <_Bfree>
 8005abe:	9b07      	ldr	r3, [sp, #28]
 8005ac0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ac2:	9e00      	ldr	r6, [sp, #0]
 8005ac4:	ea42 0103 	orr.w	r1, r2, r3
 8005ac8:	9b06      	ldr	r3, [sp, #24]
 8005aca:	4319      	orrs	r1, r3
 8005acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ace:	d10d      	bne.n	8005aec <_dtoa_r+0xa44>
 8005ad0:	2b39      	cmp	r3, #57	@ 0x39
 8005ad2:	d027      	beq.n	8005b24 <_dtoa_r+0xa7c>
 8005ad4:	9a04      	ldr	r2, [sp, #16]
 8005ad6:	2a00      	cmp	r2, #0
 8005ad8:	dd01      	ble.n	8005ade <_dtoa_r+0xa36>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	3331      	adds	r3, #49	@ 0x31
 8005ade:	f88b 3000 	strb.w	r3, [fp]
 8005ae2:	e52e      	b.n	8005542 <_dtoa_r+0x49a>
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	e7b9      	b.n	8005a5c <_dtoa_r+0x9b4>
 8005ae8:	2201      	movs	r2, #1
 8005aea:	e7e2      	b.n	8005ab2 <_dtoa_r+0xa0a>
 8005aec:	9904      	ldr	r1, [sp, #16]
 8005aee:	2900      	cmp	r1, #0
 8005af0:	db04      	blt.n	8005afc <_dtoa_r+0xa54>
 8005af2:	9807      	ldr	r0, [sp, #28]
 8005af4:	4301      	orrs	r1, r0
 8005af6:	9806      	ldr	r0, [sp, #24]
 8005af8:	4301      	orrs	r1, r0
 8005afa:	d120      	bne.n	8005b3e <_dtoa_r+0xa96>
 8005afc:	2a00      	cmp	r2, #0
 8005afe:	ddee      	ble.n	8005ade <_dtoa_r+0xa36>
 8005b00:	9902      	ldr	r1, [sp, #8]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	2201      	movs	r2, #1
 8005b06:	4648      	mov	r0, r9
 8005b08:	f000 fba4 	bl	8006254 <__lshift>
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	9002      	str	r0, [sp, #8]
 8005b10:	f000 fc0c 	bl	800632c <__mcmp>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	9b00      	ldr	r3, [sp, #0]
 8005b18:	dc02      	bgt.n	8005b20 <_dtoa_r+0xa78>
 8005b1a:	d1e0      	bne.n	8005ade <_dtoa_r+0xa36>
 8005b1c:	07da      	lsls	r2, r3, #31
 8005b1e:	d5de      	bpl.n	8005ade <_dtoa_r+0xa36>
 8005b20:	2b39      	cmp	r3, #57	@ 0x39
 8005b22:	d1da      	bne.n	8005ada <_dtoa_r+0xa32>
 8005b24:	2339      	movs	r3, #57	@ 0x39
 8005b26:	f88b 3000 	strb.w	r3, [fp]
 8005b2a:	4633      	mov	r3, r6
 8005b2c:	461e      	mov	r6, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005b34:	2a39      	cmp	r2, #57	@ 0x39
 8005b36:	d04e      	beq.n	8005bd6 <_dtoa_r+0xb2e>
 8005b38:	3201      	adds	r2, #1
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	e501      	b.n	8005542 <_dtoa_r+0x49a>
 8005b3e:	2a00      	cmp	r2, #0
 8005b40:	dd03      	ble.n	8005b4a <_dtoa_r+0xaa2>
 8005b42:	2b39      	cmp	r3, #57	@ 0x39
 8005b44:	d0ee      	beq.n	8005b24 <_dtoa_r+0xa7c>
 8005b46:	3301      	adds	r3, #1
 8005b48:	e7c9      	b.n	8005ade <_dtoa_r+0xa36>
 8005b4a:	9a00      	ldr	r2, [sp, #0]
 8005b4c:	9908      	ldr	r1, [sp, #32]
 8005b4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b52:	428a      	cmp	r2, r1
 8005b54:	d028      	beq.n	8005ba8 <_dtoa_r+0xb00>
 8005b56:	9902      	ldr	r1, [sp, #8]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	220a      	movs	r2, #10
 8005b5c:	4648      	mov	r0, r9
 8005b5e:	f000 f9d5 	bl	8005f0c <__multadd>
 8005b62:	42af      	cmp	r7, r5
 8005b64:	9002      	str	r0, [sp, #8]
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	f04f 020a 	mov.w	r2, #10
 8005b6e:	4639      	mov	r1, r7
 8005b70:	4648      	mov	r0, r9
 8005b72:	d107      	bne.n	8005b84 <_dtoa_r+0xadc>
 8005b74:	f000 f9ca 	bl	8005f0c <__multadd>
 8005b78:	4607      	mov	r7, r0
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	9b00      	ldr	r3, [sp, #0]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	e777      	b.n	8005a74 <_dtoa_r+0x9cc>
 8005b84:	f000 f9c2 	bl	8005f0c <__multadd>
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4607      	mov	r7, r0
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	220a      	movs	r2, #10
 8005b90:	4648      	mov	r0, r9
 8005b92:	f000 f9bb 	bl	8005f0c <__multadd>
 8005b96:	4605      	mov	r5, r0
 8005b98:	e7f0      	b.n	8005b7c <_dtoa_r+0xad4>
 8005b9a:	f1bb 0f00 	cmp.w	fp, #0
 8005b9e:	bfcc      	ite	gt
 8005ba0:	465e      	movgt	r6, fp
 8005ba2:	2601      	movle	r6, #1
 8005ba4:	4456      	add	r6, sl
 8005ba6:	2700      	movs	r7, #0
 8005ba8:	9902      	ldr	r1, [sp, #8]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2201      	movs	r2, #1
 8005bae:	4648      	mov	r0, r9
 8005bb0:	f000 fb50 	bl	8006254 <__lshift>
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	9002      	str	r0, [sp, #8]
 8005bb8:	f000 fbb8 	bl	800632c <__mcmp>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	dcb4      	bgt.n	8005b2a <_dtoa_r+0xa82>
 8005bc0:	d102      	bne.n	8005bc8 <_dtoa_r+0xb20>
 8005bc2:	9b00      	ldr	r3, [sp, #0]
 8005bc4:	07db      	lsls	r3, r3, #31
 8005bc6:	d4b0      	bmi.n	8005b2a <_dtoa_r+0xa82>
 8005bc8:	4633      	mov	r3, r6
 8005bca:	461e      	mov	r6, r3
 8005bcc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bd0:	2a30      	cmp	r2, #48	@ 0x30
 8005bd2:	d0fa      	beq.n	8005bca <_dtoa_r+0xb22>
 8005bd4:	e4b5      	b.n	8005542 <_dtoa_r+0x49a>
 8005bd6:	459a      	cmp	sl, r3
 8005bd8:	d1a8      	bne.n	8005b2c <_dtoa_r+0xa84>
 8005bda:	2331      	movs	r3, #49	@ 0x31
 8005bdc:	f108 0801 	add.w	r8, r8, #1
 8005be0:	f88a 3000 	strb.w	r3, [sl]
 8005be4:	e4ad      	b.n	8005542 <_dtoa_r+0x49a>
 8005be6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005be8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005c44 <_dtoa_r+0xb9c>
 8005bec:	b11b      	cbz	r3, 8005bf6 <_dtoa_r+0xb4e>
 8005bee:	f10a 0308 	add.w	r3, sl, #8
 8005bf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	4650      	mov	r0, sl
 8005bf8:	b017      	add	sp, #92	@ 0x5c
 8005bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bfe:	9b07      	ldr	r3, [sp, #28]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	f77f ae2e 	ble.w	8005862 <_dtoa_r+0x7ba>
 8005c06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c08:	9308      	str	r3, [sp, #32]
 8005c0a:	2001      	movs	r0, #1
 8005c0c:	e64d      	b.n	80058aa <_dtoa_r+0x802>
 8005c0e:	f1bb 0f00 	cmp.w	fp, #0
 8005c12:	f77f aed9 	ble.w	80059c8 <_dtoa_r+0x920>
 8005c16:	4656      	mov	r6, sl
 8005c18:	9802      	ldr	r0, [sp, #8]
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	f7ff f9b9 	bl	8004f92 <quorem>
 8005c20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005c24:	f806 3b01 	strb.w	r3, [r6], #1
 8005c28:	eba6 020a 	sub.w	r2, r6, sl
 8005c2c:	4593      	cmp	fp, r2
 8005c2e:	ddb4      	ble.n	8005b9a <_dtoa_r+0xaf2>
 8005c30:	9902      	ldr	r1, [sp, #8]
 8005c32:	2300      	movs	r3, #0
 8005c34:	220a      	movs	r2, #10
 8005c36:	4648      	mov	r0, r9
 8005c38:	f000 f968 	bl	8005f0c <__multadd>
 8005c3c:	9002      	str	r0, [sp, #8]
 8005c3e:	e7eb      	b.n	8005c18 <_dtoa_r+0xb70>
 8005c40:	080071c4 	.word	0x080071c4
 8005c44:	08007148 	.word	0x08007148

08005c48 <_free_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	2900      	cmp	r1, #0
 8005c4e:	d041      	beq.n	8005cd4 <_free_r+0x8c>
 8005c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c54:	1f0c      	subs	r4, r1, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bfb8      	it	lt
 8005c5a:	18e4      	addlt	r4, r4, r3
 8005c5c:	f000 f8e8 	bl	8005e30 <__malloc_lock>
 8005c60:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd8 <_free_r+0x90>)
 8005c62:	6813      	ldr	r3, [r2, #0]
 8005c64:	b933      	cbnz	r3, 8005c74 <_free_r+0x2c>
 8005c66:	6063      	str	r3, [r4, #4]
 8005c68:	6014      	str	r4, [r2, #0]
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c70:	f000 b8e4 	b.w	8005e3c <__malloc_unlock>
 8005c74:	42a3      	cmp	r3, r4
 8005c76:	d908      	bls.n	8005c8a <_free_r+0x42>
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	1821      	adds	r1, r4, r0
 8005c7c:	428b      	cmp	r3, r1
 8005c7e:	bf01      	itttt	eq
 8005c80:	6819      	ldreq	r1, [r3, #0]
 8005c82:	685b      	ldreq	r3, [r3, #4]
 8005c84:	1809      	addeq	r1, r1, r0
 8005c86:	6021      	streq	r1, [r4, #0]
 8005c88:	e7ed      	b.n	8005c66 <_free_r+0x1e>
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	b10b      	cbz	r3, 8005c94 <_free_r+0x4c>
 8005c90:	42a3      	cmp	r3, r4
 8005c92:	d9fa      	bls.n	8005c8a <_free_r+0x42>
 8005c94:	6811      	ldr	r1, [r2, #0]
 8005c96:	1850      	adds	r0, r2, r1
 8005c98:	42a0      	cmp	r0, r4
 8005c9a:	d10b      	bne.n	8005cb4 <_free_r+0x6c>
 8005c9c:	6820      	ldr	r0, [r4, #0]
 8005c9e:	4401      	add	r1, r0
 8005ca0:	1850      	adds	r0, r2, r1
 8005ca2:	4283      	cmp	r3, r0
 8005ca4:	6011      	str	r1, [r2, #0]
 8005ca6:	d1e0      	bne.n	8005c6a <_free_r+0x22>
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	6053      	str	r3, [r2, #4]
 8005cae:	4408      	add	r0, r1
 8005cb0:	6010      	str	r0, [r2, #0]
 8005cb2:	e7da      	b.n	8005c6a <_free_r+0x22>
 8005cb4:	d902      	bls.n	8005cbc <_free_r+0x74>
 8005cb6:	230c      	movs	r3, #12
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	e7d6      	b.n	8005c6a <_free_r+0x22>
 8005cbc:	6820      	ldr	r0, [r4, #0]
 8005cbe:	1821      	adds	r1, r4, r0
 8005cc0:	428b      	cmp	r3, r1
 8005cc2:	bf04      	itt	eq
 8005cc4:	6819      	ldreq	r1, [r3, #0]
 8005cc6:	685b      	ldreq	r3, [r3, #4]
 8005cc8:	6063      	str	r3, [r4, #4]
 8005cca:	bf04      	itt	eq
 8005ccc:	1809      	addeq	r1, r1, r0
 8005cce:	6021      	streq	r1, [r4, #0]
 8005cd0:	6054      	str	r4, [r2, #4]
 8005cd2:	e7ca      	b.n	8005c6a <_free_r+0x22>
 8005cd4:	bd38      	pop	{r3, r4, r5, pc}
 8005cd6:	bf00      	nop
 8005cd8:	200003dc 	.word	0x200003dc

08005cdc <malloc>:
 8005cdc:	4b02      	ldr	r3, [pc, #8]	@ (8005ce8 <malloc+0xc>)
 8005cde:	4601      	mov	r1, r0
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	f000 b825 	b.w	8005d30 <_malloc_r>
 8005ce6:	bf00      	nop
 8005ce8:	20000018 	.word	0x20000018

08005cec <sbrk_aligned>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	4e0f      	ldr	r6, [pc, #60]	@ (8005d2c <sbrk_aligned+0x40>)
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	6831      	ldr	r1, [r6, #0]
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	b911      	cbnz	r1, 8005cfe <sbrk_aligned+0x12>
 8005cf8:	f000 fe3e 	bl	8006978 <_sbrk_r>
 8005cfc:	6030      	str	r0, [r6, #0]
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 fe39 	bl	8006978 <_sbrk_r>
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	d103      	bne.n	8005d12 <sbrk_aligned+0x26>
 8005d0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005d0e:	4620      	mov	r0, r4
 8005d10:	bd70      	pop	{r4, r5, r6, pc}
 8005d12:	1cc4      	adds	r4, r0, #3
 8005d14:	f024 0403 	bic.w	r4, r4, #3
 8005d18:	42a0      	cmp	r0, r4
 8005d1a:	d0f8      	beq.n	8005d0e <sbrk_aligned+0x22>
 8005d1c:	1a21      	subs	r1, r4, r0
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 fe2a 	bl	8006978 <_sbrk_r>
 8005d24:	3001      	adds	r0, #1
 8005d26:	d1f2      	bne.n	8005d0e <sbrk_aligned+0x22>
 8005d28:	e7ef      	b.n	8005d0a <sbrk_aligned+0x1e>
 8005d2a:	bf00      	nop
 8005d2c:	200003d8 	.word	0x200003d8

08005d30 <_malloc_r>:
 8005d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d34:	1ccd      	adds	r5, r1, #3
 8005d36:	f025 0503 	bic.w	r5, r5, #3
 8005d3a:	3508      	adds	r5, #8
 8005d3c:	2d0c      	cmp	r5, #12
 8005d3e:	bf38      	it	cc
 8005d40:	250c      	movcc	r5, #12
 8005d42:	2d00      	cmp	r5, #0
 8005d44:	4606      	mov	r6, r0
 8005d46:	db01      	blt.n	8005d4c <_malloc_r+0x1c>
 8005d48:	42a9      	cmp	r1, r5
 8005d4a:	d904      	bls.n	8005d56 <_malloc_r+0x26>
 8005d4c:	230c      	movs	r3, #12
 8005d4e:	6033      	str	r3, [r6, #0]
 8005d50:	2000      	movs	r0, #0
 8005d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e2c <_malloc_r+0xfc>
 8005d5a:	f000 f869 	bl	8005e30 <__malloc_lock>
 8005d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d62:	461c      	mov	r4, r3
 8005d64:	bb44      	cbnz	r4, 8005db8 <_malloc_r+0x88>
 8005d66:	4629      	mov	r1, r5
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f7ff ffbf 	bl	8005cec <sbrk_aligned>
 8005d6e:	1c43      	adds	r3, r0, #1
 8005d70:	4604      	mov	r4, r0
 8005d72:	d158      	bne.n	8005e26 <_malloc_r+0xf6>
 8005d74:	f8d8 4000 	ldr.w	r4, [r8]
 8005d78:	4627      	mov	r7, r4
 8005d7a:	2f00      	cmp	r7, #0
 8005d7c:	d143      	bne.n	8005e06 <_malloc_r+0xd6>
 8005d7e:	2c00      	cmp	r4, #0
 8005d80:	d04b      	beq.n	8005e1a <_malloc_r+0xea>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	4639      	mov	r1, r7
 8005d86:	4630      	mov	r0, r6
 8005d88:	eb04 0903 	add.w	r9, r4, r3
 8005d8c:	f000 fdf4 	bl	8006978 <_sbrk_r>
 8005d90:	4581      	cmp	r9, r0
 8005d92:	d142      	bne.n	8005e1a <_malloc_r+0xea>
 8005d94:	6821      	ldr	r1, [r4, #0]
 8005d96:	1a6d      	subs	r5, r5, r1
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff ffa6 	bl	8005cec <sbrk_aligned>
 8005da0:	3001      	adds	r0, #1
 8005da2:	d03a      	beq.n	8005e1a <_malloc_r+0xea>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	442b      	add	r3, r5
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	f8d8 3000 	ldr.w	r3, [r8]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	bb62      	cbnz	r2, 8005e0c <_malloc_r+0xdc>
 8005db2:	f8c8 7000 	str.w	r7, [r8]
 8005db6:	e00f      	b.n	8005dd8 <_malloc_r+0xa8>
 8005db8:	6822      	ldr	r2, [r4, #0]
 8005dba:	1b52      	subs	r2, r2, r5
 8005dbc:	d420      	bmi.n	8005e00 <_malloc_r+0xd0>
 8005dbe:	2a0b      	cmp	r2, #11
 8005dc0:	d917      	bls.n	8005df2 <_malloc_r+0xc2>
 8005dc2:	1961      	adds	r1, r4, r5
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	6025      	str	r5, [r4, #0]
 8005dc8:	bf18      	it	ne
 8005dca:	6059      	strne	r1, [r3, #4]
 8005dcc:	6863      	ldr	r3, [r4, #4]
 8005dce:	bf08      	it	eq
 8005dd0:	f8c8 1000 	streq.w	r1, [r8]
 8005dd4:	5162      	str	r2, [r4, r5]
 8005dd6:	604b      	str	r3, [r1, #4]
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f000 f82f 	bl	8005e3c <__malloc_unlock>
 8005dde:	f104 000b 	add.w	r0, r4, #11
 8005de2:	1d23      	adds	r3, r4, #4
 8005de4:	f020 0007 	bic.w	r0, r0, #7
 8005de8:	1ac2      	subs	r2, r0, r3
 8005dea:	bf1c      	itt	ne
 8005dec:	1a1b      	subne	r3, r3, r0
 8005dee:	50a3      	strne	r3, [r4, r2]
 8005df0:	e7af      	b.n	8005d52 <_malloc_r+0x22>
 8005df2:	6862      	ldr	r2, [r4, #4]
 8005df4:	42a3      	cmp	r3, r4
 8005df6:	bf0c      	ite	eq
 8005df8:	f8c8 2000 	streq.w	r2, [r8]
 8005dfc:	605a      	strne	r2, [r3, #4]
 8005dfe:	e7eb      	b.n	8005dd8 <_malloc_r+0xa8>
 8005e00:	4623      	mov	r3, r4
 8005e02:	6864      	ldr	r4, [r4, #4]
 8005e04:	e7ae      	b.n	8005d64 <_malloc_r+0x34>
 8005e06:	463c      	mov	r4, r7
 8005e08:	687f      	ldr	r7, [r7, #4]
 8005e0a:	e7b6      	b.n	8005d7a <_malloc_r+0x4a>
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	42a3      	cmp	r3, r4
 8005e12:	d1fb      	bne.n	8005e0c <_malloc_r+0xdc>
 8005e14:	2300      	movs	r3, #0
 8005e16:	6053      	str	r3, [r2, #4]
 8005e18:	e7de      	b.n	8005dd8 <_malloc_r+0xa8>
 8005e1a:	230c      	movs	r3, #12
 8005e1c:	6033      	str	r3, [r6, #0]
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f000 f80c 	bl	8005e3c <__malloc_unlock>
 8005e24:	e794      	b.n	8005d50 <_malloc_r+0x20>
 8005e26:	6005      	str	r5, [r0, #0]
 8005e28:	e7d6      	b.n	8005dd8 <_malloc_r+0xa8>
 8005e2a:	bf00      	nop
 8005e2c:	200003dc 	.word	0x200003dc

08005e30 <__malloc_lock>:
 8005e30:	4801      	ldr	r0, [pc, #4]	@ (8005e38 <__malloc_lock+0x8>)
 8005e32:	f7ff b8ac 	b.w	8004f8e <__retarget_lock_acquire_recursive>
 8005e36:	bf00      	nop
 8005e38:	200003d4 	.word	0x200003d4

08005e3c <__malloc_unlock>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	@ (8005e44 <__malloc_unlock+0x8>)
 8005e3e:	f7ff b8a7 	b.w	8004f90 <__retarget_lock_release_recursive>
 8005e42:	bf00      	nop
 8005e44:	200003d4 	.word	0x200003d4

08005e48 <_Balloc>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	69c6      	ldr	r6, [r0, #28]
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	460d      	mov	r5, r1
 8005e50:	b976      	cbnz	r6, 8005e70 <_Balloc+0x28>
 8005e52:	2010      	movs	r0, #16
 8005e54:	f7ff ff42 	bl	8005cdc <malloc>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	61e0      	str	r0, [r4, #28]
 8005e5c:	b920      	cbnz	r0, 8005e68 <_Balloc+0x20>
 8005e5e:	4b18      	ldr	r3, [pc, #96]	@ (8005ec0 <_Balloc+0x78>)
 8005e60:	4818      	ldr	r0, [pc, #96]	@ (8005ec4 <_Balloc+0x7c>)
 8005e62:	216b      	movs	r1, #107	@ 0x6b
 8005e64:	f000 fda6 	bl	80069b4 <__assert_func>
 8005e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e6c:	6006      	str	r6, [r0, #0]
 8005e6e:	60c6      	str	r6, [r0, #12]
 8005e70:	69e6      	ldr	r6, [r4, #28]
 8005e72:	68f3      	ldr	r3, [r6, #12]
 8005e74:	b183      	cbz	r3, 8005e98 <_Balloc+0x50>
 8005e76:	69e3      	ldr	r3, [r4, #28]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e7e:	b9b8      	cbnz	r0, 8005eb0 <_Balloc+0x68>
 8005e80:	2101      	movs	r1, #1
 8005e82:	fa01 f605 	lsl.w	r6, r1, r5
 8005e86:	1d72      	adds	r2, r6, #5
 8005e88:	0092      	lsls	r2, r2, #2
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 fdb0 	bl	80069f0 <_calloc_r>
 8005e90:	b160      	cbz	r0, 8005eac <_Balloc+0x64>
 8005e92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e96:	e00e      	b.n	8005eb6 <_Balloc+0x6e>
 8005e98:	2221      	movs	r2, #33	@ 0x21
 8005e9a:	2104      	movs	r1, #4
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f000 fda7 	bl	80069f0 <_calloc_r>
 8005ea2:	69e3      	ldr	r3, [r4, #28]
 8005ea4:	60f0      	str	r0, [r6, #12]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e4      	bne.n	8005e76 <_Balloc+0x2e>
 8005eac:	2000      	movs	r0, #0
 8005eae:	bd70      	pop	{r4, r5, r6, pc}
 8005eb0:	6802      	ldr	r2, [r0, #0]
 8005eb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ebc:	e7f7      	b.n	8005eae <_Balloc+0x66>
 8005ebe:	bf00      	nop
 8005ec0:	08007155 	.word	0x08007155
 8005ec4:	080071d5 	.word	0x080071d5

08005ec8 <_Bfree>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	69c6      	ldr	r6, [r0, #28]
 8005ecc:	4605      	mov	r5, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	b976      	cbnz	r6, 8005ef0 <_Bfree+0x28>
 8005ed2:	2010      	movs	r0, #16
 8005ed4:	f7ff ff02 	bl	8005cdc <malloc>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	61e8      	str	r0, [r5, #28]
 8005edc:	b920      	cbnz	r0, 8005ee8 <_Bfree+0x20>
 8005ede:	4b09      	ldr	r3, [pc, #36]	@ (8005f04 <_Bfree+0x3c>)
 8005ee0:	4809      	ldr	r0, [pc, #36]	@ (8005f08 <_Bfree+0x40>)
 8005ee2:	218f      	movs	r1, #143	@ 0x8f
 8005ee4:	f000 fd66 	bl	80069b4 <__assert_func>
 8005ee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005eec:	6006      	str	r6, [r0, #0]
 8005eee:	60c6      	str	r6, [r0, #12]
 8005ef0:	b13c      	cbz	r4, 8005f02 <_Bfree+0x3a>
 8005ef2:	69eb      	ldr	r3, [r5, #28]
 8005ef4:	6862      	ldr	r2, [r4, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005efc:	6021      	str	r1, [r4, #0]
 8005efe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	08007155 	.word	0x08007155
 8005f08:	080071d5 	.word	0x080071d5

08005f0c <__multadd>:
 8005f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f10:	690d      	ldr	r5, [r1, #16]
 8005f12:	4607      	mov	r7, r0
 8005f14:	460c      	mov	r4, r1
 8005f16:	461e      	mov	r6, r3
 8005f18:	f101 0c14 	add.w	ip, r1, #20
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	f8dc 3000 	ldr.w	r3, [ip]
 8005f22:	b299      	uxth	r1, r3
 8005f24:	fb02 6101 	mla	r1, r2, r1, r6
 8005f28:	0c1e      	lsrs	r6, r3, #16
 8005f2a:	0c0b      	lsrs	r3, r1, #16
 8005f2c:	fb02 3306 	mla	r3, r2, r6, r3
 8005f30:	b289      	uxth	r1, r1
 8005f32:	3001      	adds	r0, #1
 8005f34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f38:	4285      	cmp	r5, r0
 8005f3a:	f84c 1b04 	str.w	r1, [ip], #4
 8005f3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f42:	dcec      	bgt.n	8005f1e <__multadd+0x12>
 8005f44:	b30e      	cbz	r6, 8005f8a <__multadd+0x7e>
 8005f46:	68a3      	ldr	r3, [r4, #8]
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	dc19      	bgt.n	8005f80 <__multadd+0x74>
 8005f4c:	6861      	ldr	r1, [r4, #4]
 8005f4e:	4638      	mov	r0, r7
 8005f50:	3101      	adds	r1, #1
 8005f52:	f7ff ff79 	bl	8005e48 <_Balloc>
 8005f56:	4680      	mov	r8, r0
 8005f58:	b928      	cbnz	r0, 8005f66 <__multadd+0x5a>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f90 <__multadd+0x84>)
 8005f5e:	480d      	ldr	r0, [pc, #52]	@ (8005f94 <__multadd+0x88>)
 8005f60:	21ba      	movs	r1, #186	@ 0xba
 8005f62:	f000 fd27 	bl	80069b4 <__assert_func>
 8005f66:	6922      	ldr	r2, [r4, #16]
 8005f68:	3202      	adds	r2, #2
 8005f6a:	f104 010c 	add.w	r1, r4, #12
 8005f6e:	0092      	lsls	r2, r2, #2
 8005f70:	300c      	adds	r0, #12
 8005f72:	f000 fd11 	bl	8006998 <memcpy>
 8005f76:	4621      	mov	r1, r4
 8005f78:	4638      	mov	r0, r7
 8005f7a:	f7ff ffa5 	bl	8005ec8 <_Bfree>
 8005f7e:	4644      	mov	r4, r8
 8005f80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f84:	3501      	adds	r5, #1
 8005f86:	615e      	str	r6, [r3, #20]
 8005f88:	6125      	str	r5, [r4, #16]
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f90:	080071c4 	.word	0x080071c4
 8005f94:	080071d5 	.word	0x080071d5

08005f98 <__hi0bits>:
 8005f98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	bf36      	itet	cc
 8005fa0:	0403      	lslcc	r3, r0, #16
 8005fa2:	2000      	movcs	r0, #0
 8005fa4:	2010      	movcc	r0, #16
 8005fa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005faa:	bf3c      	itt	cc
 8005fac:	021b      	lslcc	r3, r3, #8
 8005fae:	3008      	addcc	r0, #8
 8005fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fb4:	bf3c      	itt	cc
 8005fb6:	011b      	lslcc	r3, r3, #4
 8005fb8:	3004      	addcc	r0, #4
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fbe:	bf3c      	itt	cc
 8005fc0:	009b      	lslcc	r3, r3, #2
 8005fc2:	3002      	addcc	r0, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	db05      	blt.n	8005fd4 <__hi0bits+0x3c>
 8005fc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005fcc:	f100 0001 	add.w	r0, r0, #1
 8005fd0:	bf08      	it	eq
 8005fd2:	2020      	moveq	r0, #32
 8005fd4:	4770      	bx	lr

08005fd6 <__lo0bits>:
 8005fd6:	6803      	ldr	r3, [r0, #0]
 8005fd8:	4602      	mov	r2, r0
 8005fda:	f013 0007 	ands.w	r0, r3, #7
 8005fde:	d00b      	beq.n	8005ff8 <__lo0bits+0x22>
 8005fe0:	07d9      	lsls	r1, r3, #31
 8005fe2:	d421      	bmi.n	8006028 <__lo0bits+0x52>
 8005fe4:	0798      	lsls	r0, r3, #30
 8005fe6:	bf49      	itett	mi
 8005fe8:	085b      	lsrmi	r3, r3, #1
 8005fea:	089b      	lsrpl	r3, r3, #2
 8005fec:	2001      	movmi	r0, #1
 8005fee:	6013      	strmi	r3, [r2, #0]
 8005ff0:	bf5c      	itt	pl
 8005ff2:	6013      	strpl	r3, [r2, #0]
 8005ff4:	2002      	movpl	r0, #2
 8005ff6:	4770      	bx	lr
 8005ff8:	b299      	uxth	r1, r3
 8005ffa:	b909      	cbnz	r1, 8006000 <__lo0bits+0x2a>
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	2010      	movs	r0, #16
 8006000:	b2d9      	uxtb	r1, r3
 8006002:	b909      	cbnz	r1, 8006008 <__lo0bits+0x32>
 8006004:	3008      	adds	r0, #8
 8006006:	0a1b      	lsrs	r3, r3, #8
 8006008:	0719      	lsls	r1, r3, #28
 800600a:	bf04      	itt	eq
 800600c:	091b      	lsreq	r3, r3, #4
 800600e:	3004      	addeq	r0, #4
 8006010:	0799      	lsls	r1, r3, #30
 8006012:	bf04      	itt	eq
 8006014:	089b      	lsreq	r3, r3, #2
 8006016:	3002      	addeq	r0, #2
 8006018:	07d9      	lsls	r1, r3, #31
 800601a:	d403      	bmi.n	8006024 <__lo0bits+0x4e>
 800601c:	085b      	lsrs	r3, r3, #1
 800601e:	f100 0001 	add.w	r0, r0, #1
 8006022:	d003      	beq.n	800602c <__lo0bits+0x56>
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	4770      	bx	lr
 8006028:	2000      	movs	r0, #0
 800602a:	4770      	bx	lr
 800602c:	2020      	movs	r0, #32
 800602e:	4770      	bx	lr

08006030 <__i2b>:
 8006030:	b510      	push	{r4, lr}
 8006032:	460c      	mov	r4, r1
 8006034:	2101      	movs	r1, #1
 8006036:	f7ff ff07 	bl	8005e48 <_Balloc>
 800603a:	4602      	mov	r2, r0
 800603c:	b928      	cbnz	r0, 800604a <__i2b+0x1a>
 800603e:	4b05      	ldr	r3, [pc, #20]	@ (8006054 <__i2b+0x24>)
 8006040:	4805      	ldr	r0, [pc, #20]	@ (8006058 <__i2b+0x28>)
 8006042:	f240 1145 	movw	r1, #325	@ 0x145
 8006046:	f000 fcb5 	bl	80069b4 <__assert_func>
 800604a:	2301      	movs	r3, #1
 800604c:	6144      	str	r4, [r0, #20]
 800604e:	6103      	str	r3, [r0, #16]
 8006050:	bd10      	pop	{r4, pc}
 8006052:	bf00      	nop
 8006054:	080071c4 	.word	0x080071c4
 8006058:	080071d5 	.word	0x080071d5

0800605c <__multiply>:
 800605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006060:	4617      	mov	r7, r2
 8006062:	690a      	ldr	r2, [r1, #16]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	429a      	cmp	r2, r3
 8006068:	bfa8      	it	ge
 800606a:	463b      	movge	r3, r7
 800606c:	4689      	mov	r9, r1
 800606e:	bfa4      	itt	ge
 8006070:	460f      	movge	r7, r1
 8006072:	4699      	movge	r9, r3
 8006074:	693d      	ldr	r5, [r7, #16]
 8006076:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	eb05 060a 	add.w	r6, r5, sl
 8006082:	42b3      	cmp	r3, r6
 8006084:	b085      	sub	sp, #20
 8006086:	bfb8      	it	lt
 8006088:	3101      	addlt	r1, #1
 800608a:	f7ff fedd 	bl	8005e48 <_Balloc>
 800608e:	b930      	cbnz	r0, 800609e <__multiply+0x42>
 8006090:	4602      	mov	r2, r0
 8006092:	4b41      	ldr	r3, [pc, #260]	@ (8006198 <__multiply+0x13c>)
 8006094:	4841      	ldr	r0, [pc, #260]	@ (800619c <__multiply+0x140>)
 8006096:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800609a:	f000 fc8b 	bl	80069b4 <__assert_func>
 800609e:	f100 0414 	add.w	r4, r0, #20
 80060a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80060a6:	4623      	mov	r3, r4
 80060a8:	2200      	movs	r2, #0
 80060aa:	4573      	cmp	r3, lr
 80060ac:	d320      	bcc.n	80060f0 <__multiply+0x94>
 80060ae:	f107 0814 	add.w	r8, r7, #20
 80060b2:	f109 0114 	add.w	r1, r9, #20
 80060b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80060ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80060be:	9302      	str	r3, [sp, #8]
 80060c0:	1beb      	subs	r3, r5, r7
 80060c2:	3b15      	subs	r3, #21
 80060c4:	f023 0303 	bic.w	r3, r3, #3
 80060c8:	3304      	adds	r3, #4
 80060ca:	3715      	adds	r7, #21
 80060cc:	42bd      	cmp	r5, r7
 80060ce:	bf38      	it	cc
 80060d0:	2304      	movcc	r3, #4
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	9b02      	ldr	r3, [sp, #8]
 80060d6:	9103      	str	r1, [sp, #12]
 80060d8:	428b      	cmp	r3, r1
 80060da:	d80c      	bhi.n	80060f6 <__multiply+0x9a>
 80060dc:	2e00      	cmp	r6, #0
 80060de:	dd03      	ble.n	80060e8 <__multiply+0x8c>
 80060e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d055      	beq.n	8006194 <__multiply+0x138>
 80060e8:	6106      	str	r6, [r0, #16]
 80060ea:	b005      	add	sp, #20
 80060ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f0:	f843 2b04 	str.w	r2, [r3], #4
 80060f4:	e7d9      	b.n	80060aa <__multiply+0x4e>
 80060f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80060fa:	f1ba 0f00 	cmp.w	sl, #0
 80060fe:	d01f      	beq.n	8006140 <__multiply+0xe4>
 8006100:	46c4      	mov	ip, r8
 8006102:	46a1      	mov	r9, r4
 8006104:	2700      	movs	r7, #0
 8006106:	f85c 2b04 	ldr.w	r2, [ip], #4
 800610a:	f8d9 3000 	ldr.w	r3, [r9]
 800610e:	fa1f fb82 	uxth.w	fp, r2
 8006112:	b29b      	uxth	r3, r3
 8006114:	fb0a 330b 	mla	r3, sl, fp, r3
 8006118:	443b      	add	r3, r7
 800611a:	f8d9 7000 	ldr.w	r7, [r9]
 800611e:	0c12      	lsrs	r2, r2, #16
 8006120:	0c3f      	lsrs	r7, r7, #16
 8006122:	fb0a 7202 	mla	r2, sl, r2, r7
 8006126:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800612a:	b29b      	uxth	r3, r3
 800612c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006130:	4565      	cmp	r5, ip
 8006132:	f849 3b04 	str.w	r3, [r9], #4
 8006136:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800613a:	d8e4      	bhi.n	8006106 <__multiply+0xaa>
 800613c:	9b01      	ldr	r3, [sp, #4]
 800613e:	50e7      	str	r7, [r4, r3]
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006146:	3104      	adds	r1, #4
 8006148:	f1b9 0f00 	cmp.w	r9, #0
 800614c:	d020      	beq.n	8006190 <__multiply+0x134>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	4647      	mov	r7, r8
 8006152:	46a4      	mov	ip, r4
 8006154:	f04f 0a00 	mov.w	sl, #0
 8006158:	f8b7 b000 	ldrh.w	fp, [r7]
 800615c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006160:	fb09 220b 	mla	r2, r9, fp, r2
 8006164:	4452      	add	r2, sl
 8006166:	b29b      	uxth	r3, r3
 8006168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800616c:	f84c 3b04 	str.w	r3, [ip], #4
 8006170:	f857 3b04 	ldr.w	r3, [r7], #4
 8006174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006178:	f8bc 3000 	ldrh.w	r3, [ip]
 800617c:	fb09 330a 	mla	r3, r9, sl, r3
 8006180:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006184:	42bd      	cmp	r5, r7
 8006186:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800618a:	d8e5      	bhi.n	8006158 <__multiply+0xfc>
 800618c:	9a01      	ldr	r2, [sp, #4]
 800618e:	50a3      	str	r3, [r4, r2]
 8006190:	3404      	adds	r4, #4
 8006192:	e79f      	b.n	80060d4 <__multiply+0x78>
 8006194:	3e01      	subs	r6, #1
 8006196:	e7a1      	b.n	80060dc <__multiply+0x80>
 8006198:	080071c4 	.word	0x080071c4
 800619c:	080071d5 	.word	0x080071d5

080061a0 <__pow5mult>:
 80061a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a4:	4615      	mov	r5, r2
 80061a6:	f012 0203 	ands.w	r2, r2, #3
 80061aa:	4607      	mov	r7, r0
 80061ac:	460e      	mov	r6, r1
 80061ae:	d007      	beq.n	80061c0 <__pow5mult+0x20>
 80061b0:	4c25      	ldr	r4, [pc, #148]	@ (8006248 <__pow5mult+0xa8>)
 80061b2:	3a01      	subs	r2, #1
 80061b4:	2300      	movs	r3, #0
 80061b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061ba:	f7ff fea7 	bl	8005f0c <__multadd>
 80061be:	4606      	mov	r6, r0
 80061c0:	10ad      	asrs	r5, r5, #2
 80061c2:	d03d      	beq.n	8006240 <__pow5mult+0xa0>
 80061c4:	69fc      	ldr	r4, [r7, #28]
 80061c6:	b97c      	cbnz	r4, 80061e8 <__pow5mult+0x48>
 80061c8:	2010      	movs	r0, #16
 80061ca:	f7ff fd87 	bl	8005cdc <malloc>
 80061ce:	4602      	mov	r2, r0
 80061d0:	61f8      	str	r0, [r7, #28]
 80061d2:	b928      	cbnz	r0, 80061e0 <__pow5mult+0x40>
 80061d4:	4b1d      	ldr	r3, [pc, #116]	@ (800624c <__pow5mult+0xac>)
 80061d6:	481e      	ldr	r0, [pc, #120]	@ (8006250 <__pow5mult+0xb0>)
 80061d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80061dc:	f000 fbea 	bl	80069b4 <__assert_func>
 80061e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061e4:	6004      	str	r4, [r0, #0]
 80061e6:	60c4      	str	r4, [r0, #12]
 80061e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80061ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061f0:	b94c      	cbnz	r4, 8006206 <__pow5mult+0x66>
 80061f2:	f240 2171 	movw	r1, #625	@ 0x271
 80061f6:	4638      	mov	r0, r7
 80061f8:	f7ff ff1a 	bl	8006030 <__i2b>
 80061fc:	2300      	movs	r3, #0
 80061fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006202:	4604      	mov	r4, r0
 8006204:	6003      	str	r3, [r0, #0]
 8006206:	f04f 0900 	mov.w	r9, #0
 800620a:	07eb      	lsls	r3, r5, #31
 800620c:	d50a      	bpl.n	8006224 <__pow5mult+0x84>
 800620e:	4631      	mov	r1, r6
 8006210:	4622      	mov	r2, r4
 8006212:	4638      	mov	r0, r7
 8006214:	f7ff ff22 	bl	800605c <__multiply>
 8006218:	4631      	mov	r1, r6
 800621a:	4680      	mov	r8, r0
 800621c:	4638      	mov	r0, r7
 800621e:	f7ff fe53 	bl	8005ec8 <_Bfree>
 8006222:	4646      	mov	r6, r8
 8006224:	106d      	asrs	r5, r5, #1
 8006226:	d00b      	beq.n	8006240 <__pow5mult+0xa0>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	b938      	cbnz	r0, 800623c <__pow5mult+0x9c>
 800622c:	4622      	mov	r2, r4
 800622e:	4621      	mov	r1, r4
 8006230:	4638      	mov	r0, r7
 8006232:	f7ff ff13 	bl	800605c <__multiply>
 8006236:	6020      	str	r0, [r4, #0]
 8006238:	f8c0 9000 	str.w	r9, [r0]
 800623c:	4604      	mov	r4, r0
 800623e:	e7e4      	b.n	800620a <__pow5mult+0x6a>
 8006240:	4630      	mov	r0, r6
 8006242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006246:	bf00      	nop
 8006248:	08007288 	.word	0x08007288
 800624c:	08007155 	.word	0x08007155
 8006250:	080071d5 	.word	0x080071d5

08006254 <__lshift>:
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	460c      	mov	r4, r1
 800625a:	6849      	ldr	r1, [r1, #4]
 800625c:	6923      	ldr	r3, [r4, #16]
 800625e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006262:	68a3      	ldr	r3, [r4, #8]
 8006264:	4607      	mov	r7, r0
 8006266:	4691      	mov	r9, r2
 8006268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800626c:	f108 0601 	add.w	r6, r8, #1
 8006270:	42b3      	cmp	r3, r6
 8006272:	db0b      	blt.n	800628c <__lshift+0x38>
 8006274:	4638      	mov	r0, r7
 8006276:	f7ff fde7 	bl	8005e48 <_Balloc>
 800627a:	4605      	mov	r5, r0
 800627c:	b948      	cbnz	r0, 8006292 <__lshift+0x3e>
 800627e:	4602      	mov	r2, r0
 8006280:	4b28      	ldr	r3, [pc, #160]	@ (8006324 <__lshift+0xd0>)
 8006282:	4829      	ldr	r0, [pc, #164]	@ (8006328 <__lshift+0xd4>)
 8006284:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006288:	f000 fb94 	bl	80069b4 <__assert_func>
 800628c:	3101      	adds	r1, #1
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	e7ee      	b.n	8006270 <__lshift+0x1c>
 8006292:	2300      	movs	r3, #0
 8006294:	f100 0114 	add.w	r1, r0, #20
 8006298:	f100 0210 	add.w	r2, r0, #16
 800629c:	4618      	mov	r0, r3
 800629e:	4553      	cmp	r3, sl
 80062a0:	db33      	blt.n	800630a <__lshift+0xb6>
 80062a2:	6920      	ldr	r0, [r4, #16]
 80062a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062a8:	f104 0314 	add.w	r3, r4, #20
 80062ac:	f019 091f 	ands.w	r9, r9, #31
 80062b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062b8:	d02b      	beq.n	8006312 <__lshift+0xbe>
 80062ba:	f1c9 0e20 	rsb	lr, r9, #32
 80062be:	468a      	mov	sl, r1
 80062c0:	2200      	movs	r2, #0
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	fa00 f009 	lsl.w	r0, r0, r9
 80062c8:	4310      	orrs	r0, r2
 80062ca:	f84a 0b04 	str.w	r0, [sl], #4
 80062ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d2:	459c      	cmp	ip, r3
 80062d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80062d8:	d8f3      	bhi.n	80062c2 <__lshift+0x6e>
 80062da:	ebac 0304 	sub.w	r3, ip, r4
 80062de:	3b15      	subs	r3, #21
 80062e0:	f023 0303 	bic.w	r3, r3, #3
 80062e4:	3304      	adds	r3, #4
 80062e6:	f104 0015 	add.w	r0, r4, #21
 80062ea:	4560      	cmp	r0, ip
 80062ec:	bf88      	it	hi
 80062ee:	2304      	movhi	r3, #4
 80062f0:	50ca      	str	r2, [r1, r3]
 80062f2:	b10a      	cbz	r2, 80062f8 <__lshift+0xa4>
 80062f4:	f108 0602 	add.w	r6, r8, #2
 80062f8:	3e01      	subs	r6, #1
 80062fa:	4638      	mov	r0, r7
 80062fc:	612e      	str	r6, [r5, #16]
 80062fe:	4621      	mov	r1, r4
 8006300:	f7ff fde2 	bl	8005ec8 <_Bfree>
 8006304:	4628      	mov	r0, r5
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630a:	f842 0f04 	str.w	r0, [r2, #4]!
 800630e:	3301      	adds	r3, #1
 8006310:	e7c5      	b.n	800629e <__lshift+0x4a>
 8006312:	3904      	subs	r1, #4
 8006314:	f853 2b04 	ldr.w	r2, [r3], #4
 8006318:	f841 2f04 	str.w	r2, [r1, #4]!
 800631c:	459c      	cmp	ip, r3
 800631e:	d8f9      	bhi.n	8006314 <__lshift+0xc0>
 8006320:	e7ea      	b.n	80062f8 <__lshift+0xa4>
 8006322:	bf00      	nop
 8006324:	080071c4 	.word	0x080071c4
 8006328:	080071d5 	.word	0x080071d5

0800632c <__mcmp>:
 800632c:	690a      	ldr	r2, [r1, #16]
 800632e:	4603      	mov	r3, r0
 8006330:	6900      	ldr	r0, [r0, #16]
 8006332:	1a80      	subs	r0, r0, r2
 8006334:	b530      	push	{r4, r5, lr}
 8006336:	d10e      	bne.n	8006356 <__mcmp+0x2a>
 8006338:	3314      	adds	r3, #20
 800633a:	3114      	adds	r1, #20
 800633c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006340:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006344:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006348:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800634c:	4295      	cmp	r5, r2
 800634e:	d003      	beq.n	8006358 <__mcmp+0x2c>
 8006350:	d205      	bcs.n	800635e <__mcmp+0x32>
 8006352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006356:	bd30      	pop	{r4, r5, pc}
 8006358:	42a3      	cmp	r3, r4
 800635a:	d3f3      	bcc.n	8006344 <__mcmp+0x18>
 800635c:	e7fb      	b.n	8006356 <__mcmp+0x2a>
 800635e:	2001      	movs	r0, #1
 8006360:	e7f9      	b.n	8006356 <__mcmp+0x2a>
	...

08006364 <__mdiff>:
 8006364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006368:	4689      	mov	r9, r1
 800636a:	4606      	mov	r6, r0
 800636c:	4611      	mov	r1, r2
 800636e:	4648      	mov	r0, r9
 8006370:	4614      	mov	r4, r2
 8006372:	f7ff ffdb 	bl	800632c <__mcmp>
 8006376:	1e05      	subs	r5, r0, #0
 8006378:	d112      	bne.n	80063a0 <__mdiff+0x3c>
 800637a:	4629      	mov	r1, r5
 800637c:	4630      	mov	r0, r6
 800637e:	f7ff fd63 	bl	8005e48 <_Balloc>
 8006382:	4602      	mov	r2, r0
 8006384:	b928      	cbnz	r0, 8006392 <__mdiff+0x2e>
 8006386:	4b3f      	ldr	r3, [pc, #252]	@ (8006484 <__mdiff+0x120>)
 8006388:	f240 2137 	movw	r1, #567	@ 0x237
 800638c:	483e      	ldr	r0, [pc, #248]	@ (8006488 <__mdiff+0x124>)
 800638e:	f000 fb11 	bl	80069b4 <__assert_func>
 8006392:	2301      	movs	r3, #1
 8006394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006398:	4610      	mov	r0, r2
 800639a:	b003      	add	sp, #12
 800639c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a0:	bfbc      	itt	lt
 80063a2:	464b      	movlt	r3, r9
 80063a4:	46a1      	movlt	r9, r4
 80063a6:	4630      	mov	r0, r6
 80063a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80063ac:	bfba      	itte	lt
 80063ae:	461c      	movlt	r4, r3
 80063b0:	2501      	movlt	r5, #1
 80063b2:	2500      	movge	r5, #0
 80063b4:	f7ff fd48 	bl	8005e48 <_Balloc>
 80063b8:	4602      	mov	r2, r0
 80063ba:	b918      	cbnz	r0, 80063c4 <__mdiff+0x60>
 80063bc:	4b31      	ldr	r3, [pc, #196]	@ (8006484 <__mdiff+0x120>)
 80063be:	f240 2145 	movw	r1, #581	@ 0x245
 80063c2:	e7e3      	b.n	800638c <__mdiff+0x28>
 80063c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80063c8:	6926      	ldr	r6, [r4, #16]
 80063ca:	60c5      	str	r5, [r0, #12]
 80063cc:	f109 0310 	add.w	r3, r9, #16
 80063d0:	f109 0514 	add.w	r5, r9, #20
 80063d4:	f104 0e14 	add.w	lr, r4, #20
 80063d8:	f100 0b14 	add.w	fp, r0, #20
 80063dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80063e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80063e4:	9301      	str	r3, [sp, #4]
 80063e6:	46d9      	mov	r9, fp
 80063e8:	f04f 0c00 	mov.w	ip, #0
 80063ec:	9b01      	ldr	r3, [sp, #4]
 80063ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80063f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	fa1f f38a 	uxth.w	r3, sl
 80063fc:	4619      	mov	r1, r3
 80063fe:	b283      	uxth	r3, r0
 8006400:	1acb      	subs	r3, r1, r3
 8006402:	0c00      	lsrs	r0, r0, #16
 8006404:	4463      	add	r3, ip
 8006406:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800640a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800640e:	b29b      	uxth	r3, r3
 8006410:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006414:	4576      	cmp	r6, lr
 8006416:	f849 3b04 	str.w	r3, [r9], #4
 800641a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800641e:	d8e5      	bhi.n	80063ec <__mdiff+0x88>
 8006420:	1b33      	subs	r3, r6, r4
 8006422:	3b15      	subs	r3, #21
 8006424:	f023 0303 	bic.w	r3, r3, #3
 8006428:	3415      	adds	r4, #21
 800642a:	3304      	adds	r3, #4
 800642c:	42a6      	cmp	r6, r4
 800642e:	bf38      	it	cc
 8006430:	2304      	movcc	r3, #4
 8006432:	441d      	add	r5, r3
 8006434:	445b      	add	r3, fp
 8006436:	461e      	mov	r6, r3
 8006438:	462c      	mov	r4, r5
 800643a:	4544      	cmp	r4, r8
 800643c:	d30e      	bcc.n	800645c <__mdiff+0xf8>
 800643e:	f108 0103 	add.w	r1, r8, #3
 8006442:	1b49      	subs	r1, r1, r5
 8006444:	f021 0103 	bic.w	r1, r1, #3
 8006448:	3d03      	subs	r5, #3
 800644a:	45a8      	cmp	r8, r5
 800644c:	bf38      	it	cc
 800644e:	2100      	movcc	r1, #0
 8006450:	440b      	add	r3, r1
 8006452:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006456:	b191      	cbz	r1, 800647e <__mdiff+0x11a>
 8006458:	6117      	str	r7, [r2, #16]
 800645a:	e79d      	b.n	8006398 <__mdiff+0x34>
 800645c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006460:	46e6      	mov	lr, ip
 8006462:	0c08      	lsrs	r0, r1, #16
 8006464:	fa1c fc81 	uxtah	ip, ip, r1
 8006468:	4471      	add	r1, lr
 800646a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800646e:	b289      	uxth	r1, r1
 8006470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006474:	f846 1b04 	str.w	r1, [r6], #4
 8006478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800647c:	e7dd      	b.n	800643a <__mdiff+0xd6>
 800647e:	3f01      	subs	r7, #1
 8006480:	e7e7      	b.n	8006452 <__mdiff+0xee>
 8006482:	bf00      	nop
 8006484:	080071c4 	.word	0x080071c4
 8006488:	080071d5 	.word	0x080071d5

0800648c <__d2b>:
 800648c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006490:	460f      	mov	r7, r1
 8006492:	2101      	movs	r1, #1
 8006494:	ec59 8b10 	vmov	r8, r9, d0
 8006498:	4616      	mov	r6, r2
 800649a:	f7ff fcd5 	bl	8005e48 <_Balloc>
 800649e:	4604      	mov	r4, r0
 80064a0:	b930      	cbnz	r0, 80064b0 <__d2b+0x24>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b23      	ldr	r3, [pc, #140]	@ (8006534 <__d2b+0xa8>)
 80064a6:	4824      	ldr	r0, [pc, #144]	@ (8006538 <__d2b+0xac>)
 80064a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80064ac:	f000 fa82 	bl	80069b4 <__assert_func>
 80064b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064b8:	b10d      	cbz	r5, 80064be <__d2b+0x32>
 80064ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	f1b8 0300 	subs.w	r3, r8, #0
 80064c4:	d023      	beq.n	800650e <__d2b+0x82>
 80064c6:	4668      	mov	r0, sp
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	f7ff fd84 	bl	8005fd6 <__lo0bits>
 80064ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064d2:	b1d0      	cbz	r0, 800650a <__d2b+0x7e>
 80064d4:	f1c0 0320 	rsb	r3, r0, #32
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	430b      	orrs	r3, r1
 80064de:	40c2      	lsrs	r2, r0
 80064e0:	6163      	str	r3, [r4, #20]
 80064e2:	9201      	str	r2, [sp, #4]
 80064e4:	9b01      	ldr	r3, [sp, #4]
 80064e6:	61a3      	str	r3, [r4, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bf0c      	ite	eq
 80064ec:	2201      	moveq	r2, #1
 80064ee:	2202      	movne	r2, #2
 80064f0:	6122      	str	r2, [r4, #16]
 80064f2:	b1a5      	cbz	r5, 800651e <__d2b+0x92>
 80064f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80064f8:	4405      	add	r5, r0
 80064fa:	603d      	str	r5, [r7, #0]
 80064fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006500:	6030      	str	r0, [r6, #0]
 8006502:	4620      	mov	r0, r4
 8006504:	b003      	add	sp, #12
 8006506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800650a:	6161      	str	r1, [r4, #20]
 800650c:	e7ea      	b.n	80064e4 <__d2b+0x58>
 800650e:	a801      	add	r0, sp, #4
 8006510:	f7ff fd61 	bl	8005fd6 <__lo0bits>
 8006514:	9b01      	ldr	r3, [sp, #4]
 8006516:	6163      	str	r3, [r4, #20]
 8006518:	3020      	adds	r0, #32
 800651a:	2201      	movs	r2, #1
 800651c:	e7e8      	b.n	80064f0 <__d2b+0x64>
 800651e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006522:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006526:	6038      	str	r0, [r7, #0]
 8006528:	6918      	ldr	r0, [r3, #16]
 800652a:	f7ff fd35 	bl	8005f98 <__hi0bits>
 800652e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006532:	e7e5      	b.n	8006500 <__d2b+0x74>
 8006534:	080071c4 	.word	0x080071c4
 8006538:	080071d5 	.word	0x080071d5

0800653c <__ssputs_r>:
 800653c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006540:	688e      	ldr	r6, [r1, #8]
 8006542:	461f      	mov	r7, r3
 8006544:	42be      	cmp	r6, r7
 8006546:	680b      	ldr	r3, [r1, #0]
 8006548:	4682      	mov	sl, r0
 800654a:	460c      	mov	r4, r1
 800654c:	4690      	mov	r8, r2
 800654e:	d82d      	bhi.n	80065ac <__ssputs_r+0x70>
 8006550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006554:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006558:	d026      	beq.n	80065a8 <__ssputs_r+0x6c>
 800655a:	6965      	ldr	r5, [r4, #20]
 800655c:	6909      	ldr	r1, [r1, #16]
 800655e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006562:	eba3 0901 	sub.w	r9, r3, r1
 8006566:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800656a:	1c7b      	adds	r3, r7, #1
 800656c:	444b      	add	r3, r9
 800656e:	106d      	asrs	r5, r5, #1
 8006570:	429d      	cmp	r5, r3
 8006572:	bf38      	it	cc
 8006574:	461d      	movcc	r5, r3
 8006576:	0553      	lsls	r3, r2, #21
 8006578:	d527      	bpl.n	80065ca <__ssputs_r+0x8e>
 800657a:	4629      	mov	r1, r5
 800657c:	f7ff fbd8 	bl	8005d30 <_malloc_r>
 8006580:	4606      	mov	r6, r0
 8006582:	b360      	cbz	r0, 80065de <__ssputs_r+0xa2>
 8006584:	6921      	ldr	r1, [r4, #16]
 8006586:	464a      	mov	r2, r9
 8006588:	f000 fa06 	bl	8006998 <memcpy>
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006596:	81a3      	strh	r3, [r4, #12]
 8006598:	6126      	str	r6, [r4, #16]
 800659a:	6165      	str	r5, [r4, #20]
 800659c:	444e      	add	r6, r9
 800659e:	eba5 0509 	sub.w	r5, r5, r9
 80065a2:	6026      	str	r6, [r4, #0]
 80065a4:	60a5      	str	r5, [r4, #8]
 80065a6:	463e      	mov	r6, r7
 80065a8:	42be      	cmp	r6, r7
 80065aa:	d900      	bls.n	80065ae <__ssputs_r+0x72>
 80065ac:	463e      	mov	r6, r7
 80065ae:	6820      	ldr	r0, [r4, #0]
 80065b0:	4632      	mov	r2, r6
 80065b2:	4641      	mov	r1, r8
 80065b4:	f000 f9c6 	bl	8006944 <memmove>
 80065b8:	68a3      	ldr	r3, [r4, #8]
 80065ba:	1b9b      	subs	r3, r3, r6
 80065bc:	60a3      	str	r3, [r4, #8]
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	4433      	add	r3, r6
 80065c2:	6023      	str	r3, [r4, #0]
 80065c4:	2000      	movs	r0, #0
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	462a      	mov	r2, r5
 80065cc:	f000 fa36 	bl	8006a3c <_realloc_r>
 80065d0:	4606      	mov	r6, r0
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d1e0      	bne.n	8006598 <__ssputs_r+0x5c>
 80065d6:	6921      	ldr	r1, [r4, #16]
 80065d8:	4650      	mov	r0, sl
 80065da:	f7ff fb35 	bl	8005c48 <_free_r>
 80065de:	230c      	movs	r3, #12
 80065e0:	f8ca 3000 	str.w	r3, [sl]
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ea:	81a3      	strh	r3, [r4, #12]
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065f0:	e7e9      	b.n	80065c6 <__ssputs_r+0x8a>
	...

080065f4 <_svfiprintf_r>:
 80065f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f8:	4698      	mov	r8, r3
 80065fa:	898b      	ldrh	r3, [r1, #12]
 80065fc:	061b      	lsls	r3, r3, #24
 80065fe:	b09d      	sub	sp, #116	@ 0x74
 8006600:	4607      	mov	r7, r0
 8006602:	460d      	mov	r5, r1
 8006604:	4614      	mov	r4, r2
 8006606:	d510      	bpl.n	800662a <_svfiprintf_r+0x36>
 8006608:	690b      	ldr	r3, [r1, #16]
 800660a:	b973      	cbnz	r3, 800662a <_svfiprintf_r+0x36>
 800660c:	2140      	movs	r1, #64	@ 0x40
 800660e:	f7ff fb8f 	bl	8005d30 <_malloc_r>
 8006612:	6028      	str	r0, [r5, #0]
 8006614:	6128      	str	r0, [r5, #16]
 8006616:	b930      	cbnz	r0, 8006626 <_svfiprintf_r+0x32>
 8006618:	230c      	movs	r3, #12
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006620:	b01d      	add	sp, #116	@ 0x74
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006626:	2340      	movs	r3, #64	@ 0x40
 8006628:	616b      	str	r3, [r5, #20]
 800662a:	2300      	movs	r3, #0
 800662c:	9309      	str	r3, [sp, #36]	@ 0x24
 800662e:	2320      	movs	r3, #32
 8006630:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006634:	f8cd 800c 	str.w	r8, [sp, #12]
 8006638:	2330      	movs	r3, #48	@ 0x30
 800663a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067d8 <_svfiprintf_r+0x1e4>
 800663e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006642:	f04f 0901 	mov.w	r9, #1
 8006646:	4623      	mov	r3, r4
 8006648:	469a      	mov	sl, r3
 800664a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800664e:	b10a      	cbz	r2, 8006654 <_svfiprintf_r+0x60>
 8006650:	2a25      	cmp	r2, #37	@ 0x25
 8006652:	d1f9      	bne.n	8006648 <_svfiprintf_r+0x54>
 8006654:	ebba 0b04 	subs.w	fp, sl, r4
 8006658:	d00b      	beq.n	8006672 <_svfiprintf_r+0x7e>
 800665a:	465b      	mov	r3, fp
 800665c:	4622      	mov	r2, r4
 800665e:	4629      	mov	r1, r5
 8006660:	4638      	mov	r0, r7
 8006662:	f7ff ff6b 	bl	800653c <__ssputs_r>
 8006666:	3001      	adds	r0, #1
 8006668:	f000 80a7 	beq.w	80067ba <_svfiprintf_r+0x1c6>
 800666c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800666e:	445a      	add	r2, fp
 8006670:	9209      	str	r2, [sp, #36]	@ 0x24
 8006672:	f89a 3000 	ldrb.w	r3, [sl]
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 809f 	beq.w	80067ba <_svfiprintf_r+0x1c6>
 800667c:	2300      	movs	r3, #0
 800667e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006686:	f10a 0a01 	add.w	sl, sl, #1
 800668a:	9304      	str	r3, [sp, #16]
 800668c:	9307      	str	r3, [sp, #28]
 800668e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006692:	931a      	str	r3, [sp, #104]	@ 0x68
 8006694:	4654      	mov	r4, sl
 8006696:	2205      	movs	r2, #5
 8006698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800669c:	484e      	ldr	r0, [pc, #312]	@ (80067d8 <_svfiprintf_r+0x1e4>)
 800669e:	f7f9 fd9f 	bl	80001e0 <memchr>
 80066a2:	9a04      	ldr	r2, [sp, #16]
 80066a4:	b9d8      	cbnz	r0, 80066de <_svfiprintf_r+0xea>
 80066a6:	06d0      	lsls	r0, r2, #27
 80066a8:	bf44      	itt	mi
 80066aa:	2320      	movmi	r3, #32
 80066ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066b0:	0711      	lsls	r1, r2, #28
 80066b2:	bf44      	itt	mi
 80066b4:	232b      	movmi	r3, #43	@ 0x2b
 80066b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066ba:	f89a 3000 	ldrb.w	r3, [sl]
 80066be:	2b2a      	cmp	r3, #42	@ 0x2a
 80066c0:	d015      	beq.n	80066ee <_svfiprintf_r+0xfa>
 80066c2:	9a07      	ldr	r2, [sp, #28]
 80066c4:	4654      	mov	r4, sl
 80066c6:	2000      	movs	r0, #0
 80066c8:	f04f 0c0a 	mov.w	ip, #10
 80066cc:	4621      	mov	r1, r4
 80066ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066d2:	3b30      	subs	r3, #48	@ 0x30
 80066d4:	2b09      	cmp	r3, #9
 80066d6:	d94b      	bls.n	8006770 <_svfiprintf_r+0x17c>
 80066d8:	b1b0      	cbz	r0, 8006708 <_svfiprintf_r+0x114>
 80066da:	9207      	str	r2, [sp, #28]
 80066dc:	e014      	b.n	8006708 <_svfiprintf_r+0x114>
 80066de:	eba0 0308 	sub.w	r3, r0, r8
 80066e2:	fa09 f303 	lsl.w	r3, r9, r3
 80066e6:	4313      	orrs	r3, r2
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	46a2      	mov	sl, r4
 80066ec:	e7d2      	b.n	8006694 <_svfiprintf_r+0xa0>
 80066ee:	9b03      	ldr	r3, [sp, #12]
 80066f0:	1d19      	adds	r1, r3, #4
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	9103      	str	r1, [sp, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bfbb      	ittet	lt
 80066fa:	425b      	neglt	r3, r3
 80066fc:	f042 0202 	orrlt.w	r2, r2, #2
 8006700:	9307      	strge	r3, [sp, #28]
 8006702:	9307      	strlt	r3, [sp, #28]
 8006704:	bfb8      	it	lt
 8006706:	9204      	strlt	r2, [sp, #16]
 8006708:	7823      	ldrb	r3, [r4, #0]
 800670a:	2b2e      	cmp	r3, #46	@ 0x2e
 800670c:	d10a      	bne.n	8006724 <_svfiprintf_r+0x130>
 800670e:	7863      	ldrb	r3, [r4, #1]
 8006710:	2b2a      	cmp	r3, #42	@ 0x2a
 8006712:	d132      	bne.n	800677a <_svfiprintf_r+0x186>
 8006714:	9b03      	ldr	r3, [sp, #12]
 8006716:	1d1a      	adds	r2, r3, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	9203      	str	r2, [sp, #12]
 800671c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006720:	3402      	adds	r4, #2
 8006722:	9305      	str	r3, [sp, #20]
 8006724:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067e8 <_svfiprintf_r+0x1f4>
 8006728:	7821      	ldrb	r1, [r4, #0]
 800672a:	2203      	movs	r2, #3
 800672c:	4650      	mov	r0, sl
 800672e:	f7f9 fd57 	bl	80001e0 <memchr>
 8006732:	b138      	cbz	r0, 8006744 <_svfiprintf_r+0x150>
 8006734:	9b04      	ldr	r3, [sp, #16]
 8006736:	eba0 000a 	sub.w	r0, r0, sl
 800673a:	2240      	movs	r2, #64	@ 0x40
 800673c:	4082      	lsls	r2, r0
 800673e:	4313      	orrs	r3, r2
 8006740:	3401      	adds	r4, #1
 8006742:	9304      	str	r3, [sp, #16]
 8006744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006748:	4824      	ldr	r0, [pc, #144]	@ (80067dc <_svfiprintf_r+0x1e8>)
 800674a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800674e:	2206      	movs	r2, #6
 8006750:	f7f9 fd46 	bl	80001e0 <memchr>
 8006754:	2800      	cmp	r0, #0
 8006756:	d036      	beq.n	80067c6 <_svfiprintf_r+0x1d2>
 8006758:	4b21      	ldr	r3, [pc, #132]	@ (80067e0 <_svfiprintf_r+0x1ec>)
 800675a:	bb1b      	cbnz	r3, 80067a4 <_svfiprintf_r+0x1b0>
 800675c:	9b03      	ldr	r3, [sp, #12]
 800675e:	3307      	adds	r3, #7
 8006760:	f023 0307 	bic.w	r3, r3, #7
 8006764:	3308      	adds	r3, #8
 8006766:	9303      	str	r3, [sp, #12]
 8006768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676a:	4433      	add	r3, r6
 800676c:	9309      	str	r3, [sp, #36]	@ 0x24
 800676e:	e76a      	b.n	8006646 <_svfiprintf_r+0x52>
 8006770:	fb0c 3202 	mla	r2, ip, r2, r3
 8006774:	460c      	mov	r4, r1
 8006776:	2001      	movs	r0, #1
 8006778:	e7a8      	b.n	80066cc <_svfiprintf_r+0xd8>
 800677a:	2300      	movs	r3, #0
 800677c:	3401      	adds	r4, #1
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	4619      	mov	r1, r3
 8006782:	f04f 0c0a 	mov.w	ip, #10
 8006786:	4620      	mov	r0, r4
 8006788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800678c:	3a30      	subs	r2, #48	@ 0x30
 800678e:	2a09      	cmp	r2, #9
 8006790:	d903      	bls.n	800679a <_svfiprintf_r+0x1a6>
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0c6      	beq.n	8006724 <_svfiprintf_r+0x130>
 8006796:	9105      	str	r1, [sp, #20]
 8006798:	e7c4      	b.n	8006724 <_svfiprintf_r+0x130>
 800679a:	fb0c 2101 	mla	r1, ip, r1, r2
 800679e:	4604      	mov	r4, r0
 80067a0:	2301      	movs	r3, #1
 80067a2:	e7f0      	b.n	8006786 <_svfiprintf_r+0x192>
 80067a4:	ab03      	add	r3, sp, #12
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	462a      	mov	r2, r5
 80067aa:	4b0e      	ldr	r3, [pc, #56]	@ (80067e4 <_svfiprintf_r+0x1f0>)
 80067ac:	a904      	add	r1, sp, #16
 80067ae:	4638      	mov	r0, r7
 80067b0:	f7fd fe7e 	bl	80044b0 <_printf_float>
 80067b4:	1c42      	adds	r2, r0, #1
 80067b6:	4606      	mov	r6, r0
 80067b8:	d1d6      	bne.n	8006768 <_svfiprintf_r+0x174>
 80067ba:	89ab      	ldrh	r3, [r5, #12]
 80067bc:	065b      	lsls	r3, r3, #25
 80067be:	f53f af2d 	bmi.w	800661c <_svfiprintf_r+0x28>
 80067c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067c4:	e72c      	b.n	8006620 <_svfiprintf_r+0x2c>
 80067c6:	ab03      	add	r3, sp, #12
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	462a      	mov	r2, r5
 80067cc:	4b05      	ldr	r3, [pc, #20]	@ (80067e4 <_svfiprintf_r+0x1f0>)
 80067ce:	a904      	add	r1, sp, #16
 80067d0:	4638      	mov	r0, r7
 80067d2:	f7fe f905 	bl	80049e0 <_printf_i>
 80067d6:	e7ed      	b.n	80067b4 <_svfiprintf_r+0x1c0>
 80067d8:	0800722e 	.word	0x0800722e
 80067dc:	08007238 	.word	0x08007238
 80067e0:	080044b1 	.word	0x080044b1
 80067e4:	0800653d 	.word	0x0800653d
 80067e8:	08007234 	.word	0x08007234

080067ec <__sflush_r>:
 80067ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f4:	0716      	lsls	r6, r2, #28
 80067f6:	4605      	mov	r5, r0
 80067f8:	460c      	mov	r4, r1
 80067fa:	d454      	bmi.n	80068a6 <__sflush_r+0xba>
 80067fc:	684b      	ldr	r3, [r1, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dc02      	bgt.n	8006808 <__sflush_r+0x1c>
 8006802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	dd48      	ble.n	800689a <__sflush_r+0xae>
 8006808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800680a:	2e00      	cmp	r6, #0
 800680c:	d045      	beq.n	800689a <__sflush_r+0xae>
 800680e:	2300      	movs	r3, #0
 8006810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006814:	682f      	ldr	r7, [r5, #0]
 8006816:	6a21      	ldr	r1, [r4, #32]
 8006818:	602b      	str	r3, [r5, #0]
 800681a:	d030      	beq.n	800687e <__sflush_r+0x92>
 800681c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	0759      	lsls	r1, r3, #29
 8006822:	d505      	bpl.n	8006830 <__sflush_r+0x44>
 8006824:	6863      	ldr	r3, [r4, #4]
 8006826:	1ad2      	subs	r2, r2, r3
 8006828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800682a:	b10b      	cbz	r3, 8006830 <__sflush_r+0x44>
 800682c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800682e:	1ad2      	subs	r2, r2, r3
 8006830:	2300      	movs	r3, #0
 8006832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006834:	6a21      	ldr	r1, [r4, #32]
 8006836:	4628      	mov	r0, r5
 8006838:	47b0      	blx	r6
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	d106      	bne.n	800684e <__sflush_r+0x62>
 8006840:	6829      	ldr	r1, [r5, #0]
 8006842:	291d      	cmp	r1, #29
 8006844:	d82b      	bhi.n	800689e <__sflush_r+0xb2>
 8006846:	4a2a      	ldr	r2, [pc, #168]	@ (80068f0 <__sflush_r+0x104>)
 8006848:	40ca      	lsrs	r2, r1
 800684a:	07d6      	lsls	r6, r2, #31
 800684c:	d527      	bpl.n	800689e <__sflush_r+0xb2>
 800684e:	2200      	movs	r2, #0
 8006850:	6062      	str	r2, [r4, #4]
 8006852:	04d9      	lsls	r1, r3, #19
 8006854:	6922      	ldr	r2, [r4, #16]
 8006856:	6022      	str	r2, [r4, #0]
 8006858:	d504      	bpl.n	8006864 <__sflush_r+0x78>
 800685a:	1c42      	adds	r2, r0, #1
 800685c:	d101      	bne.n	8006862 <__sflush_r+0x76>
 800685e:	682b      	ldr	r3, [r5, #0]
 8006860:	b903      	cbnz	r3, 8006864 <__sflush_r+0x78>
 8006862:	6560      	str	r0, [r4, #84]	@ 0x54
 8006864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006866:	602f      	str	r7, [r5, #0]
 8006868:	b1b9      	cbz	r1, 800689a <__sflush_r+0xae>
 800686a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800686e:	4299      	cmp	r1, r3
 8006870:	d002      	beq.n	8006878 <__sflush_r+0x8c>
 8006872:	4628      	mov	r0, r5
 8006874:	f7ff f9e8 	bl	8005c48 <_free_r>
 8006878:	2300      	movs	r3, #0
 800687a:	6363      	str	r3, [r4, #52]	@ 0x34
 800687c:	e00d      	b.n	800689a <__sflush_r+0xae>
 800687e:	2301      	movs	r3, #1
 8006880:	4628      	mov	r0, r5
 8006882:	47b0      	blx	r6
 8006884:	4602      	mov	r2, r0
 8006886:	1c50      	adds	r0, r2, #1
 8006888:	d1c9      	bne.n	800681e <__sflush_r+0x32>
 800688a:	682b      	ldr	r3, [r5, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0c6      	beq.n	800681e <__sflush_r+0x32>
 8006890:	2b1d      	cmp	r3, #29
 8006892:	d001      	beq.n	8006898 <__sflush_r+0xac>
 8006894:	2b16      	cmp	r3, #22
 8006896:	d11e      	bne.n	80068d6 <__sflush_r+0xea>
 8006898:	602f      	str	r7, [r5, #0]
 800689a:	2000      	movs	r0, #0
 800689c:	e022      	b.n	80068e4 <__sflush_r+0xf8>
 800689e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068a2:	b21b      	sxth	r3, r3
 80068a4:	e01b      	b.n	80068de <__sflush_r+0xf2>
 80068a6:	690f      	ldr	r7, [r1, #16]
 80068a8:	2f00      	cmp	r7, #0
 80068aa:	d0f6      	beq.n	800689a <__sflush_r+0xae>
 80068ac:	0793      	lsls	r3, r2, #30
 80068ae:	680e      	ldr	r6, [r1, #0]
 80068b0:	bf08      	it	eq
 80068b2:	694b      	ldreq	r3, [r1, #20]
 80068b4:	600f      	str	r7, [r1, #0]
 80068b6:	bf18      	it	ne
 80068b8:	2300      	movne	r3, #0
 80068ba:	eba6 0807 	sub.w	r8, r6, r7
 80068be:	608b      	str	r3, [r1, #8]
 80068c0:	f1b8 0f00 	cmp.w	r8, #0
 80068c4:	dde9      	ble.n	800689a <__sflush_r+0xae>
 80068c6:	6a21      	ldr	r1, [r4, #32]
 80068c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80068ca:	4643      	mov	r3, r8
 80068cc:	463a      	mov	r2, r7
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b0      	blx	r6
 80068d2:	2800      	cmp	r0, #0
 80068d4:	dc08      	bgt.n	80068e8 <__sflush_r+0xfc>
 80068d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e8:	4407      	add	r7, r0
 80068ea:	eba8 0800 	sub.w	r8, r8, r0
 80068ee:	e7e7      	b.n	80068c0 <__sflush_r+0xd4>
 80068f0:	20400001 	.word	0x20400001

080068f4 <_fflush_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	690b      	ldr	r3, [r1, #16]
 80068f8:	4605      	mov	r5, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	b913      	cbnz	r3, 8006904 <_fflush_r+0x10>
 80068fe:	2500      	movs	r5, #0
 8006900:	4628      	mov	r0, r5
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	b118      	cbz	r0, 800690e <_fflush_r+0x1a>
 8006906:	6a03      	ldr	r3, [r0, #32]
 8006908:	b90b      	cbnz	r3, 800690e <_fflush_r+0x1a>
 800690a:	f7fe fa13 	bl	8004d34 <__sinit>
 800690e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0f3      	beq.n	80068fe <_fflush_r+0xa>
 8006916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006918:	07d0      	lsls	r0, r2, #31
 800691a:	d404      	bmi.n	8006926 <_fflush_r+0x32>
 800691c:	0599      	lsls	r1, r3, #22
 800691e:	d402      	bmi.n	8006926 <_fflush_r+0x32>
 8006920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006922:	f7fe fb34 	bl	8004f8e <__retarget_lock_acquire_recursive>
 8006926:	4628      	mov	r0, r5
 8006928:	4621      	mov	r1, r4
 800692a:	f7ff ff5f 	bl	80067ec <__sflush_r>
 800692e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006930:	07da      	lsls	r2, r3, #31
 8006932:	4605      	mov	r5, r0
 8006934:	d4e4      	bmi.n	8006900 <_fflush_r+0xc>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	059b      	lsls	r3, r3, #22
 800693a:	d4e1      	bmi.n	8006900 <_fflush_r+0xc>
 800693c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800693e:	f7fe fb27 	bl	8004f90 <__retarget_lock_release_recursive>
 8006942:	e7dd      	b.n	8006900 <_fflush_r+0xc>

08006944 <memmove>:
 8006944:	4288      	cmp	r0, r1
 8006946:	b510      	push	{r4, lr}
 8006948:	eb01 0402 	add.w	r4, r1, r2
 800694c:	d902      	bls.n	8006954 <memmove+0x10>
 800694e:	4284      	cmp	r4, r0
 8006950:	4623      	mov	r3, r4
 8006952:	d807      	bhi.n	8006964 <memmove+0x20>
 8006954:	1e43      	subs	r3, r0, #1
 8006956:	42a1      	cmp	r1, r4
 8006958:	d008      	beq.n	800696c <memmove+0x28>
 800695a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800695e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006962:	e7f8      	b.n	8006956 <memmove+0x12>
 8006964:	4402      	add	r2, r0
 8006966:	4601      	mov	r1, r0
 8006968:	428a      	cmp	r2, r1
 800696a:	d100      	bne.n	800696e <memmove+0x2a>
 800696c:	bd10      	pop	{r4, pc}
 800696e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006976:	e7f7      	b.n	8006968 <memmove+0x24>

08006978 <_sbrk_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4d06      	ldr	r5, [pc, #24]	@ (8006994 <_sbrk_r+0x1c>)
 800697c:	2300      	movs	r3, #0
 800697e:	4604      	mov	r4, r0
 8006980:	4608      	mov	r0, r1
 8006982:	602b      	str	r3, [r5, #0]
 8006984:	f7fb f8fe 	bl	8001b84 <_sbrk>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_sbrk_r+0x1a>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_sbrk_r+0x1a>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	200003d0 	.word	0x200003d0

08006998 <memcpy>:
 8006998:	440a      	add	r2, r1
 800699a:	4291      	cmp	r1, r2
 800699c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80069a0:	d100      	bne.n	80069a4 <memcpy+0xc>
 80069a2:	4770      	bx	lr
 80069a4:	b510      	push	{r4, lr}
 80069a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ae:	4291      	cmp	r1, r2
 80069b0:	d1f9      	bne.n	80069a6 <memcpy+0xe>
 80069b2:	bd10      	pop	{r4, pc}

080069b4 <__assert_func>:
 80069b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069b6:	4614      	mov	r4, r2
 80069b8:	461a      	mov	r2, r3
 80069ba:	4b09      	ldr	r3, [pc, #36]	@ (80069e0 <__assert_func+0x2c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4605      	mov	r5, r0
 80069c0:	68d8      	ldr	r0, [r3, #12]
 80069c2:	b14c      	cbz	r4, 80069d8 <__assert_func+0x24>
 80069c4:	4b07      	ldr	r3, [pc, #28]	@ (80069e4 <__assert_func+0x30>)
 80069c6:	9100      	str	r1, [sp, #0]
 80069c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069cc:	4906      	ldr	r1, [pc, #24]	@ (80069e8 <__assert_func+0x34>)
 80069ce:	462b      	mov	r3, r5
 80069d0:	f000 f870 	bl	8006ab4 <fiprintf>
 80069d4:	f000 f880 	bl	8006ad8 <abort>
 80069d8:	4b04      	ldr	r3, [pc, #16]	@ (80069ec <__assert_func+0x38>)
 80069da:	461c      	mov	r4, r3
 80069dc:	e7f3      	b.n	80069c6 <__assert_func+0x12>
 80069de:	bf00      	nop
 80069e0:	20000018 	.word	0x20000018
 80069e4:	08007249 	.word	0x08007249
 80069e8:	08007256 	.word	0x08007256
 80069ec:	08007284 	.word	0x08007284

080069f0 <_calloc_r>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	fba1 5402 	umull	r5, r4, r1, r2
 80069f6:	b934      	cbnz	r4, 8006a06 <_calloc_r+0x16>
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7ff f999 	bl	8005d30 <_malloc_r>
 80069fe:	4606      	mov	r6, r0
 8006a00:	b928      	cbnz	r0, 8006a0e <_calloc_r+0x1e>
 8006a02:	4630      	mov	r0, r6
 8006a04:	bd70      	pop	{r4, r5, r6, pc}
 8006a06:	220c      	movs	r2, #12
 8006a08:	6002      	str	r2, [r0, #0]
 8006a0a:	2600      	movs	r6, #0
 8006a0c:	e7f9      	b.n	8006a02 <_calloc_r+0x12>
 8006a0e:	462a      	mov	r2, r5
 8006a10:	4621      	mov	r1, r4
 8006a12:	f7fe fa3e 	bl	8004e92 <memset>
 8006a16:	e7f4      	b.n	8006a02 <_calloc_r+0x12>

08006a18 <__ascii_mbtowc>:
 8006a18:	b082      	sub	sp, #8
 8006a1a:	b901      	cbnz	r1, 8006a1e <__ascii_mbtowc+0x6>
 8006a1c:	a901      	add	r1, sp, #4
 8006a1e:	b142      	cbz	r2, 8006a32 <__ascii_mbtowc+0x1a>
 8006a20:	b14b      	cbz	r3, 8006a36 <__ascii_mbtowc+0x1e>
 8006a22:	7813      	ldrb	r3, [r2, #0]
 8006a24:	600b      	str	r3, [r1, #0]
 8006a26:	7812      	ldrb	r2, [r2, #0]
 8006a28:	1e10      	subs	r0, r2, #0
 8006a2a:	bf18      	it	ne
 8006a2c:	2001      	movne	r0, #1
 8006a2e:	b002      	add	sp, #8
 8006a30:	4770      	bx	lr
 8006a32:	4610      	mov	r0, r2
 8006a34:	e7fb      	b.n	8006a2e <__ascii_mbtowc+0x16>
 8006a36:	f06f 0001 	mvn.w	r0, #1
 8006a3a:	e7f8      	b.n	8006a2e <__ascii_mbtowc+0x16>

08006a3c <_realloc_r>:
 8006a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a40:	4607      	mov	r7, r0
 8006a42:	4614      	mov	r4, r2
 8006a44:	460d      	mov	r5, r1
 8006a46:	b921      	cbnz	r1, 8006a52 <_realloc_r+0x16>
 8006a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	f7ff b96f 	b.w	8005d30 <_malloc_r>
 8006a52:	b92a      	cbnz	r2, 8006a60 <_realloc_r+0x24>
 8006a54:	f7ff f8f8 	bl	8005c48 <_free_r>
 8006a58:	4625      	mov	r5, r4
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a60:	f000 f841 	bl	8006ae6 <_malloc_usable_size_r>
 8006a64:	4284      	cmp	r4, r0
 8006a66:	4606      	mov	r6, r0
 8006a68:	d802      	bhi.n	8006a70 <_realloc_r+0x34>
 8006a6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a6e:	d8f4      	bhi.n	8006a5a <_realloc_r+0x1e>
 8006a70:	4621      	mov	r1, r4
 8006a72:	4638      	mov	r0, r7
 8006a74:	f7ff f95c 	bl	8005d30 <_malloc_r>
 8006a78:	4680      	mov	r8, r0
 8006a7a:	b908      	cbnz	r0, 8006a80 <_realloc_r+0x44>
 8006a7c:	4645      	mov	r5, r8
 8006a7e:	e7ec      	b.n	8006a5a <_realloc_r+0x1e>
 8006a80:	42b4      	cmp	r4, r6
 8006a82:	4622      	mov	r2, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	bf28      	it	cs
 8006a88:	4632      	movcs	r2, r6
 8006a8a:	f7ff ff85 	bl	8006998 <memcpy>
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4638      	mov	r0, r7
 8006a92:	f7ff f8d9 	bl	8005c48 <_free_r>
 8006a96:	e7f1      	b.n	8006a7c <_realloc_r+0x40>

08006a98 <__ascii_wctomb>:
 8006a98:	4603      	mov	r3, r0
 8006a9a:	4608      	mov	r0, r1
 8006a9c:	b141      	cbz	r1, 8006ab0 <__ascii_wctomb+0x18>
 8006a9e:	2aff      	cmp	r2, #255	@ 0xff
 8006aa0:	d904      	bls.n	8006aac <__ascii_wctomb+0x14>
 8006aa2:	228a      	movs	r2, #138	@ 0x8a
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006aaa:	4770      	bx	lr
 8006aac:	700a      	strb	r2, [r1, #0]
 8006aae:	2001      	movs	r0, #1
 8006ab0:	4770      	bx	lr
	...

08006ab4 <fiprintf>:
 8006ab4:	b40e      	push	{r1, r2, r3}
 8006ab6:	b503      	push	{r0, r1, lr}
 8006ab8:	4601      	mov	r1, r0
 8006aba:	ab03      	add	r3, sp, #12
 8006abc:	4805      	ldr	r0, [pc, #20]	@ (8006ad4 <fiprintf+0x20>)
 8006abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac2:	6800      	ldr	r0, [r0, #0]
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	f000 f83f 	bl	8006b48 <_vfiprintf_r>
 8006aca:	b002      	add	sp, #8
 8006acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ad0:	b003      	add	sp, #12
 8006ad2:	4770      	bx	lr
 8006ad4:	20000018 	.word	0x20000018

08006ad8 <abort>:
 8006ad8:	b508      	push	{r3, lr}
 8006ada:	2006      	movs	r0, #6
 8006adc:	f000 fa08 	bl	8006ef0 <raise>
 8006ae0:	2001      	movs	r0, #1
 8006ae2:	f7fa ffd6 	bl	8001a92 <_exit>

08006ae6 <_malloc_usable_size_r>:
 8006ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aea:	1f18      	subs	r0, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	bfbc      	itt	lt
 8006af0:	580b      	ldrlt	r3, [r1, r0]
 8006af2:	18c0      	addlt	r0, r0, r3
 8006af4:	4770      	bx	lr

08006af6 <__sfputc_r>:
 8006af6:	6893      	ldr	r3, [r2, #8]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	b410      	push	{r4}
 8006afe:	6093      	str	r3, [r2, #8]
 8006b00:	da08      	bge.n	8006b14 <__sfputc_r+0x1e>
 8006b02:	6994      	ldr	r4, [r2, #24]
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	db01      	blt.n	8006b0c <__sfputc_r+0x16>
 8006b08:	290a      	cmp	r1, #10
 8006b0a:	d103      	bne.n	8006b14 <__sfputc_r+0x1e>
 8006b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b10:	f000 b932 	b.w	8006d78 <__swbuf_r>
 8006b14:	6813      	ldr	r3, [r2, #0]
 8006b16:	1c58      	adds	r0, r3, #1
 8006b18:	6010      	str	r0, [r2, #0]
 8006b1a:	7019      	strb	r1, [r3, #0]
 8006b1c:	4608      	mov	r0, r1
 8006b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <__sfputs_r>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	4606      	mov	r6, r0
 8006b28:	460f      	mov	r7, r1
 8006b2a:	4614      	mov	r4, r2
 8006b2c:	18d5      	adds	r5, r2, r3
 8006b2e:	42ac      	cmp	r4, r5
 8006b30:	d101      	bne.n	8006b36 <__sfputs_r+0x12>
 8006b32:	2000      	movs	r0, #0
 8006b34:	e007      	b.n	8006b46 <__sfputs_r+0x22>
 8006b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b3a:	463a      	mov	r2, r7
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	f7ff ffda 	bl	8006af6 <__sfputc_r>
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	d1f3      	bne.n	8006b2e <__sfputs_r+0xa>
 8006b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b48 <_vfiprintf_r>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	460d      	mov	r5, r1
 8006b4e:	b09d      	sub	sp, #116	@ 0x74
 8006b50:	4614      	mov	r4, r2
 8006b52:	4698      	mov	r8, r3
 8006b54:	4606      	mov	r6, r0
 8006b56:	b118      	cbz	r0, 8006b60 <_vfiprintf_r+0x18>
 8006b58:	6a03      	ldr	r3, [r0, #32]
 8006b5a:	b90b      	cbnz	r3, 8006b60 <_vfiprintf_r+0x18>
 8006b5c:	f7fe f8ea 	bl	8004d34 <__sinit>
 8006b60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b62:	07d9      	lsls	r1, r3, #31
 8006b64:	d405      	bmi.n	8006b72 <_vfiprintf_r+0x2a>
 8006b66:	89ab      	ldrh	r3, [r5, #12]
 8006b68:	059a      	lsls	r2, r3, #22
 8006b6a:	d402      	bmi.n	8006b72 <_vfiprintf_r+0x2a>
 8006b6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b6e:	f7fe fa0e 	bl	8004f8e <__retarget_lock_acquire_recursive>
 8006b72:	89ab      	ldrh	r3, [r5, #12]
 8006b74:	071b      	lsls	r3, r3, #28
 8006b76:	d501      	bpl.n	8006b7c <_vfiprintf_r+0x34>
 8006b78:	692b      	ldr	r3, [r5, #16]
 8006b7a:	b99b      	cbnz	r3, 8006ba4 <_vfiprintf_r+0x5c>
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f000 f938 	bl	8006df4 <__swsetup_r>
 8006b84:	b170      	cbz	r0, 8006ba4 <_vfiprintf_r+0x5c>
 8006b86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b88:	07dc      	lsls	r4, r3, #31
 8006b8a:	d504      	bpl.n	8006b96 <_vfiprintf_r+0x4e>
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b90:	b01d      	add	sp, #116	@ 0x74
 8006b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b96:	89ab      	ldrh	r3, [r5, #12]
 8006b98:	0598      	lsls	r0, r3, #22
 8006b9a:	d4f7      	bmi.n	8006b8c <_vfiprintf_r+0x44>
 8006b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b9e:	f7fe f9f7 	bl	8004f90 <__retarget_lock_release_recursive>
 8006ba2:	e7f3      	b.n	8006b8c <_vfiprintf_r+0x44>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ba8:	2320      	movs	r3, #32
 8006baa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bb2:	2330      	movs	r3, #48	@ 0x30
 8006bb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d64 <_vfiprintf_r+0x21c>
 8006bb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bbc:	f04f 0901 	mov.w	r9, #1
 8006bc0:	4623      	mov	r3, r4
 8006bc2:	469a      	mov	sl, r3
 8006bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bc8:	b10a      	cbz	r2, 8006bce <_vfiprintf_r+0x86>
 8006bca:	2a25      	cmp	r2, #37	@ 0x25
 8006bcc:	d1f9      	bne.n	8006bc2 <_vfiprintf_r+0x7a>
 8006bce:	ebba 0b04 	subs.w	fp, sl, r4
 8006bd2:	d00b      	beq.n	8006bec <_vfiprintf_r+0xa4>
 8006bd4:	465b      	mov	r3, fp
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	4629      	mov	r1, r5
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f7ff ffa2 	bl	8006b24 <__sfputs_r>
 8006be0:	3001      	adds	r0, #1
 8006be2:	f000 80a7 	beq.w	8006d34 <_vfiprintf_r+0x1ec>
 8006be6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006be8:	445a      	add	r2, fp
 8006bea:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bec:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 809f 	beq.w	8006d34 <_vfiprintf_r+0x1ec>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c00:	f10a 0a01 	add.w	sl, sl, #1
 8006c04:	9304      	str	r3, [sp, #16]
 8006c06:	9307      	str	r3, [sp, #28]
 8006c08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c0e:	4654      	mov	r4, sl
 8006c10:	2205      	movs	r2, #5
 8006c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c16:	4853      	ldr	r0, [pc, #332]	@ (8006d64 <_vfiprintf_r+0x21c>)
 8006c18:	f7f9 fae2 	bl	80001e0 <memchr>
 8006c1c:	9a04      	ldr	r2, [sp, #16]
 8006c1e:	b9d8      	cbnz	r0, 8006c58 <_vfiprintf_r+0x110>
 8006c20:	06d1      	lsls	r1, r2, #27
 8006c22:	bf44      	itt	mi
 8006c24:	2320      	movmi	r3, #32
 8006c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c2a:	0713      	lsls	r3, r2, #28
 8006c2c:	bf44      	itt	mi
 8006c2e:	232b      	movmi	r3, #43	@ 0x2b
 8006c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c34:	f89a 3000 	ldrb.w	r3, [sl]
 8006c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c3a:	d015      	beq.n	8006c68 <_vfiprintf_r+0x120>
 8006c3c:	9a07      	ldr	r2, [sp, #28]
 8006c3e:	4654      	mov	r4, sl
 8006c40:	2000      	movs	r0, #0
 8006c42:	f04f 0c0a 	mov.w	ip, #10
 8006c46:	4621      	mov	r1, r4
 8006c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c4c:	3b30      	subs	r3, #48	@ 0x30
 8006c4e:	2b09      	cmp	r3, #9
 8006c50:	d94b      	bls.n	8006cea <_vfiprintf_r+0x1a2>
 8006c52:	b1b0      	cbz	r0, 8006c82 <_vfiprintf_r+0x13a>
 8006c54:	9207      	str	r2, [sp, #28]
 8006c56:	e014      	b.n	8006c82 <_vfiprintf_r+0x13a>
 8006c58:	eba0 0308 	sub.w	r3, r0, r8
 8006c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c60:	4313      	orrs	r3, r2
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	46a2      	mov	sl, r4
 8006c66:	e7d2      	b.n	8006c0e <_vfiprintf_r+0xc6>
 8006c68:	9b03      	ldr	r3, [sp, #12]
 8006c6a:	1d19      	adds	r1, r3, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	9103      	str	r1, [sp, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	bfbb      	ittet	lt
 8006c74:	425b      	neglt	r3, r3
 8006c76:	f042 0202 	orrlt.w	r2, r2, #2
 8006c7a:	9307      	strge	r3, [sp, #28]
 8006c7c:	9307      	strlt	r3, [sp, #28]
 8006c7e:	bfb8      	it	lt
 8006c80:	9204      	strlt	r2, [sp, #16]
 8006c82:	7823      	ldrb	r3, [r4, #0]
 8006c84:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c86:	d10a      	bne.n	8006c9e <_vfiprintf_r+0x156>
 8006c88:	7863      	ldrb	r3, [r4, #1]
 8006c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c8c:	d132      	bne.n	8006cf4 <_vfiprintf_r+0x1ac>
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	1d1a      	adds	r2, r3, #4
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	9203      	str	r2, [sp, #12]
 8006c96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c9a:	3402      	adds	r4, #2
 8006c9c:	9305      	str	r3, [sp, #20]
 8006c9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d74 <_vfiprintf_r+0x22c>
 8006ca2:	7821      	ldrb	r1, [r4, #0]
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	4650      	mov	r0, sl
 8006ca8:	f7f9 fa9a 	bl	80001e0 <memchr>
 8006cac:	b138      	cbz	r0, 8006cbe <_vfiprintf_r+0x176>
 8006cae:	9b04      	ldr	r3, [sp, #16]
 8006cb0:	eba0 000a 	sub.w	r0, r0, sl
 8006cb4:	2240      	movs	r2, #64	@ 0x40
 8006cb6:	4082      	lsls	r2, r0
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	3401      	adds	r4, #1
 8006cbc:	9304      	str	r3, [sp, #16]
 8006cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc2:	4829      	ldr	r0, [pc, #164]	@ (8006d68 <_vfiprintf_r+0x220>)
 8006cc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cc8:	2206      	movs	r2, #6
 8006cca:	f7f9 fa89 	bl	80001e0 <memchr>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d03f      	beq.n	8006d52 <_vfiprintf_r+0x20a>
 8006cd2:	4b26      	ldr	r3, [pc, #152]	@ (8006d6c <_vfiprintf_r+0x224>)
 8006cd4:	bb1b      	cbnz	r3, 8006d1e <_vfiprintf_r+0x1d6>
 8006cd6:	9b03      	ldr	r3, [sp, #12]
 8006cd8:	3307      	adds	r3, #7
 8006cda:	f023 0307 	bic.w	r3, r3, #7
 8006cde:	3308      	adds	r3, #8
 8006ce0:	9303      	str	r3, [sp, #12]
 8006ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce4:	443b      	add	r3, r7
 8006ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ce8:	e76a      	b.n	8006bc0 <_vfiprintf_r+0x78>
 8006cea:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cee:	460c      	mov	r4, r1
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	e7a8      	b.n	8006c46 <_vfiprintf_r+0xfe>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	3401      	adds	r4, #1
 8006cf8:	9305      	str	r3, [sp, #20]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	f04f 0c0a 	mov.w	ip, #10
 8006d00:	4620      	mov	r0, r4
 8006d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d06:	3a30      	subs	r2, #48	@ 0x30
 8006d08:	2a09      	cmp	r2, #9
 8006d0a:	d903      	bls.n	8006d14 <_vfiprintf_r+0x1cc>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0c6      	beq.n	8006c9e <_vfiprintf_r+0x156>
 8006d10:	9105      	str	r1, [sp, #20]
 8006d12:	e7c4      	b.n	8006c9e <_vfiprintf_r+0x156>
 8006d14:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d18:	4604      	mov	r4, r0
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e7f0      	b.n	8006d00 <_vfiprintf_r+0x1b8>
 8006d1e:	ab03      	add	r3, sp, #12
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	462a      	mov	r2, r5
 8006d24:	4b12      	ldr	r3, [pc, #72]	@ (8006d70 <_vfiprintf_r+0x228>)
 8006d26:	a904      	add	r1, sp, #16
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f7fd fbc1 	bl	80044b0 <_printf_float>
 8006d2e:	4607      	mov	r7, r0
 8006d30:	1c78      	adds	r0, r7, #1
 8006d32:	d1d6      	bne.n	8006ce2 <_vfiprintf_r+0x19a>
 8006d34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d36:	07d9      	lsls	r1, r3, #31
 8006d38:	d405      	bmi.n	8006d46 <_vfiprintf_r+0x1fe>
 8006d3a:	89ab      	ldrh	r3, [r5, #12]
 8006d3c:	059a      	lsls	r2, r3, #22
 8006d3e:	d402      	bmi.n	8006d46 <_vfiprintf_r+0x1fe>
 8006d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d42:	f7fe f925 	bl	8004f90 <__retarget_lock_release_recursive>
 8006d46:	89ab      	ldrh	r3, [r5, #12]
 8006d48:	065b      	lsls	r3, r3, #25
 8006d4a:	f53f af1f 	bmi.w	8006b8c <_vfiprintf_r+0x44>
 8006d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d50:	e71e      	b.n	8006b90 <_vfiprintf_r+0x48>
 8006d52:	ab03      	add	r3, sp, #12
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	462a      	mov	r2, r5
 8006d58:	4b05      	ldr	r3, [pc, #20]	@ (8006d70 <_vfiprintf_r+0x228>)
 8006d5a:	a904      	add	r1, sp, #16
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f7fd fe3f 	bl	80049e0 <_printf_i>
 8006d62:	e7e4      	b.n	8006d2e <_vfiprintf_r+0x1e6>
 8006d64:	0800722e 	.word	0x0800722e
 8006d68:	08007238 	.word	0x08007238
 8006d6c:	080044b1 	.word	0x080044b1
 8006d70:	08006b25 	.word	0x08006b25
 8006d74:	08007234 	.word	0x08007234

08006d78 <__swbuf_r>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	460e      	mov	r6, r1
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	4605      	mov	r5, r0
 8006d80:	b118      	cbz	r0, 8006d8a <__swbuf_r+0x12>
 8006d82:	6a03      	ldr	r3, [r0, #32]
 8006d84:	b90b      	cbnz	r3, 8006d8a <__swbuf_r+0x12>
 8006d86:	f7fd ffd5 	bl	8004d34 <__sinit>
 8006d8a:	69a3      	ldr	r3, [r4, #24]
 8006d8c:	60a3      	str	r3, [r4, #8]
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	071a      	lsls	r2, r3, #28
 8006d92:	d501      	bpl.n	8006d98 <__swbuf_r+0x20>
 8006d94:	6923      	ldr	r3, [r4, #16]
 8006d96:	b943      	cbnz	r3, 8006daa <__swbuf_r+0x32>
 8006d98:	4621      	mov	r1, r4
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f000 f82a 	bl	8006df4 <__swsetup_r>
 8006da0:	b118      	cbz	r0, 8006daa <__swbuf_r+0x32>
 8006da2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006da6:	4638      	mov	r0, r7
 8006da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	6922      	ldr	r2, [r4, #16]
 8006dae:	1a98      	subs	r0, r3, r2
 8006db0:	6963      	ldr	r3, [r4, #20]
 8006db2:	b2f6      	uxtb	r6, r6
 8006db4:	4283      	cmp	r3, r0
 8006db6:	4637      	mov	r7, r6
 8006db8:	dc05      	bgt.n	8006dc6 <__swbuf_r+0x4e>
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f7ff fd99 	bl	80068f4 <_fflush_r>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d1ed      	bne.n	8006da2 <__swbuf_r+0x2a>
 8006dc6:	68a3      	ldr	r3, [r4, #8]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	60a3      	str	r3, [r4, #8]
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	6022      	str	r2, [r4, #0]
 8006dd2:	701e      	strb	r6, [r3, #0]
 8006dd4:	6962      	ldr	r2, [r4, #20]
 8006dd6:	1c43      	adds	r3, r0, #1
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d004      	beq.n	8006de6 <__swbuf_r+0x6e>
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	07db      	lsls	r3, r3, #31
 8006de0:	d5e1      	bpl.n	8006da6 <__swbuf_r+0x2e>
 8006de2:	2e0a      	cmp	r6, #10
 8006de4:	d1df      	bne.n	8006da6 <__swbuf_r+0x2e>
 8006de6:	4621      	mov	r1, r4
 8006de8:	4628      	mov	r0, r5
 8006dea:	f7ff fd83 	bl	80068f4 <_fflush_r>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d0d9      	beq.n	8006da6 <__swbuf_r+0x2e>
 8006df2:	e7d6      	b.n	8006da2 <__swbuf_r+0x2a>

08006df4 <__swsetup_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4b29      	ldr	r3, [pc, #164]	@ (8006e9c <__swsetup_r+0xa8>)
 8006df8:	4605      	mov	r5, r0
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	b118      	cbz	r0, 8006e08 <__swsetup_r+0x14>
 8006e00:	6a03      	ldr	r3, [r0, #32]
 8006e02:	b90b      	cbnz	r3, 8006e08 <__swsetup_r+0x14>
 8006e04:	f7fd ff96 	bl	8004d34 <__sinit>
 8006e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0c:	0719      	lsls	r1, r3, #28
 8006e0e:	d422      	bmi.n	8006e56 <__swsetup_r+0x62>
 8006e10:	06da      	lsls	r2, r3, #27
 8006e12:	d407      	bmi.n	8006e24 <__swsetup_r+0x30>
 8006e14:	2209      	movs	r2, #9
 8006e16:	602a      	str	r2, [r5, #0]
 8006e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e22:	e033      	b.n	8006e8c <__swsetup_r+0x98>
 8006e24:	0758      	lsls	r0, r3, #29
 8006e26:	d512      	bpl.n	8006e4e <__swsetup_r+0x5a>
 8006e28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e2a:	b141      	cbz	r1, 8006e3e <__swsetup_r+0x4a>
 8006e2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e30:	4299      	cmp	r1, r3
 8006e32:	d002      	beq.n	8006e3a <__swsetup_r+0x46>
 8006e34:	4628      	mov	r0, r5
 8006e36:	f7fe ff07 	bl	8005c48 <_free_r>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e3e:	89a3      	ldrh	r3, [r4, #12]
 8006e40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e44:	81a3      	strh	r3, [r4, #12]
 8006e46:	2300      	movs	r3, #0
 8006e48:	6063      	str	r3, [r4, #4]
 8006e4a:	6923      	ldr	r3, [r4, #16]
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	89a3      	ldrh	r3, [r4, #12]
 8006e50:	f043 0308 	orr.w	r3, r3, #8
 8006e54:	81a3      	strh	r3, [r4, #12]
 8006e56:	6923      	ldr	r3, [r4, #16]
 8006e58:	b94b      	cbnz	r3, 8006e6e <__swsetup_r+0x7a>
 8006e5a:	89a3      	ldrh	r3, [r4, #12]
 8006e5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e64:	d003      	beq.n	8006e6e <__swsetup_r+0x7a>
 8006e66:	4621      	mov	r1, r4
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f000 f883 	bl	8006f74 <__smakebuf_r>
 8006e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e72:	f013 0201 	ands.w	r2, r3, #1
 8006e76:	d00a      	beq.n	8006e8e <__swsetup_r+0x9a>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	60a2      	str	r2, [r4, #8]
 8006e7c:	6962      	ldr	r2, [r4, #20]
 8006e7e:	4252      	negs	r2, r2
 8006e80:	61a2      	str	r2, [r4, #24]
 8006e82:	6922      	ldr	r2, [r4, #16]
 8006e84:	b942      	cbnz	r2, 8006e98 <__swsetup_r+0xa4>
 8006e86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e8a:	d1c5      	bne.n	8006e18 <__swsetup_r+0x24>
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	0799      	lsls	r1, r3, #30
 8006e90:	bf58      	it	pl
 8006e92:	6962      	ldrpl	r2, [r4, #20]
 8006e94:	60a2      	str	r2, [r4, #8]
 8006e96:	e7f4      	b.n	8006e82 <__swsetup_r+0x8e>
 8006e98:	2000      	movs	r0, #0
 8006e9a:	e7f7      	b.n	8006e8c <__swsetup_r+0x98>
 8006e9c:	20000018 	.word	0x20000018

08006ea0 <_raise_r>:
 8006ea0:	291f      	cmp	r1, #31
 8006ea2:	b538      	push	{r3, r4, r5, lr}
 8006ea4:	4605      	mov	r5, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	d904      	bls.n	8006eb4 <_raise_r+0x14>
 8006eaa:	2316      	movs	r3, #22
 8006eac:	6003      	str	r3, [r0, #0]
 8006eae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006eb6:	b112      	cbz	r2, 8006ebe <_raise_r+0x1e>
 8006eb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ebc:	b94b      	cbnz	r3, 8006ed2 <_raise_r+0x32>
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 f830 	bl	8006f24 <_getpid_r>
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	4601      	mov	r1, r0
 8006ec8:	4628      	mov	r0, r5
 8006eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ece:	f000 b817 	b.w	8006f00 <_kill_r>
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d00a      	beq.n	8006eec <_raise_r+0x4c>
 8006ed6:	1c59      	adds	r1, r3, #1
 8006ed8:	d103      	bne.n	8006ee2 <_raise_r+0x42>
 8006eda:	2316      	movs	r3, #22
 8006edc:	6003      	str	r3, [r0, #0]
 8006ede:	2001      	movs	r0, #1
 8006ee0:	e7e7      	b.n	8006eb2 <_raise_r+0x12>
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006ee8:	4620      	mov	r0, r4
 8006eea:	4798      	blx	r3
 8006eec:	2000      	movs	r0, #0
 8006eee:	e7e0      	b.n	8006eb2 <_raise_r+0x12>

08006ef0 <raise>:
 8006ef0:	4b02      	ldr	r3, [pc, #8]	@ (8006efc <raise+0xc>)
 8006ef2:	4601      	mov	r1, r0
 8006ef4:	6818      	ldr	r0, [r3, #0]
 8006ef6:	f7ff bfd3 	b.w	8006ea0 <_raise_r>
 8006efa:	bf00      	nop
 8006efc:	20000018 	.word	0x20000018

08006f00 <_kill_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d07      	ldr	r5, [pc, #28]	@ (8006f20 <_kill_r+0x20>)
 8006f04:	2300      	movs	r3, #0
 8006f06:	4604      	mov	r4, r0
 8006f08:	4608      	mov	r0, r1
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	602b      	str	r3, [r5, #0]
 8006f0e:	f7fa fdb0 	bl	8001a72 <_kill>
 8006f12:	1c43      	adds	r3, r0, #1
 8006f14:	d102      	bne.n	8006f1c <_kill_r+0x1c>
 8006f16:	682b      	ldr	r3, [r5, #0]
 8006f18:	b103      	cbz	r3, 8006f1c <_kill_r+0x1c>
 8006f1a:	6023      	str	r3, [r4, #0]
 8006f1c:	bd38      	pop	{r3, r4, r5, pc}
 8006f1e:	bf00      	nop
 8006f20:	200003d0 	.word	0x200003d0

08006f24 <_getpid_r>:
 8006f24:	f7fa bd9d 	b.w	8001a62 <_getpid>

08006f28 <__swhatbuf_r>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f30:	2900      	cmp	r1, #0
 8006f32:	b096      	sub	sp, #88	@ 0x58
 8006f34:	4615      	mov	r5, r2
 8006f36:	461e      	mov	r6, r3
 8006f38:	da0d      	bge.n	8006f56 <__swhatbuf_r+0x2e>
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f40:	f04f 0100 	mov.w	r1, #0
 8006f44:	bf14      	ite	ne
 8006f46:	2340      	movne	r3, #64	@ 0x40
 8006f48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	6031      	str	r1, [r6, #0]
 8006f50:	602b      	str	r3, [r5, #0]
 8006f52:	b016      	add	sp, #88	@ 0x58
 8006f54:	bd70      	pop	{r4, r5, r6, pc}
 8006f56:	466a      	mov	r2, sp
 8006f58:	f000 f848 	bl	8006fec <_fstat_r>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	dbec      	blt.n	8006f3a <__swhatbuf_r+0x12>
 8006f60:	9901      	ldr	r1, [sp, #4]
 8006f62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f6a:	4259      	negs	r1, r3
 8006f6c:	4159      	adcs	r1, r3
 8006f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f72:	e7eb      	b.n	8006f4c <__swhatbuf_r+0x24>

08006f74 <__smakebuf_r>:
 8006f74:	898b      	ldrh	r3, [r1, #12]
 8006f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f78:	079d      	lsls	r5, r3, #30
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	d507      	bpl.n	8006f90 <__smakebuf_r+0x1c>
 8006f80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	6123      	str	r3, [r4, #16]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	6163      	str	r3, [r4, #20]
 8006f8c:	b003      	add	sp, #12
 8006f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f90:	ab01      	add	r3, sp, #4
 8006f92:	466a      	mov	r2, sp
 8006f94:	f7ff ffc8 	bl	8006f28 <__swhatbuf_r>
 8006f98:	9f00      	ldr	r7, [sp, #0]
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7fe fec6 	bl	8005d30 <_malloc_r>
 8006fa4:	b948      	cbnz	r0, 8006fba <__smakebuf_r+0x46>
 8006fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006faa:	059a      	lsls	r2, r3, #22
 8006fac:	d4ee      	bmi.n	8006f8c <__smakebuf_r+0x18>
 8006fae:	f023 0303 	bic.w	r3, r3, #3
 8006fb2:	f043 0302 	orr.w	r3, r3, #2
 8006fb6:	81a3      	strh	r3, [r4, #12]
 8006fb8:	e7e2      	b.n	8006f80 <__smakebuf_r+0xc>
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	6020      	str	r0, [r4, #0]
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc2:	81a3      	strh	r3, [r4, #12]
 8006fc4:	9b01      	ldr	r3, [sp, #4]
 8006fc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006fca:	b15b      	cbz	r3, 8006fe4 <__smakebuf_r+0x70>
 8006fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f000 f81d 	bl	8007010 <_isatty_r>
 8006fd6:	b128      	cbz	r0, 8006fe4 <__smakebuf_r+0x70>
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	f023 0303 	bic.w	r3, r3, #3
 8006fde:	f043 0301 	orr.w	r3, r3, #1
 8006fe2:	81a3      	strh	r3, [r4, #12]
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	431d      	orrs	r5, r3
 8006fe8:	81a5      	strh	r5, [r4, #12]
 8006fea:	e7cf      	b.n	8006f8c <__smakebuf_r+0x18>

08006fec <_fstat_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d07      	ldr	r5, [pc, #28]	@ (800700c <_fstat_r+0x20>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	602b      	str	r3, [r5, #0]
 8006ffa:	f7fa fd9a 	bl	8001b32 <_fstat>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d102      	bne.n	8007008 <_fstat_r+0x1c>
 8007002:	682b      	ldr	r3, [r5, #0]
 8007004:	b103      	cbz	r3, 8007008 <_fstat_r+0x1c>
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	bd38      	pop	{r3, r4, r5, pc}
 800700a:	bf00      	nop
 800700c:	200003d0 	.word	0x200003d0

08007010 <_isatty_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4d06      	ldr	r5, [pc, #24]	@ (800702c <_isatty_r+0x1c>)
 8007014:	2300      	movs	r3, #0
 8007016:	4604      	mov	r4, r0
 8007018:	4608      	mov	r0, r1
 800701a:	602b      	str	r3, [r5, #0]
 800701c:	f7fa fd99 	bl	8001b52 <_isatty>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_isatty_r+0x1a>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_isatty_r+0x1a>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	200003d0 	.word	0x200003d0

08007030 <_init>:
 8007030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007032:	bf00      	nop
 8007034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007036:	bc08      	pop	{r3}
 8007038:	469e      	mov	lr, r3
 800703a:	4770      	bx	lr

0800703c <_fini>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	bf00      	nop
 8007040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007042:	bc08      	pop	{r3}
 8007044:	469e      	mov	lr, r3
 8007046:	4770      	bx	lr
